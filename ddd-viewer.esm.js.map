{"version":3,"file":"ddd-viewer.esm.js","sources":["../src/DDDViewerConfig.ts","../src/layers/LayerManager.ts","../src/loading/QueueLoader.ts","../src/process/ViewerProcessManager.ts","../src/render/materials/SkyboxMaterial.ts","../src/render/materials/TerrainMaterial.ts","../src/render/materials/TextMaterial.ts","../src/core/ScenePosition.ts","../src/process/ViewerProcess.ts","../src/process/anim/AnimationProcess.ts","../src/process/anim/CameraMoveAnimationProcess.ts","../src/process/anim/DateTimeAnimationProcess.ts","../src/process/anim/TextAnimationProcess.ts","../src/process/sequencer/ViewerSequencer.ts","../src/ViewerState.ts","../src/core/DDDObjectRef.ts","../src/camera/BaseCameraController.ts","../src/camera/FreeCameraController.ts","../src/SceneViewer.ts","../src/camera/GeolocationCameraController.ts","../src/camera/OrbitCameraController.ts","../src/camera/PanningCameraController.ts","../src/camera/WalkCameraController.ts","../src/camera/WalkCollideCameraController.ts","../src/format/DDDFormat.ts","../src/format/GeoJSON.ts","../src/layers/Base3DLayer.ts","../src/layers/DDD3DLayer.ts","../src/layers/GeoJson3DLayer.ts","../src/layers/GeoTile3DLayer.ts","../src/layers/OverlayLayer.ts","../src/render/environment/DefaultEnvironment.ts","../src/render/pipeline/DefaultRenderPipeline.ts","../src/render/skybox/Skybox.ts","../src/render/skybox/CubemapSkybox.ts","../src/render/skybox/DynamicSkybox.ts"],"sourcesContent":["/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\n\r\n/**\r\n * This object represents ddd-viewer configuration, and is used to pass\r\n * options to the main object (DDDViewer) constructor.\r\n */\r\nclass DDDViewerConfig {\r\n\r\n    defaultCoords: number[] | null = [ -8.726, 42.233 ]; // [0.0, 0.0];\r\n\r\n    // TODO: Move this to layer configuration (?)\r\n    tileUrlBase: string = \"/cache/ddd_http/\";\r\n    tileUrlSuffix: string = \"\";\r\n\r\n    assetsUrlbase: string = \"/assets/\";\r\n\r\n    materialsTextureSet: string | null = \"default256\";\r\n    materialsSplatmap: number | null = null; // 256\r\n\r\n    //sceneGroundTextureOverrideUrl: string | null = null;\r\n\r\n    timeScale: number = 0.0;\r\n\r\n    moveSpeeds: number[] = [2.0, 5.0, 10.0];\r\n\r\n    sceneTileDrawDistanceDefault: number = 1;\r\n}\r\n\r\n\r\nexport { DDDViewerConfig };\r\n","import { SceneViewer } from \"../SceneViewer\";\r\nimport { Base3DLayer } from \"./Base3DLayer\";\r\nimport { GeoTile3DLayer } from \"./GeoTile3DLayer\";\r\n\r\n\r\n/**\r\n * Manages the list of layers known to DDD Viewer.\r\n */\r\nclass LayerManager {\r\n\r\n    sceneViewer: SceneViewer;\r\n    layers: { [ key: string ]: Base3DLayer };\r\n\r\n    constructor( sceneViewer: SceneViewer ) {\r\n        this.sceneViewer = sceneViewer;\r\n        this.layers = {};\r\n    }\r\n\r\n    update( deltaTime: number ): void {\r\n        for (const key in this.layers) {\r\n            // Load tiles dynamically as needed\r\n            this.layers[key].update(deltaTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a layer to DDD viewer.\r\n     * @param key\r\n     * @param layer\r\n     */\r\n    addLayer(layer: Base3DLayer): void {\r\n        layer.setViewer(this.sceneViewer);\r\n        this.layers[layer.key] = layer;\r\n    }\r\n\r\n    removeLayer(layer: Base3DLayer) {\r\n        layer.setViewer(null);  // have the layer cleanup itself from the scene\r\n        delete this.layers[layer.key];\r\n    }\r\n\r\n    /**\r\n     * Retrieves a layer from DDD viewer managed layers.\r\n     * Returns null if the layer does not exist.\r\n     */\r\n    getLayer(key: string) {\r\n        if (key in this.layers) {\r\n            return this.layers[key];\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\nexport { LayerManager };\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport { SceneLoader } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"../SceneViewer\";\r\n//import \"babylonjs-loaders\";\r\n\r\n\r\nclass QueueLoaderTask {\r\n    url?: string;\r\n    onSuccess?: any;\r\n    onFailure?: any;\r\n}\r\n\r\nclass QueueLoader {\r\n\r\n    sceneViewer: SceneViewer;\r\n\r\n    queue: any[];\r\n\r\n    current: any[];\r\n\r\n    concurrentTasks: number = 2;  // 1 on mobile? 2 on PC?\r\n\r\n\r\n    constructor( sceneViewer: SceneViewer ) {\r\n        this.sceneViewer = sceneViewer;\r\n        this.queue = [];\r\n        this.current = [];\r\n    }\r\n\r\n    update(): void {\r\n        //loadNext();\r\n    }\r\n\r\n    processNext(): void {\r\n        if ( this.queue.length < 1 ) {\r\n            return;\r\n        }\r\n\r\n        const task: any = this.queue.pop();\r\n        this.processTask( task );\r\n    }\r\n\r\n    enqueueLoadModel( url: string, onSuccess: any, onFailure: any ): void {\r\n        const task = <QueueLoaderTask> { \"url\": url, \"onSuccess\": onSuccess, \"onFailure\": onFailure };\r\n        this.queue.push(task);\r\n        if ( this.current.length < this.concurrentTasks ) {\r\n            this.processNext();\r\n        }\r\n    }\r\n\r\n    processTask( task: {[key: string]: any} ): void {\r\n        const url: string = <string> task[\"url\"];\r\n        SceneLoader.ImportMesh( null, \"\", url, this.sceneViewer.scene,\r\n            ( newMeshes, particleSystems, skeletons ) => {\r\n                this.processNext();\r\n                task.onSuccess( newMeshes, particleSystems, skeletons );\r\n            },\r\n            () => {\r\n            },\r\n            ( scene, msg, ex ) => {\r\n                task.onFailure( scene, msg, ex );\r\n                this.processNext();\r\n            },\r\n            \".glb\"  // this is to force format in case a blob URL is being used\r\n        );\r\n    }\r\n\r\n    //loadResource() {\r\n    //}\r\n\r\n}\r\n\r\nexport { QueueLoader };","/* \r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { SceneViewer } from \"../SceneViewer\";\r\nimport { ViewerProcess } from \"./ViewerProcess\";\r\n\r\n\r\nclass ViewerProcessManager {\r\n\r\n    sceneViewer: SceneViewer;\r\n    currentProcesses: ViewerProcess[];\r\n\r\n    playing = true;\r\n    currentTasks = [];\r\n    time = 0.0;\r\n\r\n    constructor( sceneViewer: SceneViewer ) {\r\n\r\n        this.sceneViewer = sceneViewer;\r\n        this.currentProcesses = [];\r\n    }\r\n\r\n    update( deltaTime: number ): void {\r\n\r\n        if ( !( this.playing )) { return; }\r\n\r\n        this.time += deltaTime;\r\n\r\n        // Update all current tasks\r\n        for ( const proc of this.currentProcesses ) {\r\n            proc.update( deltaTime );\r\n        }\r\n\r\n        // Remove finished steps\r\n        this.currentProcesses = this.currentProcesses.filter( ( item ) => { return ( ! item.finished ); } );\r\n\r\n    }\r\n\r\n    add( process: ViewerProcess ): void {\r\n        //console.debug(\"Adding process: \", process);\r\n\r\n        // Sanity check\r\n        if (process.sceneViewer != this.sceneViewer) {\r\n            throw new Error(\"Tried to add a ViewerProcess to a ViewerProcessManager which belongs ot a different SceneViewer.\");\r\n        }\r\n\r\n        this.currentProcesses.push( process );\r\n    }\r\n\r\n    remove( process: ViewerProcess ): void {\r\n        //console.debug(\"Removing process: \", process);\r\n        this.currentProcesses = this.currentProcesses.filter(( item ) => { return ( item !== process ); });\r\n    }\r\n\r\n\r\n}\r\n\r\nexport { ViewerProcessManager };\r\n\r\n","/* eslint-disable indent */\r\n\r\nimport { Effect, Material, Scene, ShaderMaterial, Texture } from \"@babylonjs/core\";\r\n\r\n/* eslint-disable no-unused-vars, no-var, no-undef, no-debugger, no-console,  */\r\n\r\nclass SkyMaterialWrapper {\r\n\r\n    material: Material;\r\n\r\n    constructor(scene: Scene) { //, splatmapTexture, atlasTexture, atlasNormalTexture, options) {\r\n        this.material = this.initMaterial(scene);\r\n        //this.testSplatMaterial(scene);\r\n    }\r\n\r\n    initMaterial(scene: Scene): Material {\r\n        //, options: any) {\r\n\r\n        Effect.ShadersStore[\"customVertexShader\"] = `\r\n        precision highp float;\r\n\r\n        // Attributes\r\n        attribute vec3 position;\r\n        attribute vec3 normal;\r\n        attribute vec2 uv;\r\n\r\n        // Uniforms\r\n        uniform mat4 worldViewProjection;\r\n\r\n        // Varying\r\n        varying vec4 vPosition;\r\n        varying vec3 vNormal;\r\n        varying vec2 vUV;\r\n        void main() {\r\n\r\n            vec4 p = vec4( position, 1. );\r\n\r\n            vPosition = p;\r\n            vNormal = normal;\r\n\r\n             vUV = uv;\r\n             // vUV.y =1.-vUV.y;     // flip uv screen ;\r\n            gl_Position = worldViewProjection * p;\r\n\r\n        }`;\r\n\r\n        Effect.ShadersStore[\"customFragmentShader\"] = `\r\n        precision highp float;\r\n\r\n        uniform mat4 worldView;\r\n\r\n        varying vec4 vPosition;\r\n\r\n         precision mediump float;\r\n\r\n        // Day and night sky cycle. By László Matuska (@BitOfGold)\r\n        // Creates a sky texture for a skydome\r\n        // https://www.shadertoy.com/view/ltlSWB\r\n\r\n\r\n        // based on other shaders, Greetings goes to:\r\n\r\n        // Weather. By David Hoskins, May 2014.\r\n        // https://www.shadertoy.com/view/4dsXWn\r\n\r\n        // Edge of atmosphere\r\n        // created by dmytro rubalskyi (ruba)\r\n        // https://www.shadertoy.com/view/XlXGzB\r\n\r\n        // Starfield01 by xaot88\r\n        // https://www.shadertoy.com/view/Md2SR3\r\n        // ======================================================================\r\n\r\n        //#define shadertoy 1\r\n\r\n        //#define cloud2 1 //second layer of clouds, altocumulus or stratocumulus. (in 4K, too slow on my GTX970. HD is OK.)\r\n        //plan was to make cirrus too...\r\n\r\n        #ifdef GL_ES\r\n        precision highp float;\r\n        #endif\r\n\r\n        const float M_PI = 3.1415926535;\r\n        const float DEGRAD = M_PI / 180.0;\r\n\r\n        #ifdef shadertoy\r\n            float height = 500.0; //viewer height\r\n            float cloudy = 0.6; //0.6 //0.0 clear sky\r\n        #else\r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n            uniform sampler2D iChannel0;\r\n            uniform float sunx;\r\n            uniform float suny;\r\n            //uniform float moonx;\r\n            //uniform float moony;\r\n            //uniform float cloudy;\r\n           // uniform float height;\r\n            uniform float time;\r\n        #endif\r\n        //float moonx = 1.0;\r\n        //float moony = 9.6;\r\n        //float sunx = 1.0;\r\n        //float suny = 1.6;\r\n        float cloudy = 0.1;\r\n        float height = 500.0;\r\n\r\n        //rendering quality\r\n        const int steps = 8; //16 is fast, 128 or 256 is extreme high\r\n        const int stepss = 8; //16 is fast, 16 or 32 is high\r\n\r\n        //float t = 12.0; //fix time. 12.0 91.0, 97.0, 188.0, 72.0, 74.0\r\n\r\n        float camroty = 0. * DEGRAD; //20.\r\n        float haze = 0.1; //0.2\r\n        float cloudyhigh = 0.05; //if cloud2 defined\r\n\r\n        float cloudnear = 1.0; //9e3 12e3  //do not render too close clouds on the zenith\r\n        float cloudfar = 1e3; //15e3 17e3\r\n\r\n        float startreshold = 0.99; //0.99 0.98 star density treshold.\r\n\r\n        const float I = 10.; //sun light power, 10.0 is normal\r\n        const float g = 0.45; //light concentration .76 //.45 //.6  .45 is normaL\r\n        const float g2 = g * g;\r\n\r\n        //Reyleigh scattering (sky color, atmospheric up to 8km)\r\n        vec3 bR = vec3(5.8e-6, 13.5e-6, 33.1e-6); //normal earth\r\n        //vec3 bR = vec3(5.8e-6, 33.1e-6, 13.5e-6); //purple\r\n        //vec3 bR = vec3( 63.5e-6, 13.1e-6, 50.8e-6 ); //green\r\n        //vec3 bR = vec3( 13.5e-6, 23.1e-6, 115.8e-6 ); //yellow\r\n        //vec3 bR = vec3( 5.5e-6, 15.1e-6, 355.8e-6 ); //yeellow\r\n        //vec3 bR = vec3(3.5e-6, 333.1e-6, 235.8e-6 ); //red-purple\r\n\r\n        //Mie scattering (water particles up to 1km)\r\n        vec3 bM = vec3(21e-6); //normal mie\r\n        //vec3 bM = vec3(50e-6); //high mie\r\n\r\n        //-----\r\n        //positions\r\n\r\n        const float Hr = 8000.0; //Reyleight scattering top\r\n        const float Hm = 1000.0; //Mie scattering top\r\n\r\n        const float R0 = 6360e3; //planet radius\r\n        const float Ra = 6380e3; //atmosphere radius\r\n        vec3 C = vec3(0., -R0, 0.); //planet center\r\n        vec3 Ds = normalize(vec3(0., .09, -1.)); //sun direction?\r\n\r\n        //--------------------------------------------------------------------------\r\n        //Starfield\r\n        // License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n\r\n        // Return random noise in the range [0.0, 1.0], as a function of x.\r\n        float Noise2d( in vec2 x )\r\n        {\r\n            float xhash = cos( x.x * 37.0 );\r\n            float yhash = cos( x.y * 57.0 );\r\n            return fract( 415.92653 * ( xhash + yhash ) );\r\n        }\r\n\r\n        // Convert Noise2d() into a \"star field\" by stomping everthing below fThreshhold to zero.\r\n        float NoisyStarField( in vec2 vSamplePos, float fThreshhold )\r\n        {\r\n            float StarVal = Noise2d( vSamplePos );\r\n            if ( StarVal >= fThreshhold )\r\n                StarVal = pow( (StarVal - fThreshhold)/(1.0 - fThreshhold), 6.0 );\r\n            else\r\n                StarVal = 0.0;\r\n            return StarVal;\r\n        }\r\n\r\n        // Stabilize NoisyStarField() by only sampling at integer values.\r\n        float StableStarField( in vec2 vSamplePos, float fThreshhold )\r\n        {\r\n            // Linear interpolation between four samples.\r\n            // Note: This approach has some visual artifacts.\r\n            // There must be a better way to \"anti alias\" the star field.\r\n            float fractX = fract( vSamplePos.x );\r\n            float fractY = fract( vSamplePos.y );\r\n            vec2 floorSample = floor( vSamplePos );\r\n            float v1 = NoisyStarField( floorSample, fThreshhold );\r\n            float v2 = NoisyStarField( floorSample + vec2( 0.0, 1.0 ), fThreshhold );\r\n            float v3 = NoisyStarField( floorSample + vec2( 1.0, 0.0 ), fThreshhold );\r\n            float v4 = NoisyStarField( floorSample + vec2( 1.0, 1.0 ), fThreshhold );\r\n\r\n            float StarVal =   v1 * ( 1.0 - fractX ) * ( 1.0 - fractY )\r\n                            + v2 * ( 1.0 - fractX ) * fractY\r\n                            + v3 * fractX * ( 1.0 - fractY )\r\n                            + v4 * fractX * fractY;\r\n            return StarVal;\r\n        }\r\n\r\n\r\n        //--------------------------------------------------------------------------\r\n        //Cloud noise\r\n\r\n        float Noise( in vec3 x )\r\n        {\r\n            vec3 p = floor(x);\r\n            vec3 f = fract(x);\r\n            f = f*f*(3.0-2.0*f);\r\n\r\n            vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\r\n\r\n            vec2 rg = texture( iChannel0, (uv+ 0.5)/256.0, -100.0).yx;\r\n            return mix( rg.x, rg.y, f.z );\r\n        }\r\n\r\n        float fnoise( vec3 p, in float t )\r\n        {\r\n            p *= .25;\r\n            float f;\r\n\r\n            f = 0.5000 * Noise(p); p = p * 3.02; p.y -= t*.2;\r\n            f += 0.2500 * Noise(p); p = p * 3.03; p.y += t*.06;\r\n            f += 0.1250 * Noise(p); p = p * 3.01;\r\n            f += 0.0625   * Noise(p); p =  p * 3.03;\r\n            f += 0.03125  * Noise(p); p =  p * 3.02;\r\n            f += 0.015625 * Noise(p);\r\n            return f;\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        //clouds, scattering\r\n\r\n        float cloud(vec3 p, in float t) {\r\n            float cld = fnoise(p*2e-4,t) + cloudy*0.1 ;\r\n            cld = smoothstep(.4+.04, .6+.04, cld);\r\n            cld *= 70.;\r\n            return cld+haze;\r\n        }\r\n\r\n\r\n        void densities(in vec3 pos, out float rayleigh, out float mie, in float t) {\r\n            float h = length(pos - C) - R0;\r\n            rayleigh =  exp(-h/Hr);\r\n            vec3 d = pos;\r\n            d.y = 0.0;\r\n            float dist = length(d);\r\n\r\n            float cld = 0.;\r\n            if (5e3 < h && h < 8e3) {\r\n                cld = cloud(pos+vec3(23175.7, 0.,-t*3e3), t);\r\n                cld *= sin(3.1415*(h-5e3)/5e3) * cloudy;\r\n            }\r\n            #ifdef cloud2\r\n                float cld2 = 0.;\r\n                if (12e3 < h && h < 15.5e3) {\r\n                    cld2 = fnoise(pos*3e-4,t)*cloud(pos*32.0+vec3(27612.3, 0.,-t*15e3), t);\r\n                    cld2 *= sin(3.1413*(h-12e3)/12e3) * cloudyhigh;\r\n                    cld2 = clamp(cld2,0.0,1.0);\r\n                }\r\n\r\n            #endif\r\n\r\n\r\n            if ( dist < cloudfar) {\r\n                float factor = clamp(1.0-((cloudfar - dist)/(cloudfar-cloudnear)),0.0,1.0);\r\n                cld *= factor;\r\n            }\r\n\r\n            mie = exp(-h/Hm) + cld + haze;\r\n            #ifdef cloud2\r\n                mie += cld2;\r\n            #endif\r\n\r\n        }\r\n\r\n        float escape(in vec3 p, in vec3 d, in float R) {\r\n\r\n            vec3 v = p - C;\r\n            float b = dot(v, d);\r\n            float c = dot(v, v) - R*R;\r\n            float det2 = b * b - c;\r\n            if (det2 < 0.) return -1.;\r\n            float det = sqrt(det2);\r\n            float t1 = -b - det, t2 = -b + det;\r\n            return (t1 >= 0.) ? t1 : t2;\r\n        }\r\n\r\n        // this can be explained: http://www.scratchapixel.com/lessons/3d-advanced-lessons/simulating-the-colors-of-the-sky/atmospheric-scattering/\r\n        void scatter(vec3 o, vec3 d, out vec3 col, out float scat, in float t) {\r\n            float L = escape(o, d, Ra);\r\n            float mu = dot(d, Ds);\r\n            float opmu2 = 1. + mu*mu;\r\n            float phaseR = .0596831 * opmu2;\r\n            float phaseM = .1193662 * (1. - g2) * opmu2 / ((2. + g2) * pow(1. + g2 - 2.*g*mu, 1.5));\r\n\r\n            float depthR = 0., depthM = 0.;\r\n            vec3 R = vec3(0.), M = vec3(0.);\r\n\r\n            float dl = L / float(steps);\r\n            for (int i = 0; i < steps; ++i) {\r\n                float l = float(i) * dl;\r\n                vec3 p = o + d * l;\r\n\r\n                float dR, dM;\r\n                densities(p, dR, dM, t);\r\n                dR *= dl; dM *= dl;\r\n                depthR += dR;\r\n                depthM += dM;\r\n\r\n                float Ls = escape(p, Ds, Ra);\r\n                if (Ls > 0.) {\r\n                    float dls = Ls / float(stepss);\r\n                    float depthRs = 0., depthMs = 0.;\r\n                    for (int j = 0; j < stepss; ++j) {\r\n                        float ls = float(j) * dls;\r\n                        vec3 ps = p + Ds * ls;\r\n                        float dRs, dMs;\r\n                        densities(ps, dRs, dMs, t);\r\n                        depthRs += dRs * dls;\r\n                        depthMs += dMs * dls;\r\n                    }\r\n\r\n                    vec3 A = exp(-(bR * (depthRs + depthR) + bM * (depthMs + depthM)));\r\n                    R += A * dR;\r\n                    M += A * dM;\r\n                }\r\n            }\r\n\r\n\r\n            col = I * (R * bR * phaseR + M * bM * phaseM);\r\n            scat = 1.0 - clamp(depthM*1e-5,0.,1.);\r\n        }\r\n\r\n        //--------------------------------------------------------------------------\r\n        // ray casting\r\n\r\n\r\n        vec3 rotate_y(vec3 v, float angle)\r\n        {\r\n            float ca = cos(angle); float sa = sin(angle);\r\n            return v*mat3(\r\n                +ca, +.0, -sa,\r\n                +.0,+1.0, +.0,\r\n                +sa, +.0, +ca);\r\n        }\r\n\r\n        vec3 rotate_x(vec3 v, float angle)\r\n        {\r\n            float ca = cos(angle); float sa = sin(angle);\r\n            return v*mat3(\r\n                +1.0, +.0, +.0,\r\n                +.0, +ca, -sa,\r\n                +.0, +sa, +ca);\r\n        }\r\n\r\n        float map(float value, float min1, float max1, float min2, float max2) {\r\n          return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\r\n        }\r\n\r\n        vec4 generate(in vec2 uv, in vec2 fragCoord, in vec2 sunpos, in float t) {\r\n\r\n            //if (fragCoord.y < -0.25) discard;\r\n\r\n            float att = 1.0;\r\n            float staratt = 0.0;\r\n            if (sunpos.y < 0.10) {\r\n                staratt = map(sunpos.y, 0.20, -1.0, 0.0, 1.0);\r\n            }\r\n            if (sunpos.y < -0.10) {\r\n                att = map(sunpos.y, -0.10, -1.0, 1.0, 0.25);\r\n                //sunpos.y = -sunpos.y;\r\n            }\r\n\r\n            vec3 O = vec3(0., height, 0.);\r\n\r\n            vec3 D = normalize(rotate_y(rotate_x(vec3(0.0, 0.0, 1.0),-uv.y*M_PI/2.0),-uv.x*M_PI+camroty));\r\n\r\n            if (D.y <= -0.15) {\r\n                D.y = -0.3 -D.y;\r\n            }\r\n\r\n            Ds= normalize(rotate_y(rotate_x(vec3(0.0, 0.0, 1.0),-sunpos.y*M_PI/2.0),-sunpos.x*M_PI));\r\n            float scat = 0.;\r\n            vec3 color = vec3(0.);\r\n            scatter(O, D, color, scat, t);\r\n            color *= att;\r\n\r\n            float starcolor = StableStarField(fragCoord * 1024.0, startreshold);\r\n            color += vec3(scat * starcolor * staratt);\r\n\r\n            // Water mix to bottom half, black at night\r\n            if (fragCoord.y < 0.0) {\r\n                float waterFactor = smoothstep(-0.05, 0.0, sunpos.y);\r\n                vec3 waterColor = vec3(70.0 / 255.0, 135.0 / 255.0, 240.0 / 255.0) * waterFactor;\r\n                float waterMix = smoothstep(0.0, -0.1, fragCoord.y);\r\n                waterColor = (color + waterColor) / 2.0;\r\n                color = color + (waterColor - color) * waterMix;\r\n            }\r\n\r\n            float env = 1.0;\r\n            return(vec4(env * pow(color, vec3(.7)),1.0));\r\n        }\r\n\r\n        void main() {\r\n            vec2 uv = vec2(2.0 * vUV.x - 1.0,  -2.0 *  vUV.y + 1.0);\r\n            vec2 sunpos = vec2(sunx,suny);\r\n            float t = time;\r\n            gl_FragColor = generate(uv, uv, sunpos,t);\r\n        }\r\n\r\n        `;\r\n\r\n\r\n        // Compile\r\n        var shaderMaterial = new ShaderMaterial( \"skyShader\", scene, {\r\n            vertex: \"custom\",\r\n            fragment: \"custom\",\r\n            },\r\n            {\r\n            attributes: [ \"position\", \"normal\", \"uv\" ],\r\n            uniforms: [ \"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\" ]\r\n            });\r\n\r\n        const mainTexture = new Texture(\"/textures/skynoise.png\", scene, true, false, 12);  // NEAREST\r\n\r\n        //https://www.shadertoy.com/view/ltlSWB\r\n        shaderMaterial.setTexture(\"iChannel0\", mainTexture);\r\n        shaderMaterial.setFloat(\"time\", 0);\r\n        shaderMaterial.setFloat(\"offset\", 10);\r\n        shaderMaterial.setFloat(\"sunx\", 2.0);\r\n        shaderMaterial.setFloat(\"suny\", 0.9);\r\n        shaderMaterial.backFaceCulling = false;\r\n\r\n\r\n        /*\r\n        var time = 0;\r\n        scene.registerBeforeRender(function () {\r\n            var shaderMaterial = scene.getMaterialByName(\"skyShader\");\r\n            shaderMaterial.setFloat(\"time\", time);\r\n\r\n            //Animate Move Sun\r\n            shaderMaterial.setFloat(\"suny\", Math.sin(time/3));\r\n            shaderMaterial.setFloat(\"sunx\", Math.sin(time/3));\r\n            time += 0.008;\r\n        });\r\n        */\r\n\r\n        this.material = shaderMaterial;\r\n        return shaderMaterial;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { SkyMaterialWrapper };","/* eslint-disable object-curly-spacing */\r\n/* eslint-disable array-bracket-spacing */\r\n/* eslint-disable indent */\r\n\r\n//import * as BABYLON from \"babylonjs\";\r\n//import * as BABYLONMAT from \"babylonjs-materials\";\r\n\r\n//import \"babylonjs-loaders\";\r\nimport { PBRCustomMaterial } from \"@babylonjs/materials\";\r\nimport { AbstractMesh, Color3, Effect, Mesh, Scene, Texture, Vector2 } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\n\r\n/* eslint-disable no-unused-vars, no-var, no-undef, no-debugger, no-console,  */\r\n\r\n/**\r\n * From: https://forum.babylonjs.com/t/pbr-texture-splatting-up-to-64-textures/1994/28\r\n *  and: https://www.babylonjs-playground.com/#LIVRIY#58\r\n */\r\nclass TerrainMaterialWrapper {\r\n\r\n    sceneViewer: SceneViewer;\r\n    material: PBRCustomMaterial;\r\n    dedupDouble: boolean;\r\n\r\n    options: any;\r\n\r\n    tileIndexes = [];\r\n    shaderinjectpoint1 = \"\";\r\n    shaderinjectpoint2 = \"\";\r\n    shaderinjectpoint3 = \"\";\r\n    shaderinjectpoint4 = \"\";\r\n\r\n    numTilesHorizontal: number = 0;\r\n    numTilesVertical: number = 0;\r\n    totalTiles: number = 0;\r\n    tileScale: Vector2 = new Vector2(1, 1);\r\n\r\n    numSplatTilesHorizontal: number = 0;\r\n    numSplatTilesVertical: number = 0;\r\n    totalSplatTiles: number = 0;\r\n    splatScale: Vector2 = new Vector2(1, 1);\r\n\r\n    splatMap: Texture | null = null;\r\n    atlasBumpTexture: Texture | null = null;\r\n\r\n    static terrainMaterialShared: PBRCustomMaterial | null = null;\r\n    static terrainEffectShared: Effect | null = null;\r\n    static matIdx = 1;\r\n    initialized = false;\r\n\r\n    constructor(sceneViewer: SceneViewer, splatmapTexture: Texture, atlasTexture: Texture, atlasNormalTexture: Texture, options: any = null) {\r\n\r\n        // TODO: Options should be merged with defaults!\r\n\r\n        this.sceneViewer = sceneViewer;\r\n        this.dedupDouble = false;\r\n\r\n        // Compile shader only first time\r\n        if (true || TerrainMaterialWrapper.terrainMaterialShared == null) {\r\n            this.material = this.initSplatMaterial( <Scene> this.sceneViewer.scene, splatmapTexture, atlasTexture, atlasNormalTexture, options );\r\n            TerrainMaterialWrapper.terrainMaterialShared = this.material;\r\n        } else {\r\n            //this.material = TerrainMaterialWrapper.terrainMaterialShared;\r\n\r\n            this.splatMap = splatmapTexture;\r\n            if (atlasTexture !== null) {\r\n                this.atlasBumpTexture = atlasNormalTexture;\r\n            }\r\n            this.material = new PBRCustomMaterial(\"splatMaterial\" + (TerrainMaterialWrapper.matIdx++).toString(), this.sceneViewer.scene);  // + (TerrainMaterialWrapper.matIdx++)\r\n            this.material.metallic = 0.0; // 0.0;\r\n            this.material.roughness = 0.0; // 0.43 (asphalt); // 0.95;\r\n            //this.material.environmentIntensity = 1.0;  // This one is needed to avoid saturation due to env\r\n            this.material.albedoTexture = atlasTexture;\r\n            this.material.AddUniform(\"splatmap\",\"sampler2D\", {});\r\n            this.material.AddUniform(\"atlasNormalsSampler\",\"sampler2D\",  {});\r\n            // Reuse shader\r\n            this.material['_prepareEffect'] = () => {\r\n                if (TerrainMaterialWrapper.terrainMaterialShared!['_activeEffect']) {\r\n                    TerrainMaterialWrapper.terrainEffectShared = TerrainMaterialWrapper.terrainMaterialShared!['_activeEffect'];\r\n                }\r\n\r\n                if (TerrainMaterialWrapper.terrainEffectShared) {\r\n                    return TerrainMaterialWrapper.terrainEffectShared;\r\n                }\r\n                return null;\r\n            }\r\n\r\n        }\r\n\r\n        // TODO: Check how much this impacts performance, it has a subtle impact on terrain and roads but it's nice to have it.\r\n        // TODO: At least make it optional / linked to quality settings.\r\n        this.material.reflectionTexture = this.sceneViewer.scene.environmentTexture;\r\n        \r\n        // This one is needed to control saturation due to env, should be aligned with PBRMaterials, StandarMaterials and light intensity\r\n        this.material.environmentIntensity = this.sceneViewer.baseEnvironmentIntensity;\r\n\r\n\r\n        this.material.onBindObservable.add((mesh) => {\r\n\r\n            this.bind(mesh);\r\n            //this.material.getEffect().setTexture(\"splatmap\", this.splatMap);\r\n\r\n            const ubo = this.material['_uniformBuffer'];\r\n            ubo.update();\r\n\r\n        });\r\n\r\n    }\r\n\r\n    initSplatMaterial(scene: Scene, splatMap: Texture, atlas: Texture, atlasnormals: Texture, options: any = null): PBRCustomMaterial {\r\n        // TODO: Options should be merged with defaults!\r\n\r\n        var defScale = 100.0;\r\n        if (!options) {\r\n            options = {\r\n                numTilesHorizontal: 4,\r\n                numTilesVertical: 4,\r\n                numSplatTilesHorizontal:2,\r\n                numSplatTilesVertical:2,\r\n                //tileScale:[[20.0,20.0],[20.0,20.0],[20.0,20.0]],\r\n                splatInfos: {  // Positions is X / Y, Y grows upwards\r\n                    layers: [\r\n                        {\"name\": \"Ground\", \"position\": [0, 3], \"scale\": [defScale, defScale], \"displScales\": 1.0 },\r\n                        // ...\r\n                    ],\r\n                    positions:[\r\n                               [0.0, 3.0], [1.0, 3.0], [2.0, 3.0], [3.0, 3.0], // encoded by first splat (top left), first row (index 3 from bottom)\r\n                               [0.0, 2.0], [1.0, 2.0], [2.0, 2.0], [3.0, 2.0], // encoded by splat (top right), second row (index 2 from bottom)\r\n                               [0.0, 1.0], [1.0, 1.0], [2.0, 1.0], [3.0, 1.0], // encoded by third splat (down left), third row (index 1 starting from bottom)\r\n                               [0.0, 0.0], [1.0, 0.0], [2.0, 0.0], [3.0, 0.0], // encoded by splat (down right), last row (index 0 from bottom)\r\n                              ],\r\n                    scales:[[defScale * 0.75, defScale * 0.75], [defScale,defScale], [defScale,defScale], [defScale * 0.5, defScale * 0.5],\r\n                             [defScale * 0.5, defScale * 0.5], [defScale * 0.5, defScale * 0.5], [defScale,defScale], [defScale,defScale],\r\n                             [defScale * 1.0, defScale * 1.0], [defScale * 1.6, defScale * 1.6], [defScale,defScale], [defScale,defScale],  // Grass\r\n                             [defScale,defScale], [defScale * 0.5, defScale * 0.5], [defScale * 0.25, defScale * 0.25], [defScale,defScale]], // Sand, rock, rock orange\r\n                    displScales: [0.0, 0, 0.0, 0,\r\n                                  0, 0, 0, 0,\r\n                                  0, 0, 0, 0,\r\n                                  0.0, 0.0, 0.0, 0.0,],\r\n                    dedupScales: [1.0, 1.0, 1.0, 0.0,\r\n                                  0.0, 0.0, 1.0, 1.0,\r\n                                  1.1, 1.1, 1.1, 1.2,\r\n                                  1.2, 1.2, 0.5, 1.1],\r\n                    roughness: [\r\n                        1.2, 1.3, 2.5, 0.8,\r\n                        0.8, 0.9, 1.0, 1.0,\r\n                        1.85, 1.85, 1.15, 1.25,\r\n                        1.45, 0.8, 1.0, 1.0],\r\n                    metallic: [\r\n                        0.2, 0.1, 0.1, 0.3,\r\n                        0.3, 0.1, 0.0, 0.0,\r\n                        0.0, 0.0, 0.0, 0.0,\r\n                        0.0, 0.4, 0.0, 0.0]\r\n                }\r\n            };\r\n        }\r\n\r\n        this.options = options;\r\n        this.tileIndexes = [];\r\n        this.shaderinjectpoint1 = \"\";\r\n        this.shaderinjectpoint2 = \"\";\r\n        this.shaderinjectpoint3 = \"\";\r\n        this.shaderinjectpoint4 = \"\";\r\n\r\n        // 4x4 = 16\r\n        this.numTilesHorizontal = options.numTilesHorizontal;\r\n        this.numTilesVertical = options.numTilesVertical;\r\n        this.totalTiles = this.numTilesVertical*this.numTilesHorizontal;\r\n        this.tileScale = new Vector2(1.0/this.numTilesHorizontal,1.0/this.numTilesVertical);\r\n\r\n        // 2x2 = 4\r\n        this.numSplatTilesHorizontal = options.numSplatTilesHorizontal;\r\n        this.numSplatTilesVertical = options.numSplatTilesVertical;\r\n        this.totalSplatTiles = this.numSplatTilesVertical * this.numSplatTilesHorizontal;\r\n        this.splatScale = new Vector2(1.0/this.numSplatTilesHorizontal,1.0/this.numSplatTilesVertical);\r\n\r\n        this.shaderinjectpoint1 += \"vec2 splatScale = vec2(\"+this.splatScale.x+\",\"+this.splatScale.y+\");\\r\\n\";\r\n        this.shaderinjectpoint1 += \"vec2 scale = vec2(\"+this.tileScale.x+\",\"+this.tileScale.y+\");\\r\\n\";\r\n\r\n        //this.shaderinjectpoint3 += 'normalW = vec3(0.0, 1.0, 0.0);\\r\\n';\r\n\r\n        this.shaderinjectpoint3 += \"vec4 finalColor1 = baseColor1;\\r\\n\";\r\n        this.shaderinjectpoint3 += \"vec3 finalNormal1 = baseNormal1;\\r\\n\";\r\n        //this.shaderinjectpoint3 += 'finalColor1.a = 0.05;\\r\\n';\r\n\r\n        this.shaderinjectpoint4 += \"vec4 finalColor1 = baseColor1;\\r\\n\";\r\n        this.shaderinjectpoint4 += \"float finalRough1 = baseRough1;\\r\\n\";\r\n        this.shaderinjectpoint4 += \"float finalMetallic1 = baseMetallic1;\\r\\n\";\r\n        //this.shaderinjectpoint4 += 'finalColor1.a = 0.05;\\r\\n';\r\n\r\n        var v = 0.0, h = 0.0;\r\n        for (let i=0; i < this.totalTiles; i++){\r\n\r\n            var tpos = Math.floor(i / 4);\r\n            h = tpos % this.numSplatTilesHorizontal;\r\n            v = (this.numSplatTilesHorizontal - 1) - Math.floor(tpos / this.numSplatTilesHorizontal);\r\n\r\n            if (i < this.totalTiles-1) {\r\n                 this.shaderinjectpoint3 += (`\r\n                     `+ \"//vec4 finalColor\" + (i + 2) + \" = finalColor\" + (i + 1) + \".a >= baseColor\" + (i + 2) + \".a ? finalColor\" + (i + 1) + \" : baseColor\" + (i + 2) + `;\r\n                     `+ \"//vec4 finalColor\" + (i + 2) + \" = finalColor\" + (i + 1) + \" * (1.0 - baseColor\" + (i + 2) + \".a) + baseColor\" + (i + 2) + \" * baseColor\" + (i + 2) + `.a;\r\n                     `+ \"vec4 finalColor\" + (i + 2) + \" = blend(finalColor\" + (i + 1) + \", \" + this.options.splatInfos.displScales[i].toFixed(5) + \", baseColor\" + (i + 2) + \", \" + this.options.splatInfos.displScales[i + 1].toFixed(5) + \"); \" + `\r\n                     //finalColor` + (i + 2) + `.a *= 0.95;\r\n\r\n                     //vec3 finalNormal` + (i + 2) + \" = finalColor\" + (i + 1) + \".a >= baseColor\" + (i + 2) + \".a ? finalNormal\" + (i + 1) + \" : baseNormal\" + (i + 2) + `;\r\n                     vec3 finalNormal` + (i + 2) + \" = blendNormal(finalColor\" + (i + 1) + \", \" + this.options.splatInfos.displScales[i].toFixed(5) + \", baseColor\" + (i + 2) + \", \" + this.options.splatInfos.displScales[i + 1].toFixed(5) + \", finalNormal\" + (i + 1) + \", baseNormal\" + (i + 2) + \"); \" + `\r\n                 `);\r\n\r\n                 this.shaderinjectpoint4 += (`\r\n                     `+ \"vec4 finalColor\" + (i + 2) + \" = blend(finalColor\" + (i + 1) + \", \" + this.options.splatInfos.displScales[i].toFixed(5) + \", baseColor\" + (i + 2) + \", \" + this.options.splatInfos.displScales[i + 1].toFixed(5) + \"); \" + `\r\n                     float finalRough` + (i + 2) + \" = finalColor\" + (i + 1) + \".a >= baseColor\" + (i + 2) + \".a ? finalRough\" + (i + 1) + \" : baseRough\" + (i + 2) + `;\r\n                     float finalMetallic` + (i + 2) + \" = finalColor\" + (i + 1) + \".a >= baseColor\" + (i + 2) + \".a ? finalMetallic\" + (i + 1) + \" : baseMetallic\" + (i + 2) + `;\r\n                 `);\r\n\r\n            }\r\n\r\n            // Get basecolors from tiles\r\n            this.shaderinjectpoint2 += \"vec2 uv\" + (i + 1) + \" = vec2((vAlbedoUV.x + \"+h+\".0) * splatScale.x, (vAlbedoUV.y + \"+v+\".0) * splatScale.y);\\r\\n\";\r\n            this.shaderinjectpoint2 += \"mat4 chanInfo\" + (i + 1) +\" = colInfo(vAlbedoUV, uv\" + (i + 1) + \", \" + this.options.splatInfos.dedupScales[i].toFixed(5) + \", vec2(\"+this.options.splatInfos.scales[i][0]+\",\"+this.options.splatInfos.scales[i][1]+\"), vec2(\"+this.options.splatInfos.positions[i][0] + \",\"+this.options.splatInfos.positions[i][1]+\"), \" + (i % 4) + \", scale, splatmap, albedoSampler, atlasNormalsSampler);\\r\\n\";\r\n            //this.shaderinjectpoint2 += 'vec4 baseColor' + (i + 1) +' = col(vAlbedoUV, uv' + (i + 1) + ', vec2('+this.options.splatInfos.scales[i][0]+','+this.options.splatInfos.scales[i][1]+'), vec2('+this.options.splatInfos.positions[i][0] + ','+this.options.splatInfos.positions[i][1]+'), ' + (i % 4) + ', scale, splatmap, albedoSampler, bumpSampler);\\r\\n';\r\n            this.shaderinjectpoint2 += \"vec4 baseColor\" + (i + 1) +\" = chanInfo\" + (i + 1) + \"[0];\\r\\n\";\r\n            this.shaderinjectpoint2 += \"vec3 baseNormal\" + (i + 1) +\" = vec3(chanInfo\" + (i + 1) + \"[1].x, chanInfo\" + (i + 1) + \"[1].y, chanInfo\" + (i + 1) + \"[1].z);\\r\\n\";\r\n\r\n            this.shaderinjectpoint2 += \"float baseRough\" + (i + 1) +\" = chanInfo\" + (i + 1) + \"[1].a * \" + this.options.splatInfos.roughness[i].toFixed(5) + \";\\r\\n\";\r\n            //this.shaderinjectpoint2 += \"float baseRough\" + (i + 1) +\" = /*chanInfo\" + (i + 1) + \"[1].a * */ \" + this.options.splatInfos.roughness[i].toFixed(5) + \";\\r\\n\";\r\n            //this.shaderinjectpoint2 += \"float baseRough\" + (i + 1) +\" = chanInfo\" + (i + 1) + \"[1].a; /* \" + this.options.splatInfos.roughness[i].toFixed(5) + \"; */\\r\\n\";\r\n\r\n            this.shaderinjectpoint2 += \"float baseMetallic\" + (i + 1) +\" = \" + this.options.splatInfos.metallic[i].toFixed(5) + \";\\r\\n\";\r\n\r\n        }\r\n\r\n        //this.shaderinjectpoint3 += 'finalColor16 = col(vAlbedoUV, uv16, vec2(20.0, 20.0), vec2(1.0, 2.0), 0, scale, splatmap, albedoSampler);';\r\n\r\n        this.shaderinjectpoint3 += `\r\n            mat3 TBN = cotangent_frame(normalW, vPositionW, vAlbedoUV, vec2(-1.0, 1.0));\r\n        `;\r\n\r\n        this.shaderinjectpoint3 += \"normalW = TBN * finalNormal\" + (this.totalTiles) + \";\";  // TODO: adding these vectors is incorrect\r\n        //this.shaderinjectpoint3 += \"normalW = normalize(normalW * 0.75 + 0.25 * finalNormal\" + (this.totalTiles) + \");\";  // TODO: adding these vectors is incorrect\r\n        //this.shaderinjectpoint3 += 'normalW = perturbNormal(cotangentFrame, finalNormal' + (this.totalTiles) + ', 1.0);';\r\n        //this.shaderinjectpoint3 += 'normalW = normalW;';\r\n        //this.shaderinjectpoint3 += 'normalW.y *= -1.0;';\r\n        //this.shaderinjectpoint3 += 'result = finalNormal' + (this.totalTiles) + ';';\r\n        this.shaderinjectpoint3 += \"result = finalColor\" + (this.totalTiles) + \".rgb;\";\r\n\r\n        //this.shaderinjectpoint4 += 'normalW = normalW + finalNormal' + (this.totalTiles) + ';';  // TODO: adding these vectors is incorrect\r\n\r\n        // MetallicRoughness.r is the computed metallicness\r\n        // MetallicRoughness.g is the computed roughness\r\n        this.shaderinjectpoint4 += \"metallicRoughness.g = finalRough\" + (this.totalTiles) + \";\";\r\n        this.shaderinjectpoint4 += \"metallicRoughness.r = finalMetallic\" + (this.totalTiles) + \";\";\r\n        //this.shaderinjectpoint4 += \"metallicRoughness.r = 0.;\";\r\n        //this.shaderinjectpoint4 += \"metallicRoughness.r = 0.;\";\r\n        //this.shaderinjectpoint4 += \"metallicRoughness.g = 0.43;\";\r\n        //this.shaderinjectpoint4 += \"reflectivityOut.microSurface = 0.0;\";\r\n\r\n\r\n        this.splatMap = splatMap;\r\n        //this.needsUpdating = true;\r\n\r\n\r\n        this.material = new PBRCustomMaterial(\"splatMaterial\", scene);\r\n        this.material.metallic = 0.0; // 0.0;\r\n        this.material.roughness = 0.0; // 0.43 (asphalt); // 0.95;\r\n        //this.material.indexOfRefraction = 1.4;\r\n\r\n        //this.material.twoSidedLighting = true;\r\n        //this.material.disableLighting = false;\r\n        //this.material.ambientColor = new Color3(1.0, 1.0, 1.0); // Color3.Black();\r\n        //this.material.disableBumpMap = true;\r\n        //this.material.metallicspecularColor = new Color3(0.15, 0.15, 0.15); // Color3.Black();\r\n        //this.material.specularIntensity = 1.0;\r\n        //this.material.emissiveColor = new Color3(0.0, 0.0, 0.0); // Color3.Black();\r\n        //this.material.emissiveIntensity = 0.0;\r\n        //this.material.usePhysicalLightFalloff= false;\r\n        //this.material.environmentIntensity = 1.0;  // This one is needed to avoid saturation due to env\r\n\r\n\r\n        this.material.albedoTexture = atlas;\r\n        if (atlasnormals !== null) {\r\n            //this.material.bumpTexture = atlasnormals;\r\n            this.atlasBumpTexture = atlasnormals;\r\n        }\r\n        this.material.AddUniform(\"splatmap\",\"sampler2D\", {});\r\n        this.material.AddUniform(\"atlasNormalsSampler\",\"sampler2D\",  {});\r\n\r\n        this.material.Vertex_Before_PositionUpdated(`\r\n            uvUpdated = vec2(positionUpdated.x, -positionUpdated.z);\r\n        `);\r\n\r\n        this.material.Vertex_MainEnd(`\r\n            //uvUpdated = uvUpdated + 0.5;\r\n        `);\r\n\r\n        this.material.Fragment_Definitions(`\r\n        //#define REFLECTION\r\n        #define TANGENT\r\n        //#define METALLICWORKFLOW\r\n        `);\r\n\r\n        this.material.Fragment_Begin(\r\n             \"precision highp float;\\r\\n\"\r\n            +\"precision highp int;\\r\\n\"\r\n\r\n            +this.shaderinjectpoint1\r\n\r\n            +`\r\n\r\n            // From: https://github.com/BabylonJS/Babylon.js/blob/master/src/Shaders/ShadersInclude/bumpFragmentMainFunctions.fx\r\n\r\n            vec3 perturbNormalBase(mat3 cotangentFrame, vec3 normal, float scale)\r\n            {\r\n                #ifdef NORMALXYSCALE\r\n                    normal = normalize(normal * vec3(scale, scale, 1.0));\r\n                #endif\r\n\r\n                return normalize(cotangentFrame * normal);\r\n            }\r\n\r\n            vec3 perturbNormal(mat3 cotangentFrame, vec3 textureSample, float scale)\r\n            {\r\n                return perturbNormalBase(cotangentFrame, textureSample * 2.0 - 1.0, scale);\r\n            }\r\n\r\n            mat3 cotangent_frame(vec3 normal, vec3 p, vec2 uv, vec2 tangentSpaceParams)\r\n            {\r\n                // get edge vectors of the pixel triangle\r\n                vec3 dp1 = dFdx(p);\r\n                vec3 dp2 = dFdy(p);\r\n                vec2 duv1 = dFdx(uv);\r\n                vec2 duv2 = dFdy(uv);\r\n\r\n                // solve the linear system\r\n                vec3 dp2perp = cross(dp2, normal);\r\n                vec3 dp1perp = cross(normal, dp1);\r\n                vec3 tangent = dp2perp * duv1.x + dp1perp * duv2.x;\r\n                vec3 bitangent = dp2perp * duv1.y + dp1perp * duv2.y;\r\n\r\n                // invert the tangent/bitangent if requested\r\n                tangent *= tangentSpaceParams.x;\r\n                bitangent *= tangentSpaceParams.y;\r\n\r\n                // construct a scale-invariant frame\r\n                float invmax = inversesqrt(max(dot(tangent, tangent), dot(bitangent, bitangent)));\r\n                return mat3(tangent * invmax, bitangent * invmax, normal);\r\n            }\r\n\r\n            // Functions\r\n\r\n            float heightval(vec4 col) {\r\n                //return ((col.r + col.g + col.b) / 3.0);\r\n                return col.a;\r\n            }\r\n\r\n            /*\r\n            vec4 blend(vec4 texture1, float displScale1, vec4 texture2, float displScale2) {\r\n                return ((texture1.a * displScale1) > (texture2.a * displScale2) ? texture1 : texture2);\r\n            }\r\n            */\r\n\r\n            vec4 blend(vec4 texture1, float displScale1, vec4 texture2, float displScale2) {\r\n                if (texture2.a == 0.) return texture1;\r\n                if (texture1.a == 0.) return texture2;\r\n                float a1 = texture1.a + displScale1;\r\n                float a2 = texture2.a + displScale2;\r\n                float depth = 0.2;\r\n                float ma = max(texture1.a + a1, texture2.a + a2) - depth;\r\n\r\n                float b1 = max(texture1.a + a1 - ma, 0.0);\r\n                float b2 = max(texture2.a + a2 - ma, 0.0);\r\n\r\n                vec4 result = (texture1 * b1 + texture2 * b2) / (b1 + b2);\r\n                result.a = (texture1.a > 0. && texture2.a > 0.) ? (a1 + a2) / (2.0 * (b1 + b2)) : result.a;\r\n                return result;\r\n            }\r\n\r\n            vec3 blendNormal(vec4 texture1, float displScale1, vec4 texture2, float displScale2, vec3 normal1,  vec3 normal2) {\r\n                float a1 = texture1.a + displScale1;\r\n                float a2 = texture2.a + displScale2;\r\n                float depth = 0.2;\r\n                float ma = max(texture1.a + a1, texture2.a + a2) - depth;\r\n\r\n                float b1 = max(texture1.a + a1 - ma, 0.0);\r\n                float b2 = max(texture2.a + a2 - ma, 0.0);\r\n\r\n                vec3 result = (normal1 * b1 + normal2 * b2) / (b1 + b2);\r\n                result = normalize(result);\r\n\r\n                return result;\r\n            }\r\n\r\n\r\n            vec2 hash22(vec2 p)\r\n            {\r\n                p = p * mat2(127.1, 311.7, 269.5, 183.3);\r\n                p = -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\r\n                return sin(p * 6.283);  // + timeScale\r\n            }\r\n\r\n            float interpolationNoise(vec2 p)\r\n            {\r\n                vec2 pi = floor(p);\r\n                vec2 pf = p-pi;\r\n\r\n                vec2 w = pf * pf * (3.-2. * pf);\r\n\r\n                float f00 = dot(hash22(pi + vec2(.0,.0)), pf-vec2(.0,.0));\r\n                float f01 = dot(hash22(pi + vec2(.0,1.)), pf-vec2(.0,1.));\r\n                float f10 = dot(hash22(pi + vec2(1.0,0.)), pf-vec2(1.0,0.));\r\n                float f11 = dot(hash22(pi + vec2(1.0,1.)), pf-vec2(1.0,1.));\r\n\r\n                float xm1 = mix(f00,f10,w.x);\r\n                float xm2 = mix(f01,f11,w.x);\r\n\r\n                float ym = mix(xm1,xm2,w.y);\r\n                return ym;\r\n\r\n            }\r\n\r\n            float perlinNoise2D(float x,float y)\r\n            {\r\n                int OCTAVES = 3;\r\n                float persistence = 0.5;\r\n                float sum = 0.0;\r\n                float frequency = 0.0;\r\n                float amplitude = 0.0;\r\n                for(int i = 0; i < OCTAVES; i++)\r\n                {\r\n                    frequency = pow(2.0, float(i));\r\n                    amplitude = pow(persistence, float(i));\r\n                    sum = sum + interpolationNoise(vec2(x * frequency, y * frequency)) * amplitude;\r\n                }\r\n\r\n                return sum;\r\n            }\r\n            `\r\n\r\n            //+\"vec4 col(vec2 vAlbedoUV, vec2 uvT, vec2 tile1Scale, vec2 tile1Position, int chanIdx, vec2 scale, sampler2D splatmap, sampler2D atlas, sampler2D atlasNormals) {\"\r\n            +\"mat4 colInfo(vec2 vAlbedoUV, vec2 uvT, float dedupScale, vec2 tile1Scale, vec2 tile1Position, int chanIdx, vec2 scale, sampler2D splatmap, sampler2D atlas, sampler2D atlasNormals) {\"\r\n\r\n                + `\r\n                float offsetInputScale = 2.0;\r\n                float offsetBaseScale = 0.25;\r\n                vec2 offset = vec2(perlinNoise2D(offsetInputScale * (uvT.x + 0.01 * tile1Position.x), offsetInputScale * (uvT.y + 0.1 * tile1Position.y)),\r\n                                   perlinNoise2D(offsetInputScale * (uvT.x + 0.07 * tile1Position.y), offsetInputScale * (-uvT.y + 0.13 * tile1Position.x)));\r\n                offset = offset * offsetBaseScale * dedupScale;\r\n                `\r\n\r\n                // if this.dedupDouble...\r\n                /*\r\n                + `\r\n                vec2 offset2 = vec2(perlinNoise2D(uvT.y - 0.08 * tile1Position.x, uvT.x + 0.04 * tile1Position.y),\r\n                                    perlinNoise2D(uvT.y + 0.05 * tile1Position.y, -uvT.x + 0.19 * tile1Position.x));\r\n                offset2 = offset * offsetBaseScale * dedupScale;\r\n                `\r\n                */\r\n\r\n                +\"vec2 scaledUv1 = fract((vAlbedoUV + offset) * tile1Scale);\"  // Curvy antitiling factor\r\n                +\"scaledUv1 = scaledUv1 * (254.0/256.0) + vec2(1.0 / 256.0, 1.0 / 256.0);\"\r\n                +\"vec2 uv1 = vec2((scaledUv1.x + tile1Position.x) * scale.x, (scaledUv1.y + tile1Position.y) * scale.y);\"\r\n\r\n                /*\r\n                +'vec2 scaledUv2 = fract((vAlbedoUV + offset2) * tile1Scale).yx;'  // Curvy antitiling factor\r\n                +'scaledUv2 = scaledUv2 * (254.0/256.0) + vec2(1.0 / 256.0, 1.0 / 256.0);'\r\n                +'vec2 uv2 = vec2((scaledUv2.x + tile1Position.x) * scale.x, (scaledUv2.y + tile1Position.y) * scale.y);'\r\n                */\r\n\r\n                + `\r\n                vec4 splatColor1 = texture2D(splatmap, uvT);\r\n                `\r\n\r\n                + `\r\n                float dedupMix = perlinNoise2D(100.0 * uvT.x, 100.0 * uvT.y);\r\n                dedupMix = dedupScale > 0.0 ? smoothstep(-0.02, 0.02, dedupMix) : 0.0;\r\n\r\n                //vec4 diffuse1Color = texture2DLodEXT(atlas, uv1, -1.0);\r\n                vec4 diffuseColorA = texture2D(atlas, uv1);\r\n\r\n                //vec4 diffuseColorB = texture2D(atlas, uv2);\r\n\r\n                //vec4 diffuse1Color = vec4(dedupMix, 0.0, 0.0, 1.0);  // Debug dedup mix factor\r\n                //vec4 diffuse1Color = diffuseColorA * dedupMix + diffuseColorB * (1.0 - dedupMix);\r\n                vec4 diffuse1Color = diffuseColorA;\r\n\r\n                vec4 diffuseNormalA = texture2D(atlasNormals, uv1);\r\n                diffuseNormalA.rgb = (diffuseNormalA.rgb * 2.0 - 1.0);\r\n                //vec4 diffuseNormalB = texture2D(atlasNormals, uv2);\r\n                //diffuseNormalB.rgb = (diffuseNormalB.rgb * 2.0 - 1.0);\r\n\r\n                /*\r\n                vec3 diffuse1NormalVec = normalize(diffuseNormalA.xyz * dedupMix + diffuseNormalB.xyz * (1.0 - dedupMix));\r\n                float diffuse1NormalAlpha = diffuseNormalA.a * dedupMix + diffuseNormalB.a * (1.0 - dedupMix);\r\n                vec4 diffuse1Normal = vec4(diffuse1NormalVec.x, diffuse1NormalVec.y, diffuse1NormalVec.z, diffuse1NormalAlpha);\r\n                */\r\n\r\n                vec4 diffuse1Normal = diffuseNormalA;\r\n                `\r\n\r\n                + (`\r\n                float blend = (chanIdx == 0 ? splatColor1.r : (chanIdx == 1 ? splatColor1.g : (chanIdx == 2 ? splatColor1.b : splatColor1.a)));\r\n                //blend = 1.0;\r\n\r\n                //diffuse1Color.rgb = splatColor1.rgb;\r\n                //diffuse1Color.a = blend;\r\n\r\n                 //diffuse1Color.a = ((blend > 0.0) ? (heightval(diffuse1Color) * blend) : 0.0);\r\n                 diffuse1Color.a = ((blend > 0.0) ? (diffuse1Color.a * blend) : 0.0);\r\n\r\n                 mat4 chanInfo = mat4(diffuse1Color, vec4(diffuse1Normal.x, diffuse1Normal.y, diffuse1Normal.z, diffuse1Normal.a), vec4(0.0), vec4(0.0));\r\n\r\n                `)\r\n\r\n                //+\"return diffuse1Color;\"\r\n                +\"return chanInfo;\"\r\n            +\"} \"\r\n        );\r\n\r\n        this.material.Fragment_MainBegin(\r\n            this.shaderinjectpoint2\r\n        );\r\n\r\n        this.material.Fragment_Custom_Albedo(\r\n            this.shaderinjectpoint3\r\n        );\r\n\r\n        this.material.Fragment_Custom_MetallicRoughness(\r\n            this.shaderinjectpoint4\r\n        );\r\n\r\n        return this.material;\r\n    }\r\n\r\n    bind(mesh: AbstractMesh): void {\r\n        //console.debug(\"Binding mesh for TerrainMaterial.\");\r\n        if (!this.material.getEffect()) return;\r\n        this.material.getEffect().setTexture( \"splatmap\", this.splatMap );\r\n        this.material.getEffect().setTexture( \"atlasNormalsSampler\", this.atlasBumpTexture );\r\n\r\n        /*\r\n\r\n        //this.material.freeze();\r\n\r\n        //this.material.reflectionTexture = this.envReflectionProbe.cubeTexture;\r\n        //this.sceneViewer.scene.environmentTexture = this.sceneViewer.envReflectionProbe.cubeTexture;\r\n        //this.sceneViewer.scene.environmentTexture = this.sceneViewer.envReflectionProbe!.cubeTexture;\r\n\r\n        //this.material.detailMap.texture = this.sceneViewer.textureDetailSurfaceImp;\r\n        this.material.useHorizonOcclusion = true;\r\n        if (this.sceneViewer.envReflectionProbe) {\r\n            const reflectionTexture = this.sceneViewer.envReflectionProbe.cubeTexture;\r\n            //this.material.reflectionTexture = reflectionTexture;\r\n            //this.material.getEffect().setTexture( \"reflectionSampler\", reflectionTexture);\r\n            this.material.getEffect().setTexture(\"reflectionSampler\", reflectionTexture._lodTextureMid || reflectionTexture);\r\n            this.material.getEffect().setTexture(\"reflectionSamplerLow\", reflectionTexture._lodTextureLow || reflectionTexture);\r\n            this.material.getEffect().setTexture(\"reflectionSamplerHigh\", reflectionTexture._lodTextureHigh || reflectionTexture);\r\n            //this.material.getEffect().setTexture(\"environmentBrdfSampler\", TerrainMaterialWrapper.terrainMaterialShared!._environmentBRDFTexture);\r\n        }\r\n        */\r\n\r\n        /*\r\n        const ubo = this.material['_uniformBuffer'];\r\n        ubo.update();\r\n        console.debug(\"Done\");\r\n        */\r\n    }\r\n\r\n}\r\n\r\nexport { TerrainMaterialWrapper };\r\n","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { PBRCustomMaterial } from \"@babylonjs/materials\";\r\nimport { BaseTexture, Color3, Scene, Texture, Vector2 } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\n\r\n/**\r\n */\r\nclass TextMaterialWrapper {\r\n\r\n    sceneViewer: SceneViewer;\r\n    material: PBRCustomMaterial;\r\n\r\n    options: any;\r\n\r\n    constructor(sceneViewer: SceneViewer, atlasTexture: BaseTexture, atlasNormalTexture: BaseTexture | null, options: any = null) {\r\n        this.sceneViewer = sceneViewer;\r\n        this.options = options;\r\n        this.material = this.initMaterial( <Scene> this.sceneViewer.scene, atlasTexture, atlasNormalTexture);\r\n    }\r\n\r\n    initMaterial(scene: Scene, atlas: BaseTexture, atlasnormals: BaseTexture | null): PBRCustomMaterial {\r\n\r\n        this.material = new PBRCustomMaterial(\"TextMaterial\", scene);\r\n        this.material.metallic = 0.05; // 0.0;\r\n        this.material.roughness = 0.975; // 0.43 (asphalt); // 0.95;\r\n        //this.material.indexOfRefraction = 1.4;\r\n\r\n        //this.material.twoSidedLighting = true;\r\n        //this.material.disableLighting = false;\r\n        //this.material.ambientColor = new Color3(1.0, 1.0, 1.0); // Color3.Black();\r\n        //this.material.disableBumpMap = true;\r\n        //this.material.metallicspecularColor = new Color3(0.15, 0.15, 0.15); // Color3.Black();\r\n        //this.material.specularIntensity = 1.0;\r\n        //this.material.emissiveColor = new Color3(0.0, 0.0, 0.0); // Color3.Black();\r\n        //this.material.emissiveIntensity = 0.0;\r\n        //this.material.usePhysicalLightFalloff= false;\r\n        //this.material.environmentIntensity = sceneViewer.baseEnvironmentIntensity;  // This one is needed to avoid saturation due to env\r\n\r\n        this.material.albedoTexture = atlas;\r\n        if (atlasnormals !== null) {\r\n            //this.material.bumpTexture = atlasnormals;\r\n            this.material.bumpTexture = atlasnormals;\r\n        }\r\n\r\n        this.material.Fragment_Custom_Albedo(`\r\n            vec3 txtColor = result;\r\n            if (txtColor.r < 0.02) {\r\n                discard;\r\n            }\r\n            //vec3 col = vec3(1.0, 0.8, 0.8);\r\n            //vec3 col = vec3(1.0, 1.0, 1.0) * tmp;\r\n            //col = vec3(col.r * result.r, col.g * result.g, col.b * result.b);\r\n            vec3 col = vec3(0.0, 0.0, 0.0);\r\n            surfaceAlbedo = col;\r\n        `);\r\n\r\n        /*\r\n        this.material.onBindObservable.add(() => {\r\n            this.update();\r\n        });\r\n        */\r\n\r\n        return this.material;\r\n    }\r\n\r\n    update(): void {\r\n        //this.material.getEffect().setTexture( \"splatmap\", this.splatMap );\r\n        //this.material.getEffect().setTexture( \"atlasNormalsSampler\", this.atlasBumpTexture );\r\n\r\n        //this.material.reflectionTexture = this.envReflectionProbe.cubeTexture;\r\n        //this.material.reflectionTexture = this.scene.environmentTexture;\r\n        //this.sceneViewer.scene.environmentTexture = this.sceneViewer.envReflectionProbe.cubeTexture;\r\n        //this.scene.environmentTexture = this.envReflectionProbe.cubeTexture;\r\n    }\r\n\r\n}\r\n\r\nexport { TextMaterialWrapper };\r\n","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\n\r\n/**\r\n * ScenePosition represents\r\n */\r\nclass ScenePosition {\r\n\r\n    // Position is Lat, Lon, Altitude (currently MSL)\r\n    positionWGS84: number[] = [ 0, 0, 0 ];\r\n\r\n    positionTileZoomLevel: number = 0;\r\n\r\n    // Ground altitude\r\n    positionGroundHeight: number = 0;\r\n\r\n    positionHeading: number = 0;\r\n\r\n    positionTilt: number = 0;\r\n\r\n}\r\n\r\nexport { ScenePosition };","/* \r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { SceneViewer } from \"../SceneViewer\";\r\n\r\n/**\r\n * A process that can be running in a DDDViewer instance.\r\n * Processes are updated every frame before drawing the scene.\r\n */\r\nabstract class ViewerProcess {\r\n\r\n    sceneViewer: SceneViewer;\r\n    finished: boolean = false;\r\n    time: number = 0;\r\n\r\n    constructor( sceneViewer: SceneViewer ) {\r\n        this.sceneViewer = sceneViewer;\r\n        this.finished = false;\r\n    }\r\n    \r\n    update( deltaTime: number ): void {\r\n        // TODO: Consider providing an (optional) initialize() lifecycle method for processes (to be run before the first frame)\r\n        //if (this.time == 0) initialize();\r\n        this.time += deltaTime;\r\n    }\r\n\r\n}\r\n\r\nexport { ViewerProcess }; \r\n\r\n\r\n\r\n","/* \r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { EasingFunction, QuadraticEase } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"../../SceneViewer\";\r\nimport { ViewerProcess } from \"../ViewerProcess\";\r\n\r\nabstract class AnimationProcess extends ViewerProcess {\r\n\r\n    sceneViewer: SceneViewer;\r\n\r\n    animTime: number;\r\n    time: number;\r\n    interpFactor: number;\r\n\r\n    easing: EasingFunction;\r\n\r\n    /**\r\n     * \r\n     * @param sceneViewer \r\n     * @param animTime if set to null, the Process must manually mark itself as finished\r\n     */\r\n    constructor(sceneViewer: SceneViewer, animTime: number | null = null) {\r\n        \r\n        super(sceneViewer);\r\n        \r\n        this.sceneViewer = sceneViewer;\r\n\r\n        this.time = 0.0;\r\n        this.interpFactor = 0.0;  // Stored as a class property for convenience of derived classes\r\n\r\n        this.animTime = animTime || 0;\r\n\r\n        this.easing = new QuadraticEase();\r\n        this.easing.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\r\n    }\r\n\r\n    update( deltaTime: number): void {\r\n        \r\n        // Avoid calling parent just to update deltaTime, do it here for performance\r\n        this.time += deltaTime;\r\n\r\n        this.interpFactor = ( this.animTime > 0 ) ? (( this.time ) / ( this.animTime)) : 1.0;\r\n        if (this.interpFactor > 1.0) this.interpFactor = 1.0;\r\n        \r\n        // Ease interpolation\r\n        this.interpFactor = this.easing.ease(this.interpFactor);\r\n\r\n        if (this.animTime != null && this.time >= this.animTime) {\r\n            this.finished = true;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport { AnimationProcess };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\n\r\nimport { Scalar, TargetCamera, Vector3 } from \"@babylonjs/core\";\r\nimport { ScenePosition } from \"../../core/ScenePosition\";\r\nimport { SceneViewer } from \"../../SceneViewer\";\r\nimport { AnimationProcess } from \"./AnimationProcess\";\r\n\r\nclass CameraMovementAnimationProcess extends AnimationProcess {\r\n\r\n    moveStart: ScenePosition;\r\n    moveEnd: ScenePosition;\r\n\r\n    // Move camera adding a vertical arc which height is a factor of movement distance\r\n    moveArcHeightFactor: number = 0.0; // 0.05;\r\n\r\n    _mslHeightStart: number | null = null;\r\n    _mslHeightEnd: number | null = null;\r\n\r\n    constructor( sceneViewer: SceneViewer, moveStart: ScenePosition, moveEnd: ScenePosition, animTime: number ) {\r\n\r\n        super(sceneViewer, animTime);\r\n\r\n        this.moveStart = moveStart;\r\n        this.moveEnd = moveEnd;\r\n    }\r\n\r\n    calculateMslHeights() {\r\n        if (!this._mslHeightStart) {\r\n            let startPositionScene = this.sceneViewer.wgs84ToScene(this.moveStart.positionWGS84);\r\n            let startPositionSceneVec = new Vector3(startPositionScene[0], startPositionScene[1], startPositionScene[2]);\r\n            let [terrainElevation, terrainMesh] = this.sceneViewer.elevationMSLFromSceneCoords(startPositionSceneVec);\r\n            if (terrainElevation !== null) this._mslHeightStart = terrainElevation + this.moveStart.positionGroundHeight;\r\n        }\r\n        if (!this._mslHeightEnd) {\r\n            let endPositionScene = this.sceneViewer.wgs84ToScene(this.moveEnd.positionWGS84);\r\n            let endPositionSceneVec = new Vector3(endPositionScene[0], endPositionScene[1], endPositionScene[2]);\r\n            let [terrainElevation, terrainMesh] = this.sceneViewer.elevationMSLFromSceneCoords(endPositionSceneVec);\r\n            if (terrainElevation !== null) this._mslHeightEnd = terrainElevation + this.moveEnd.positionGroundHeight;\r\n        }\r\n\r\n    }\r\n\r\n    update( deltaTime: number ): void {\r\n\r\n        super.update(deltaTime);\r\n\r\n        // Update camera interpolating between start and end\r\n        const move_start = this.moveStart;\r\n        const move_end = this.moveEnd;\r\n\r\n        const sceneViewer = this.sceneViewer;\r\n\r\n        sceneViewer.viewerState.positionWGS84 = [\r\n            Scalar.Lerp(move_start.positionWGS84[0], move_end.positionWGS84[0], this.interpFactor),\r\n            Scalar.Lerp(move_start.positionWGS84[1], move_end.positionWGS84[1], this.interpFactor) ];\r\n\r\n        this.calculateMslHeights();\r\n\r\n        let heightStart = this._mslHeightStart !== null ? this._mslHeightStart : move_start.positionGroundHeight;\r\n        let heightEnd = this._mslHeightEnd !== null ? this._mslHeightEnd : (move_end.positionGroundHeight + (this._mslHeightStart !== null ? this._mslHeightStart - move_start.positionGroundHeight : 0));\r\n\r\n        // Add arc height offset if set\r\n        let moveDistance = [(move_end.positionWGS84[0] - move_start.positionWGS84[0]) * 111000 ,\r\n                            (move_end.positionWGS84[1] - move_start.positionWGS84[1]) * 111000 ];\r\n        let moveDistanceMag = Math.sqrt(moveDistance[0] ** 2 + moveDistance[1] ** 2);\r\n        let moveArcHeight = moveDistanceMag * this.moveArcHeightFactor;\r\n        let moveArcOffset = Math.sin(this.interpFactor * Math.PI) * moveArcHeight;\r\n\r\n        const mslHeight = Scalar.Lerp(heightStart, heightEnd, this.interpFactor) + moveArcOffset;\r\n\r\n\r\n        sceneViewer.viewerState.positionGroundHeight = mslHeight - sceneViewer.viewerState.positionTerrainElevation;\r\n        sceneViewer.viewerState.positionTilt = Scalar.Lerp(move_start.positionTilt, move_end.positionTilt, this.interpFactor);\r\n\r\n        let startHeading = move_start.positionHeading;\r\n        const targetHeading = move_end.positionHeading;\r\n        if ( Math.abs( move_end.positionHeading - move_start.positionHeading ) > 180.0 ) {\r\n            if ( move_end.positionHeading - move_start.positionHeading > 0 ) {\r\n                startHeading += 360;\r\n            } else{\r\n                startHeading -= 360;\r\n            }\r\n        }\r\n        const newPositionHeading = Scalar.LerpAngle( startHeading, targetHeading, this.interpFactor );\r\n        sceneViewer.viewerState.positionHeading = (( newPositionHeading % 360 ) + 360 ) % 360;\r\n        //sceneViewer.viewerState.positionHeading = 180 / Math.PI * Scalar.LerpAngle(move_start.positionHeading * Math.PI / 180.0, move_end.positionHeading * Math.PI / 180.0, interp_factor);\r\n\r\n        const positionScene = sceneViewer.wgs84ToScene( sceneViewer.viewerState.positionWGS84 );\r\n        const position = new Vector3( positionScene[0], mslHeight, positionScene[2]);\r\n        const rotation = new Vector3(( 90.0 - sceneViewer.viewerState.positionTilt ) * ( Math.PI / 180.0 ), sceneViewer.viewerState.positionHeading * ( Math.PI / 180.0 ), 0.0 );\r\n\r\n        sceneViewer.camera!.position = position;\r\n        if (sceneViewer.camera instanceof TargetCamera) {\r\n            (<TargetCamera> sceneViewer.camera!).rotation = rotation;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { CameraMovementAnimationProcess };\r\n","/* \r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\n\r\nimport { SceneViewer } from \"../../SceneViewer\";\r\nimport { AnimationProcess } from \"./AnimationProcess\";\r\n\r\nclass DateTimeAnimationProcess extends AnimationProcess {\r\n\r\n    dtStart: Date;\r\n    dtEnd: Date;\r\n\r\n    constructor( sceneViewer: SceneViewer, dtStart: Date, dtEnd: Date, animTime: number ) {\r\n        \r\n        super(sceneViewer, animTime);\r\n\r\n        this.dtStart = dtStart;\r\n        this.dtEnd = dtEnd;\r\n        \r\n        //console.debug(\"Datetime anim from \" + dtStart + \" to \" + dtEnd);\r\n        console.debug(\"TODO: Restore missing call sceneViewer.lightSetupFromDatePos();\"); \r\n    }\r\n\r\n    update( deltaTime: number ): void {\r\n\r\n        super.update(deltaTime);\r\n        \r\n        const interpTime = ( this.dtEnd.getTime() / 1000 - this.dtStart.getTime() / 1000 ) * this.interpFactor;\r\n        this.sceneViewer.viewerState.positionDate = new Date( this.dtStart.getTime() + interpTime * 1000 );\r\n        \r\n        //console.debug(\"Datetime set by animation to: \" + this.sceneViewer.viewerState.positionDate);\r\n\r\n        this.sceneViewer.lightSetupFromDatePos();\r\n    }\r\n\r\n}\r\n\r\nexport { DateTimeAnimationProcess };\r\n","/* \r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\n\r\nimport { SceneViewer } from \"../../SceneViewer\";\r\nimport { AnimationProcess } from \"./AnimationProcess\";\r\n\r\n/**\r\n * \r\n */\r\nclass TextAnimationProcess extends AnimationProcess {\r\n\r\n    text: string;\r\n\r\n    /**\r\n     * \r\n     * @param text Text to animate.\r\n     * @param animTime Animation duration in seconds.\r\n     */\r\n    constructor( sceneViewer: SceneViewer, text: string, animTime: number ) {\r\n        super( sceneViewer, animTime );\r\n        this.text = text;\r\n    }\r\n\r\n    update( deltaTime: number ): void {\r\n        \r\n        super.update( deltaTime );\r\n\r\n        const interpChars = Math.ceil(( this.text.length ) * this.interpFactor );\r\n        const interpText = this.text.substr( 0, interpChars );\r\n        \r\n        this.sceneViewer.viewerState.sceneTitleText = interpText;\r\n\r\n        if ( this.finished ) {\r\n            this.sceneViewer.viewerState.sceneTitleText = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport { TextAnimationProcess };\r\n","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\n\r\nimport { CameraMovementAnimationProcess } from \"../anim/CameraMoveAnimationProcess\";\r\nimport { DateTimeAnimationProcess } from \"../anim/DateTimeAnimationProcess\";\r\nimport { TextAnimationProcess } from \"../anim/TextAnimationProcess\";\r\n\r\nimport { SceneViewer } from \"../../SceneViewer\";\r\n// import ScenePosition from \"../ScenePosition\";\r\n/* eslint-disable no-console,  */\r\n\r\ntype Step = (string | number)[];\r\ntype Sequence = Step[];\r\n\r\n// TODO: this should be a ViewerProcess\r\nclass ViewerSequencer {\r\n\r\n    sceneViewer: SceneViewer;\r\n    seq: Sequence | null;\r\n    time: number;\r\n    index: number;\r\n    playing: boolean;\r\n\r\n    waitTime: number;\r\n\r\n    constructor( sceneViewer: SceneViewer ) {\r\n\r\n        this.sceneViewer = sceneViewer;\r\n\r\n        this.seq = null;\r\n        this.playing = false;\r\n        this.time = 0.0;\r\n        this.index = 0;\r\n        this.waitTime = 0.0;\r\n    }\r\n\r\n    update( deltaTime: number ): void {\r\n\r\n        if ( !( this.playing )) { return; }\r\n\r\n        this.time += deltaTime;\r\n\r\n        if ( this.waitTime > 0.0 ) {\r\n            this.waitTime -= deltaTime;\r\n            return;\r\n        }\r\n\r\n        // Run all possible steps\r\n        while ( this.index < this.seq!.length && this.waitTime <= 0.0 ) {\r\n            const step = this.seq![this.index];\r\n            this.index++;\r\n            this.runStep( step );\r\n        }\r\n\r\n    }\r\n\r\n    runStep( step: Step ): void {\r\n\r\n        console.debug( \"Running step: \", step );\r\n\r\n        const command: string | number = step[0];\r\n        //if ( ! ((command instanceof String )) throw new Error( \"No command specified.\" );\r\n\r\n        if ( command === \"m\" ) {\r\n            const posString: string | null = this.sceneViewer.positionString(8);\r\n\r\n            if ( posString ) {\r\n                const move_start = this.sceneViewer.parsePositionString( posString );\r\n                const move_end = this.sceneViewer.parsePositionString( <string> step[1] );\r\n                const animTime = <number> step[2];\r\n                const moveAnimationProcess = new CameraMovementAnimationProcess( this.sceneViewer, move_start, move_end, animTime );\r\n                console.debug(move_start, move_end, animTime);\r\n                this.sceneViewer.processes.add( moveAnimationProcess );\r\n            }\r\n\r\n        } else if ( command === \"dt\" ) {\r\n            const dtStart = this.sceneViewer.viewerState.positionDate;\r\n            console.debug( dtStart );\r\n            const dtEnd = new Date( dtStart );\r\n            console.debug( dtEnd );\r\n            dtEnd.setHours( parseInt( (<string> step[1]).split( \":\" )[0]));\r\n            dtEnd.setMinutes( parseInt( (<string> step[1]).split( \":\" )[1]));\r\n            console.debug( dtEnd );\r\n            const animTime = <number> step[2];\r\n            const process = new DateTimeAnimationProcess( this.sceneViewer, dtStart, dtEnd, animTime );\r\n            this.sceneViewer.processes.add( process );\r\n\r\n        } else if ( command === \"t\" ) {\r\n            const text = <string> step[1];\r\n            const animTime = <number> step[2];\r\n            const process = new TextAnimationProcess( this.sceneViewer, text, animTime );\r\n            this.sceneViewer.processes.add( process );\r\n\r\n        } else if ( command === \"s\" ) {\r\n            this.waitTime = <number> step[1];\r\n\r\n\r\n            /*} else if ( command === \"u\" ) {\r\n            const url = step[1];\r\n            // Do not change URL if in settings\r\n            if ( this.sceneViewer.app.$route.name !== \"sceneTools\" ) {\r\n                this.sceneViewer.app.$router.push( url );\r\n            }*/\r\n\r\n\r\n\r\n        } else if ( command === \"goto\" ) {\r\n            this.index = <number> step[1];\r\n\r\n        } else if ( (<string>command).startsWith( \"#\" )) {\r\n            // Command is a comment. Ignore.\r\n        } else {\r\n            // Unknown step type\r\n            console.debug( \"Invalid sequence step: \", step );\r\n        }\r\n    }\r\n\r\n    play( seq: Sequence ): void {\r\n        console.debug( \"Playing sequence: \", seq );\r\n\r\n        this.sceneViewer.camera!.detachControl();\r\n        this.sceneViewer.viewerState.sceneViewModeShow = false;\r\n        this.seq = seq;\r\n        this.playing = true;\r\n        this.time = 0.0;\r\n        this.index = 0;\r\n    }\r\n}\r\n\r\nexport { ViewerSequencer };\r\n","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { DDDViewerConfig } from \"./DDDViewerConfig\";\r\n\r\n/**\r\n * Holds DDDViewer global state like viewer position, date/time, configuration...\r\n * Some internal values are also stored here for convenience (FPS, drawcalls, mobile detection...).\r\n * This object must be JSON-serializable.\r\n */\r\nclass ViewerState {\r\n\r\n    mapVisible = true;\r\n    sceneVisible = false;\r\n    dddConfig: DDDViewerConfig;\r\n    isMobile = false;\r\n    positionTileZoomLevel = 11;\r\n    positionWGS84 = [ -8.726, 42.233 ]; // [0.0, 0.0];\r\n\r\n    // Position in scene, in engine coordinates (elevation is Y)\r\n    positionScene = [ 0, 0, 0 ];\r\n    positionGroundHeight: number = 150.0;\r\n    positionTerrainElevation = 0;\r\n    positionHeading = 0.0;\r\n    positionTilt = 0.0;\r\n    positionName: string | null = null;\r\n    positionDate: Date = new Date();\r\n    positionDateSeconds: number = this.positionDate.getTime() / 1000;\r\n    geolocationEnabled = false;\r\n    timeScale = 24 * 2;  // 24 * 2 = 48x faster (1 day = 30 min)\r\n\r\n    // TODO: These nodes are instrumented: remove selectedMesh from here and use ids.\r\n    // TODO: Try removing this and this.sceneViewer id still used\r\n    sceneSelectedMesh = null;\r\n    sceneSelectedMeshId: string | null = null;\r\n\r\n    sceneFPS: number = 0;\r\n    sceneDrawCalls: number = 0;\r\n    sceneTriangles: number = 0;\r\n\r\n    sceneShadowsEnabled = false;\r\n    sceneTextsEnabled = false;\r\n    scenePostprocessingEnabled = false;\r\n    scenePickingEnabled = true;\r\n    sceneViewModeShow = true;\r\n    sceneSelectedShowNormals = true;\r\n    sceneTileDrawDistance = 1;\r\n    sceneMoveSpeed = 5;\r\n    sceneEnvironmentProbe = 16; // 16; // null to use a static environment (should be associated to the skybox, but it's currently fixed)\r\n    sceneSkybox = \"/textures/TropicalSunnyDay\";  // /textures/skybox/clouds1/clouds1 // \"@dynamic\"; // \"\"/textures/TropicalSunnyDay\";\r\n\r\n    // TODO: This shall be a per-layer setting\r\n    sceneGroundTextureOverrideUrl: string | null = null;\r\n\r\n    sceneTitleText:string | null = null;\r\n\r\n    /**\r\n     * 3dsmaps DDD tile server supports on-demand generation. When a tile that's not available is enqueued, it responds\r\n     * with information about the job status. This array contains enqueued tiles status.\r\n     */\r\n    remoteQueueJobsStatus: any[] = [];\r\n\r\n\r\n    constructor(dddConfig: DDDViewerConfig, initialCoords: number[] | null = null) {\r\n\r\n        this.dddConfig = dddConfig;\r\n\r\n        if (dddConfig.defaultCoords) {\r\n            this.positionWGS84 = dddConfig.defaultCoords;\r\n        }\r\n\r\n        if (initialCoords) {\r\n            this.positionWGS84 = initialCoords;\r\n        }\r\n\r\n        const shadowsEnabled = localStorage.getItem( \"dddSceneShadowsEnabled\" );\r\n        this.sceneShadowsEnabled = shadowsEnabled ? JSON.parse( shadowsEnabled ) : this.sceneShadowsEnabled;\r\n\r\n        const textsEnabled = localStorage.getItem( \"dddSceneTextsEnabled\" );\r\n        this.sceneTextsEnabled = textsEnabled ? JSON.parse( textsEnabled ) : this.sceneTextsEnabled;\r\n\r\n        this.sceneTileDrawDistance = dddConfig.sceneTileDrawDistanceDefault;\r\n\r\n        // Start time\r\n        this.positionDate.setHours( 11 );\r\n        this.positionDate.setMinutes( 0 );\r\n\r\n    }\r\n}\r\n\r\nexport { ViewerState };\r\n","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Mesh, Node } from \"@babylonjs/core\";\r\n\r\n\r\n/**\r\n * A reference to a \"logical\" object in the scene.\r\n *\r\n * Like real scene mesh objects, DDDObjectRefs have metadata, a path, parent and children.\r\n *\r\n * This allows to reference sets of triangles in larger objects (eg. if several logical objects were\r\n * batched into a larger mesh at design time or elsewhere).\r\n *\r\n * TODO: Reference the containing layer so each layer can resolve its objects.\r\n */\r\nclass DDDObjectRef {\r\n\r\n    mesh: Node;\r\n\r\n    submeshIdx: number = -1;\r\n\r\n    faceIndexStart: number = -1;\r\n    faceIndexEnd: number = -1;\r\n\r\n    constructor(mesh: Node, submeshIdx: number = -1) {\r\n        this.mesh = mesh;\r\n        this.submeshIdx = submeshIdx;\r\n\r\n        if (this.submeshIdx > -1) {\r\n            let metadata = DDDObjectRef.nodeMetadata(mesh);\r\n            const indexes = 'ddd:combined:indexes' in metadata ? metadata['ddd:combined:indexes'] : metadata['ddd:batch:indexes'];\r\n            if (indexes && (submeshIdx) in indexes) {\r\n                this.faceIndexStart = submeshIdx > 0 ? indexes[submeshIdx - 1][0] : 0;\r\n                this.faceIndexEnd = indexes[submeshIdx][0];\r\n            }\r\n        }\r\n\r\n        /*\r\n        metadata = indexes[i][1];\r\n\r\n        // WARN: TODO: this transformation is done in other places\r\n        let meshName = null;\r\n        if (!combined) {\r\n            meshName = pickResult.pickedMesh.id.split(\"/\").pop().replaceAll('#', '_'); // .replaceAll(\"_\", \" \");\r\n        } else {\r\n            meshName = metadata['ddd:path'].split(\"/\").pop().replaceAll('#', '_'); // .replaceAll(\"_\", \" \");\r\n        }\r\n        */\r\n\r\n    }\r\n\r\n    static nodeMetadata(node: Node) {\r\n        if ( node && node.metadata && node.metadata.gltf && node.metadata.gltf.extras ) {\r\n            return node.metadata.gltf.extras;\r\n        } else if (node.metadata !== null) {\r\n            return node.metadata;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    static fromMeshFace(mesh: Mesh, faceIndex: number): DDDObjectRef {\r\n\r\n        //console.debug(\"Selecting from mesh and face (mesh=\" + mesh.id + \", faceIndex=\" + faceIndex + \")\");\r\n\r\n        let metadata = DDDObjectRef.nodeMetadata(mesh);\r\n\r\n        let subIndex = -1;\r\n        if (metadata) {\r\n            if (('ddd:combined:indexes' in metadata) || ('ddd:batch:indexes' in metadata))  {\r\n                const indexes = 'ddd:combined:indexes' in metadata ? metadata['ddd:combined:indexes'] : metadata['ddd:batch:indexes'];\r\n                // Find triangle in indexes\r\n                let prevIndex = -1;\r\n                //if (indexes.length > 0) { subIndex = 0; }\r\n                for (let i = 0; i < indexes.length; i++) {\r\n                    if (faceIndex > prevIndex && faceIndex < indexes[i][0]) {\r\n                        subIndex = i;\r\n                        break;\r\n                    }\r\n                    prevIndex = indexes[i][0];\r\n                }\r\n            }\r\n        }\r\n\r\n        const objectRef = new DDDObjectRef(mesh, subIndex);\r\n        return objectRef;\r\n    }\r\n\r\n    /*\r\n    findChildByName(name: string): DDDObjectRef | null {\r\n        return null;\r\n    }\r\n    */\r\n\r\n    getMetadata(): any {\r\n        let metadata = DDDObjectRef.nodeMetadata(this.mesh);\r\n        if (metadata && this.submeshIdx >= 0) {\r\n            const indexes = 'ddd:combined:indexes' in metadata ? metadata['ddd:combined:indexes'] : metadata['ddd:batch:indexes'];\r\n            metadata = indexes[this.submeshIdx][1];\r\n        }\r\n        return metadata;\r\n    }\r\n\r\n    static urlId(value: string): string {\r\n        let result = value;\r\n        if (result) {\r\n            result = result.replaceAll(\"/\", \"-\");\r\n            result = result.replaceAll(\"#\", \"_\");\r\n            result = result.replaceAll(\" \", \"_\");\r\n            result = encodeURIComponent(result);\r\n            result = result.replaceAll(\"%3A\", \":\");\r\n            //result = result.replace(\"/\", \"_\");\r\n            //result = result.replace(\"#\", \"_\");\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getId(): string {\r\n        const metadata = this.getMetadata();\r\n\r\n        let result = this.mesh.id;\r\n        if (metadata && ('ddd:rpath' in metadata)) {\r\n            result = metadata['ddd:rpath'];\r\n        } else if (metadata && ('ddd:path' in metadata)) {\r\n            result = metadata['ddd:path'];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getUrlId(): string {\r\n        let result = this.getId();\r\n        result = DDDObjectRef.urlId(result);\r\n        return result;\r\n    }\r\n\r\n    getLabel(): string {\r\n        let result = this.getId();\r\n        return result;\r\n    }\r\n\r\n    getChildren(): DDDObjectRef[] {\r\n        const result: DDDObjectRef[] = [];\r\n\r\n        //if (this.submeshIdx < 0) {\r\n        for (let child of this.mesh.getChildren()) {\r\n            result.push(new DDDObjectRef(child));\r\n        }\r\n        //}\r\n\r\n        const metadata = this.getMetadata();\r\n        if (metadata && ('ddd:combined:indexes' in metadata || 'ddd:batch:indexes' in metadata)) {\r\n            const indexes = 'ddd:combined:indexes' in metadata ? metadata['ddd:combined:indexes'] : metadata['ddd:batch:indexes'];\r\n            for (let i = 0; i < indexes.length; i++) {\r\n                result.push(new DDDObjectRef(this.mesh, i));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getParent(): DDDObjectRef | null {\r\n        let result = null;\r\n        let parent = this.mesh.parent;\r\n        if (parent) { result = new DDDObjectRef(parent); }\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nexport { DDDObjectRef };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\n\r\n/**\r\n * A Camera and Input controller.\r\n *\r\n * This allows controlling the main camera, which is the main interface for viewing.\r\n * Controllers process input devices if they wish to respond to user input.\r\n *\r\n * Client code may use custom controllers or disable these controllers\r\n * and position the camera manually.\r\n */\r\nabstract class BaseCameraController {\r\n\r\n    protected dddViewer: SceneViewer;\r\n\r\n    constructor(dddViewer: SceneViewer) {\r\n\r\n        // Reference to DDDViewer\r\n        this.dddViewer = dddViewer;\r\n\r\n        // Babylon camera which we are controlling\r\n        //this.camera = dddViewer.camera;\r\n    }\r\n\r\n    protected getCamera(): Camera {\r\n        return this.dddViewer.camera;\r\n    }\r\n\r\n    abstract update(deltaTime: number): void;\r\n\r\n    abstract activate(): void;\r\n\r\n}\r\n\r\nexport { BaseCameraController };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera, UniversalCamera, Vector3 } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\nimport { BaseCameraController } from \"./BaseCameraController\";\r\n\r\n/**\r\n * DDD Viewer base layer class.\r\n */\r\nclass FreeCameraController extends BaseCameraController {\r\n\r\n    fixMinHeight = false;\r\n\r\n    update(deltaTime: number): void {\r\n        // Fix viewer to floor\r\n        if (this.fixMinHeight) {\r\n            const terrainElevation = this.dddViewer.viewerState.positionTerrainElevation;\r\n            if (terrainElevation && this.dddViewer.camera.position.y < ( terrainElevation + 1.0 )) {\r\n                this.getCamera().position.y = terrainElevation + 1.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    activate(): void {\r\n        if (this.dddViewer.camera) {\r\n            this.dddViewer.camera.customRenderTargets.length = 0; //4 = [];\r\n            this.dddViewer.camera.detachControl();\r\n            this.dddViewer.camera.dispose();\r\n        }\r\n\r\n        //console.debug(\"Creating free camera.\");\r\n        const camera = new UniversalCamera( \"Camera\", Vector3.Zero(), this.dddViewer.scene );\r\n        camera.minZ = 1.0; // 0.1;\r\n        camera.maxZ = 4500;\r\n        camera.angularSensibility = 500.0;\r\n        camera.touchAngularSensibility = 1000.0;\r\n        //camera.touchMoveSensibility = 1.0;\r\n        camera.inertia = 0.0;\r\n        camera.keysUp.push( 87 );\r\n        camera.keysDown.push( 83 );\r\n        camera.keysLeft.push( 65 );\r\n        camera.keysRight.push( 68 );\r\n        camera.keysUpward.push( 69 );\r\n        camera.keysDownward.push( 81 );\r\n        camera.attachControl( this.dddViewer.engine.getRenderingCanvas(), true );\r\n        camera.fov = 40.0 * ( Math.PI / 180.0 );  // 35.0 might be GM, 45.8... is default  // 35\r\n        const positionScene = this.dddViewer.wgs84ToScene( this.dddViewer.viewerState.positionWGS84 );\r\n        camera.position = new Vector3( positionScene[0], this.dddViewer.viewerState.positionGroundHeight + this.dddViewer.viewerState.positionTerrainElevation + 1, positionScene[2]);\r\n        camera.rotation = new Vector3(( 90.0 - this.dddViewer.viewerState.positionTilt ) * ( Math.PI / 180.0 ), this.dddViewer.viewerState.positionHeading * ( Math.PI / 180.0 ), 0.0 );\r\n        //camera.cameraRotation = new Vector2(/* (90.0 - this.viewerState.positionTilt) * (Math.PI / 180.0) */ 0, this.viewerState.positionHeading * (Math.PI / 180.0));\r\n        this.dddViewer.camera = camera;\r\n        this.dddViewer.setMoveSpeed( this.dddViewer.viewerState.sceneMoveSpeed );\r\n\r\n        this.dddViewer.updateRenderTargets();\r\n        if (this.dddViewer.shadowGenerator) {\r\n            this.dddViewer.shadowGenerator.splitFrustum();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport { FreeCameraController };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\n/* eslint-disable @typescript-eslint/no-inferrable-types */\r\n\r\n//import { GLTF2 } from \"@babylonjs/loaders/glTF\";\r\nimport \"@babylonjs/loaders/glTF\";\r\n\r\nimport { AbstractMesh, ArcRotateCamera, BaseTexture, BloomEffect, BoundingInfo, Camera, CascadedShadowGenerator, Color3, ColorCurves, CubeTexture, DefaultRenderingPipeline, DirectionalLight, DynamicTexture, Engine, FloatArray, ImageProcessingPostProcess, IndicesArray, LensFlare, LensFlareSystem, LensRenderingPipeline, Material, Matrix, Mesh, MeshBuilder, NodeMaterial, PBRBaseMaterial, PBRMaterial, PickingInfo, PointLight, PostProcessRenderEffect, PostProcessRenderPipeline, Quaternion, Ray, ReflectionProbe, Scene, SceneInstrumentation, SceneLoader, SceneOptions, ScreenSpaceReflectionPostProcess, ShaderMaterial, Space, StandardMaterial, TargetCamera, Texture, TransformNode, UniversalCamera, Vector2, Vector3, Vector4, VertexBuffer } from \"@babylonjs/core\";\r\nimport { WaterMaterial } from \"@babylonjs/materials\";\r\n\r\nimport { Coordinate } from \"ol/coordinate\";\r\nimport * as extent from \"ol/extent\";\r\nimport { createXYZ, extentFromProjection } from \"ol/tilegrid\";\r\nimport TileGrid from \"ol/tilegrid/TileGrid\";\r\n//import {register} from 'ol/proj/proj4';\r\nimport { transform } from \"ol/proj\";\r\n\r\nimport * as proj4 from \"proj4\";\r\nimport SunCalc from \"suncalc\";\r\n\r\n    import { LayerManager } from \"./layers/LayerManager\";\r\nimport { QueueLoader } from \"./loading/QueueLoader\";\r\nimport { ViewerProcessManager } from \"./process/ViewerProcessManager\";\r\nimport { SkyMaterialWrapper } from \"./render/materials/SkyboxMaterial\";\r\nimport { TerrainMaterialWrapper } from \"./render/materials/TerrainMaterial\";\r\nimport { TextMaterialWrapper } from \"./render/materials/TextMaterial\";\r\nimport { ScenePosition } from \"./core/ScenePosition\";\r\nimport { ViewerSequencer } from \"./process/sequencer/ViewerSequencer\";\r\nimport { ViewerState } from \"./ViewerState\";\r\nimport { DDDViewerConfig } from \"./DDDViewerConfig\";\r\nimport { GeoTile3DLayer } from \"./layers/GeoTile3DLayer\";\r\nimport { DDDObjectRef } from \"./core/DDDObjectRef\";\r\nimport { BaseCameraController } from \"./camera/BaseCameraController\";\r\nimport { FreeCameraController } from \"./camera/FreeCameraController\";\r\n\r\n\r\n/**\r\n * This is the main DDDViewer library entry point. Represents a DDDViewer instance.\r\n */\r\nclass SceneViewer {\r\n\r\n    viewerState: ViewerState;\r\n\r\n    engine: Engine;\r\n    scene: Scene;\r\n    camera: Camera;\r\n    sceneInstru: SceneInstrumentation | null = null;\r\n\r\n    canvas: HTMLCanvasElement;\r\n    element: HTMLElement;\r\n\r\n    cameraController: BaseCameraController | null = null;\r\n\r\n    sequencer: ViewerSequencer;\r\n    processes: ViewerProcessManager;\r\n\r\n    highlightMeshes: Mesh[] = [];\r\n    //materialHighlight: Material | null = null;\r\n    materialHighlight: StandardMaterial | null = null;\r\n\r\n    //walkMode: boolean = false;\r\n\r\n    useSplatMap: boolean = false;\r\n\r\n    layerManager: LayerManager;\r\n    queueLoader: QueueLoader;\r\n\r\n    originShiftWGS84: number[];\r\n    //projection: proj4.InterfaceProjection;\r\n    projection: proj4.Converter;\r\n\r\n    tileGrid: TileGrid;\r\n\r\n    catalog: { [key: string]: Mesh }\r\n    catalog_materials: { [key: string]: Material }\r\n    instanceRoots: { [key: string]: Mesh }\r\n    depends: Mesh[];\r\n\r\n    ambientColorNight: Color3 = new Color3( 0, 0, 0.1 );\r\n    ambientColorDay: Color3 = new Color3( 0.70, 0.70, 0.7 );\r\n\r\n    colorLightLamp: Color3 = new Color3(250 / 255, 244 / 255, 192 / 255);\r\n    colorLightRed: Color3 = new Color3(512 / 255, 0 / 255, 0 / 255);\r\n    colorLightGreen: Color3 = new Color3(50 / 255, 512 / 255, 50 / 255);\r\n    colorLightOrange: Color3 = new Color3(255 / 255, 157 / 255, 0 / 255);\r\n\r\n    lastDateUpdate: number = new Date().getTime();\r\n\r\n    selectedMesh: Mesh | null = null;\r\n    sceneSelectedMeshId: string | null = null;\r\n    selectedObject: DDDObjectRef | null = null;\r\n\r\n    materialWater: Material | null = null; // WaterMaterial | null = null;\r\n    materialOcean: NodeMaterial | null = null;\r\n    materialText: Material | null = null;\r\n    materialFlare: Material | null = null;\r\n\r\n    baseEnvironmentIntensity: number = 1.0;\r\n\r\n    envReflectionProbe: ReflectionProbe | null = null;\r\n    light: DirectionalLight | null = null;\r\n    shadowGenerator: CascadedShadowGenerator | null = null;\r\n    lensFlareSystem: LensFlareSystem | null = null;\r\n    textureDetailSurfaceImp: Texture | null = null;\r\n    skybox: Mesh | null = null;\r\n\r\n    splatmapAtlasTexture: Texture | null = null;\r\n    splatmapAtlasNormalsTexture: Texture | null = null;\r\n\r\n    _previousLampPatOn: boolean | null = null;\r\n    _geolocationWatchId: string | null = null;\r\n    _decimator: number = 0;\r\n\r\n\r\n    /**\r\n     * Constructs a new DDDViewer instance, and mounts it on the given HTMLCanvasElement.\r\n     * @param canvas\r\n     * @param viewerState\r\n     */\r\n    constructor( canvas: HTMLCanvasElement, dddConfig: DDDViewerConfig | null = null) {\r\n\r\n        /*\r\n        // Accept selector for canvas\r\n        if (canvas instanceof String) {\r\n            canvas = document.getElementById('ddd-scene');\r\n        }\r\n        */\r\n\r\n        // Resolve default properties\r\n        if (dddConfig == null) {\r\n            dddConfig = new DDDViewerConfig();\r\n        } else {\r\n            dddConfig = Object.assign(new DDDViewerConfig(), dddConfig);\r\n        }\r\n\r\n\r\n        this.viewerState = new ViewerState(dddConfig);\r\n\r\n        this.canvas = canvas;\r\n        this.element = canvas.parentElement!;\r\n\r\n        this.layerManager = new LayerManager( this );\r\n        this.queueLoader = new QueueLoader( this );\r\n\r\n        this.originShiftWGS84 = [ 0, 0 ];\r\n        this.projection = proj4.default( \"EPSG:4326\" );\r\n\r\n        this.tileGrid = createXYZ({\r\n            extent: extentFromProjection( \"EPSG:3857\" ),\r\n            //maxResolution: options.maxResolution,\r\n            //maxZoom: options.maxZoom,\r\n            //minZoom: options.minZoom,\r\n            //tileSize: options.tileSize,\r\n        });\r\n\r\n        this.catalog = {};\r\n        this.catalog_materials = {};\r\n        this.instanceRoots = {};\r\n\r\n        // Dependencies to not yet loaded objects, in order to process them\r\n        this.depends = [];\r\n\r\n        this.lastDateUpdate = new Date().getTime();\r\n\r\n        this.processes = new ViewerProcessManager(this);\r\n        this.sequencer = new ViewerSequencer(this);\r\n\r\n        // Associate a Babylon Engine to it (engine:  canvas, antialiasing, options, adaptToDeviceRatio)\r\n        this.engine = new Engine(canvas, true); // , null, true); // , { stencil: true });\r\n\r\n        // Note: useGeometryIdsMap=true seems to help only when there are already too many objects, but performance is (slightly) better without it if object count is low\r\n        this.scene = new Scene(this.engine, { useGeometryIdsMap: true } as SceneOptions);\r\n        this.camera = this.initCamera();\r\n\r\n        //that.scene = createScene(engine, canvas);\r\n        //this.scene.freezeActiveMeshes(true);  // affects too many things, causes wrong behavior (skybox, etc)\r\n        //this.octree = null;\r\n\r\n        this.initialize();\r\n\r\n    }\r\n\r\n    private initialize(): void {\r\n\r\n        // Initialize scene projection for WGS84 coordinates\r\n        const coords = this.viewerState.positionWGS84;\r\n        this.registerProjectionForCoords(coords);\r\n\r\n        this.scene.pointerMovePredicate = function() { return false; };\r\n        this.scene.pointerDownPredicate = function() { return false; };\r\n\r\n        //this.sceneInstru = null;\r\n        this.sceneInstru = new SceneInstrumentation( this.scene );\r\n\r\n        //that.highlightLayer = new HighlightLayer(\"hl1\", that.scene);\r\n\r\n        // Initialize camera controller\r\n        this.cameraController = new FreeCameraController(this);\r\n\r\n        // Materials\r\n        this.initializeMaterials();\r\n\r\n        // Environment\r\n        this.envReflectionProbe = null;\r\n        if (this.viewerState.sceneEnvironmentProbe !== null) {\r\n            //console.debug(\"Creating reflection probe.\");\r\n            this.envReflectionProbe = new ReflectionProbe(\"envReflectionProbe\", this.viewerState.sceneEnvironmentProbe, this.scene, true, true);\r\n            this.envReflectionProbe.refreshRate = 6;\r\n            this.envReflectionProbe.position = new Vector3(0, 0, 0);\r\n\r\n            // Assign to a material to see it\r\n            //var pbr = new PBRMaterial('envReflectionTestMaterial', this.scene);\r\n            //pbr.reflectionTexture = this.envReflectionProbe.cubeTexture;\r\n\r\n            // Note that material needs to be added to the camera custom render targets to be updated\r\n            this.scene.environmentTexture = this.envReflectionProbe.cubeTexture;\r\n\r\n        } else {\r\n            //this.scene.createDefaultEnvironment();\r\n            //var hdrTexture = new CubeTexture.CreateFromPrefilteredData(\"/textures/environment.env\", this.scene);\r\n            const hdrTexture = CubeTexture.CreateFromPrefilteredData(\"/textures/country.env\", this.scene);\r\n            this.scene.environmentTexture = hdrTexture;\r\n        }\r\n\r\n        // Skybox\r\n        this.loadSkybox(this.viewerState.sceneSkybox);\r\n\r\n        // Load fonts (after environment, or the call to add to catalog will miss PBR environment texture)\r\n        //const fontAtlasTexture = (<PBRMaterial>mesh.material).albedoTexture;\r\n        const atlasTextureUrl = this.viewerState.dddConfig.assetsUrlbase + \"/dddfonts_01_64.greyscale.png\";\r\n        const fontAtlasTexture = new Texture(atlasTextureUrl, this.scene, false, false);\r\n        const tmw = new TextMaterialWrapper(this, fontAtlasTexture, null);\r\n        tmw.material.zOffset = -10;\r\n        this.materialText = tmw.material;\r\n        this.addMaterialToCatalog(\"DDDFonts-01-64\", this.materialText, {\"zoffset\": -10}, false);\r\n\r\n        // Render Pipeline config and Postprocessing\r\n        /*\r\n        this.initRenderPipeline();\r\n        this.updateRenderPipeline();\r\n        */\r\n\r\n        // Lighting\r\n\r\n        //this.scene.ambientColor = this.ambientColorDay.clone();\r\n        //this.scene.ambientColor = new Color3(0, 0, 0);\r\n        this.scene.ambientColor = new Color3( 0.3, 0.3, 0.3 );\r\n        /*\r\n        that.lightHemi = new HemisphericLight(\"lightHemi\", new Vector3(-0.5, 1, -1), that.scene);\r\n        that.lightHemi.intensity = 1.15;\r\n        that.lightHemi.diffuse = new Color3(0.95, 0.95, 1);\r\n        that.lightHemi.specular = new Color3(1, 1, 0.95);\r\n        that.lightHemi.groundColor = new Color3(0.95, 1, 0.95);\r\n        */\r\n        this.light = new DirectionalLight( \"light\", new Vector3( 0.3, -0.5, 0.5 ).normalizeToNew(), this.scene );\r\n        this.light.diffuse = new Color3( 0.95, 0.95, 1.00 );\r\n        this.light.specular = new Color3( 1, 1, 0.95 );\r\n        this.light.intensity = 2.8;\r\n\r\n        /*\r\n        that.light2 = new DirectionalLight(\"light2\", new Vector3(-0.3, -0.5, -0.5).normalizeToNew(), that.scene);\r\n        that.light.diffuse = new Color3(223 / 255, 242 / 255, 196 / 255);\r\n        that.light.specular = new Color3(1, 1, 0.95);\r\n        that.light2.intensity = 1.5;\r\n        */\r\n\r\n\r\n        this.shadowGenerator = null;\r\n        if ( this.viewerState.sceneShadowsEnabled ) {\r\n            this.shadowGenerator = new CascadedShadowGenerator( 1024, this.light );\r\n            this.shadowGenerator.bias = 0.002;  // 0.002 Makes grass appear slightly floating but prevents the full scene ground to be self-shadowed  0.001 avoid the gap but already produces self-shadowing\r\n            //that.shadowGenerator.debug = true;\r\n            this.shadowGenerator.shadowMaxZ = 500;\r\n            //this.shadowGenerator.autoCalcDepthBounds = true;  // Enabling it causes shadow artifacts after switching cameras (?)\r\n            this.shadowGenerator.penumbraDarkness = 0.8;\r\n            this.shadowGenerator.lambda = 1.0;\r\n            //that.shadowGenerator.depthClamp = false;\r\n            //that.shadowGenerator.freezeShadowCastersBoundingInfo = true;\r\n            \r\n            // Rendering backfaces for shadows for under-terrain shadows, and reduces the need for bias\r\n            // TODO: Shall be needed only for terrain if possible \r\n            // TODO: Make a setting\r\n            this.shadowGenerator.forceBackFacesOnly = true; \r\n            \r\n            this.shadowGenerator.splitFrustum();\r\n        }\r\n\r\n\r\n        const lensFlareEmitter: Mesh = new Mesh( \"lensFlareEmitter\", this.scene );\r\n        this.lensFlareSystem = new LensFlareSystem( \"lensFlareSystem\", lensFlareEmitter, this.scene );\r\n        const flareScale = 0.5;\r\n        new LensFlare( flareScale * 0.2, 0, new Color3( 1, 1, 1 ), \"/textures/Flare2.png\", this.lensFlareSystem );\r\n        new LensFlare( flareScale * 0.5, 0.2, new Color3( 0.5, 0.5, 1 ), \"/textures/flare3.png\", this.lensFlareSystem );\r\n        new LensFlare( flareScale * 0.2, 1.0, new Color3( 1, 1, 1 ), \"/textures/flare3.png\", this.lensFlareSystem );\r\n        new LensFlare( flareScale * 0.4, 0.4, new Color3( 1, 0.5, 1 ), \"/textures/flare.png\", this.lensFlareSystem );\r\n        new LensFlare( flareScale * 0.1, 0.6, new Color3( 1, 1, 1 ), \"/textures/flare3.png\", this.lensFlareSystem );\r\n        new LensFlare( flareScale * 0.3, 0.8, new Color3( 1, 1, 1 ), \"/textures/Flare2.png\", this.lensFlareSystem );\r\n\r\n        // Setup lighting, flares, etc.\r\n        this.lightSetupFromDatePos();\r\n\r\n        //var ssao = new SSAORenderingPipeline('ssaopipeline', that.scene, 0.75);\r\n\r\n        this.loadCatalog( this.viewerState.dddConfig.assetsUrlbase + \"/catalog.glb\", false );\r\n\r\n        this.loadTextures();\r\n\r\n        // Render every frame\r\n        this.engine.runRenderLoop(() => {\r\n            if ( ! this.scene ) { return; }\r\n            let deltaTime = this.engine!.getDeltaTime() / 1000.0;\r\n            this.update(deltaTime);\r\n            this.scene.render();\r\n        });\r\n\r\n\r\n        // Performance\r\n        // Avoid clear calls, as there's always a skybox\r\n        this.scene.autoClear = false; // Color buffer\r\n        this.scene.autoClearDepthAndStencil = false; // Depth and stencil\r\n        this.scene.blockMaterialDirtyMechanism = true;\r\n\r\n        this.scene.setRenderingAutoClearDepthStencil( 1, false, false, false );  // For objects in front of layer 0 (buildings and instances)\r\n\r\n    }\r\n\r\n    private initializeMaterials(): void {\r\n        // Some hard-coded materials used by DDD\r\n\r\n        /*\r\n        const water = new StandardMaterial(\"water\", this.scene);\r\n        water.specularTexture = new Texture(\"/textures/reflectivity.png\", this.scene);\r\n        //water.ambientColor = new Color3(0.0, 0.0, 1.0);\r\n        water.diffuseColor = new Color3(0.0, 0.0, 1.0);\r\n        water.specularColor = new Color3(0.0, 0.0, 1.0);\r\n        //water.alphaMode = Material.MATERIAL_ALPHABLEND;\r\n        //water.transparencyMode = Material.MATERIAL_ALPHABLEND;\r\n        //water.alpha = 0.6;\r\n        */\r\n\r\n        const water = new WaterMaterial(\"water\", this.scene, new Vector2( 512, 512 ));\r\n        water.bumpTexture = new Texture(\"/textures/waterbump.png\", this.scene);\r\n        water.waveLength = 15.0;    // def: 0.1\r\n        water.waveHeight = 0.04;    // def: 0.4\r\n        water.waveSpeed = 50.0;     // def: 1\r\n        water.windForce = 1.0;      // def: 6\r\n        //water.waveCount = 1.0;        // def: 20\r\n        water.windDirection = new Vector2( 0.75, 1.3 );\r\n        water.bumpHeight = 0.4;       // def: 0.4\r\n        water.alpha = 0.5;\r\n        water.transparencyMode = 2;  // 2  ALPHA_BLEND  3;  // ALPHA_TEST_AND_BLEND\r\n        water.bumpAffectsReflection = true; // true;\r\n        //water.bumpSuperimpose = true;\r\n        //water.fresnelSeparate = true;\r\n        //water.waterColor = new Color3( 0.0, 0.0, 0.0 );   // def: 0.1 0.1 0.6\r\n        //water.waterColor2 = new Color3( 0.0, 0.0, 0.0 );  // def: 0.1 0.1 0.6\r\n        water.colorBlendFactor = 0.7;   // def: 0.2\r\n        water.colorBlendFactor2 = 0.7;  // def: 0.2\r\n        water.backFaceCulling = false;\r\n        //water.specularPower = 0.05;      // def: 64\r\n        water.specularColor = new Color3(0.1, 0.1, 0.05);  // def: 0,0,0\r\n        water.diffuseColor = new Color3(0.2, 0.2, 0.2);   // def: 1,1,1\r\n        this.scene.setRenderingAutoClearDepthStencil(1, false, false, false);\r\n        this.scene.setRenderingAutoClearDepthStencil(2, false, false, false);\r\n        //this.scene.setRenderingAutoClearDepthStencil(3, false, false, false);\r\n        //water.addToRenderList(ground);\r\n        //let waterOcean = createOceanMaterial(this.scene);\r\n\r\n        this.materialWater = water;\r\n\r\n\r\n        // Load flare texture and apply it\r\n        /*\r\n        const flareMaterial = new StandardMaterial(\"lightFlare\", this.scene);\r\n        //flareMaterial.specularTexture = new Texture(\"/textures/flare3.png\", this.scene);\r\n        flareMaterial.diffuseTexture = new Texture(\"/textures/flare.png\", this.scene);\r\n        flareMaterial.diffuseTexture.hasAlpha = true;\r\n        flareMaterial.useAlphaFromDiffuseTexture = true;\r\n        //water.ambientColor = new Color3(0.0, 0.0, 1.0);\r\n        flareMaterial.diffuseColor = new Color3(1.0, 1.0, 1.0);\r\n        //flareMaterial.specularColor = new Color3(1.0, 1.0, 1.0);\r\n        flareMaterial.alphaMode = 1;  // ALPHA_ADD\r\n        flareMaterial.alpha = 0.30;\r\n        flareMaterial.emissiveColor = new Color3(1.0, 1.0, 1.0);\r\n        flareMaterial.transparencyMode = Material.MATERIAL_ALPHABLEND;  // ALPHA_TEST\r\n        //flareMaterial.backFaceCulling = false;\r\n        flareMaterial.disableLighting = true;\r\n        //flareMaterial.disableDepthWrite = true;\r\n        \r\n        this.materialFlare = flareMaterial;\r\n        */\r\n\r\n\r\n        /*\r\n        NodeMaterial.ParseFromSnippetAsync(\"#3FU5FG#1\", this.scene).then((mat) => {\r\n            //ground.material = mat;\r\n            //window.mat = mat;\r\n            this.materialOcean = mat;\r\n        });\r\n        */\r\n\r\n        /*\r\n        that.materialGrass = new StandardMaterial(\"bawl\", that.scene);\r\n        that.textureGrass = new GrassProceduralTexture(\"textbawl\", 256, that.scene);\r\n        that.materialGrass.ambientTexture = that.textureGrass;\r\n        */\r\n\r\n        this.materialHighlight = new StandardMaterial( \"materialHighlight\", this.scene );\r\n        this.materialHighlight.diffuseColor = new Color3( 1, 0, 1 );\r\n        //that.materialHighlight.specularColor = new Color3(1, 1, 1);\r\n        this.materialHighlight.emissiveColor = new Color3( 1.0, 1.0, 1. );\r\n        this.materialHighlight.wireframe = true;\r\n        this.materialHighlight.disableLighting = true;\r\n        this.materialHighlight.backFaceCulling = true;\r\n\r\n        this.textureDetailSurfaceImp = new Texture( \"/textures/SurfaceImperfections12_ddd.png\", this.scene );\r\n\r\n        // Shader\r\n        /*\r\n        Effect.ShadersStore[\"customVertexShader\"]= `\r\n            precision highp float;\r\n\r\n            // Attributes\r\n            attribute vec3 position;\r\n            attribute vec3 normal;\r\n            attribute vec2 uv;\r\n\r\n            // Uniforms\r\n            uniform mat4 worldViewProjection;\r\n            uniform float time;\r\n\r\n            // Varying\r\n            //varying vec2 vUV;\r\n\r\n            void main(void) {\r\n                vec3 p = position;\r\n                p.x = p.x + sin(2.0 * position.y + time);\r\n                p.y = p.y + sin(time + 4.0);\r\n                gl_Position = worldViewProjection * vec4(p, 1.0);\r\n\r\n                //vUV = uv;\r\n        }`;\r\n        */\r\n    }\r\n\r\n    loadSkybox( baseUrl: string ): void {\r\n\r\n        // Remove skybox\r\n        if (this.skybox) {\r\n\r\n            if (\"getRenderList\" in this.materialWater!) {(<WaterMaterial> this.materialWater!).getRenderList()!.length = 0; }\r\n            if (this.viewerState.sceneEnvironmentProbe) {\r\n                this.envReflectionProbe!.renderList!.length = 0;\r\n            }\r\n\r\n            this.skybox.dispose();\r\n            this.skybox = null;\r\n        }\r\n\r\n        // Set skybox\r\n        if (baseUrl === \"@dynamic\")  {\r\n            const skybox = Mesh.CreateSphere( \"skyBox\", 30, 3000, <Scene> this.scene );\r\n\r\n            const skyboxMaterial = new SkyMaterialWrapper( this.scene ).material;\r\n            skyboxMaterial.disableDepthWrite = true;\r\n\r\n            skybox.material = skyboxMaterial;\r\n            skybox.infiniteDistance = true;\r\n            skybox.applyFog = false;\r\n            this.skybox = skybox;\r\n\r\n        } else if (baseUrl !== null) {\r\n\r\n            const skybox = MeshBuilder.CreateBox( \"skyBox\", { size:3000.0 }, this.scene );\r\n            const skyboxMaterial = new StandardMaterial( \"skyBox\", <Scene> this.scene );\r\n            skyboxMaterial.backFaceCulling = false;\r\n            skyboxMaterial.reflectionTexture = new CubeTexture( baseUrl, <Scene> this.scene );\r\n            skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\r\n            skyboxMaterial.diffuseColor = new Color3( 0, 0, 0 );\r\n            skyboxMaterial.specularColor = new Color3( 0, 0, 0 );\r\n            skyboxMaterial.disableDepthWrite = true;\r\n            \r\n            skybox.material = skyboxMaterial;\r\n            skybox.infiniteDistance = true;\r\n            skybox.applyFog = false;\r\n            this.skybox = skybox;\r\n        }\r\n\r\n        \r\n        console.debug(\"Adding skybox env\");\r\n        if (this.skybox) {\r\n            this.skybox.renderingGroupId = 1;  //Ideally in group 1, after meshes (to avoid overdraw), but... Seems is rendered in group 0 for it to be applied to the reflections on water and objects, but it hsould be the enviornment :??\r\n            //this.skybox.renderingGroupId = 3;  // \r\n            //this.scene.setRenderingAutoClearDepthStencil(3, false, false, false);\r\n            \r\n            //let skyboxReflection = this.skybox; // .clone();\r\n            //skyboxReflection.renderingGroupId = 0;\r\n            this.envReflectionProbe!.renderList!.push(this.skybox);\r\n\r\n            if (\"getRenderList\" in this.materialWater!) {\r\n                //let skyboxWater = this.skybox.clone();\r\n                \r\n                /*\r\n                const skyboxWater = MeshBuilder.CreateBox( \"skyBox\", { size: 3000.0 }, this.scene );\r\n                const skyboxProbeMaterial = new StandardMaterial( \"skyBox\", <Scene> this.scene );\r\n                skyboxProbeMaterial.backFaceCulling = false;\r\n                if (this.envReflectionProbe != null) {\r\n                    skyboxProbeMaterial.reflectionTexture = this.envReflectionProbe?.cubeTexture; //\r\n                    skyboxProbeMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\r\n                }\r\n                skyboxProbeMaterial.diffuseColor = new Color3( 0, 0, 0 );\r\n                skyboxProbeMaterial.specularColor = new Color3( 0, 0, 0 );\r\n                skyboxProbeMaterial.disableDepthWrite = true;\r\n                skyboxWater.material = skyboxProbeMaterial;\r\n                \r\n                skyboxWater.renderingGroupId = 2;\r\n\r\n                (<WaterMaterial> this.materialWater!).addToRenderList(skyboxWater); \r\n                */\r\n                //(<WaterMaterial> this.materialWater!).addToRenderList(this.skybox); \r\n\r\n                (<WaterMaterial> this.materialWater!).markDirty();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    showFullScreen(): void {\r\n        if (this.engine) {\r\n            this.engine.switchFullscreen( true );\r\n        }\r\n    }\r\n\r\n    /*\r\n    showDebugView(): void {\r\n        // Show BabylonJS Inspector\r\n        this.scene!.debugLayer.show({ overlay: true });\r\n    }\r\n    */\r\n\r\n    loadCatalog( filename: string, loadMaterials: boolean ): void {\r\n        console.debug( \"Loading catalog: \" + filename );\r\n        SceneLoader.ImportMesh( null, filename, \"\", this.scene, //this.scene,\r\n            // onSuccess\r\n            ( newMeshes: AbstractMesh[], _particleSystems: any, _skeletons: any ) => {\r\n                //console.log(\"GLB loaded\", newMeshes);\r\n                this.loadCatalogFromMesh( <Mesh>newMeshes[0], loadMaterials );\r\n                newMeshes[0].setParent( null );\r\n                newMeshes[0].setEnabled( false );\r\n                //newMeshes[0].isVisible = false;\r\n                //newMeshes[0].dispose();\r\n\r\n                this.processDepends();\r\n            },\r\n            ( _event ) => { },\r\n            ( _scene, _msg, ex ) => {\r\n                console.debug( \"Could not load scene catalog: \" + filename, ex );\r\n            }\r\n        );\r\n    }\r\n\r\n    processDepends(): void {\r\n        //console.debug( \"Processing dependencies: \", this.depends);\r\n        const dependsCopy = [ ...this.depends ];\r\n        for ( const dep of dependsCopy ) {\r\n            this.depends = this.depends.filter( item => item !== dep );\r\n            this.processMesh( dep, dep );\r\n        }\r\n    }\r\n\r\n    loadCatalogFromMesh( mesh: Mesh, loadMaterials: boolean ): void {\r\n\r\n        if ( mesh && mesh.metadata && mesh.metadata.gltf && mesh.metadata.gltf.extras ) {\r\n            const metadata = mesh.metadata.gltf.extras;\r\n\r\n            // Add color material\r\n            /*\r\n            let key = metadata['ddd:material'];\r\n            let mat = this.catalog_materials[key];\r\n            if (key && key.startsWith(\"Color\") && mesh.material && !mat) {\r\n                console.debug(\"Adding color material \" + mesh.material + \" to catalog: \" + key);\r\n                mat = mesh.material;\r\n                mat.name = key;\r\n                this.catalog_materials[key] = mat;\r\n                //mesh.material = mat;\r\n            } else if (key && mat) {\r\n                //mesh.material.dispose();\r\n                //mesh.material = mat;\r\n            }\r\n            */\r\n\r\n            if ( metadata[\"ddd:instance:key\"]) {\r\n                //this.processMesh(mesh, mesh);\r\n                this.addMeshToCatalog( metadata[\"ddd:instance:key\"], mesh );\r\n            }\r\n\r\n            if ( metadata[\"ddd:material\"] && ( loadMaterials || ( !( metadata[\"ddd:material\"] in this.catalog_materials )))) {\r\n                try {\r\n                    this.addMaterialToCatalog( metadata[\"ddd:material\"], mesh.material!, mesh.metadata.gltf.extras, true );\r\n                } catch ( e ) {\r\n                    console.debug( \"Error adding material to catalog: \", mesh, e );\r\n                }\r\n            }\r\n        }\r\n\r\n        for ( const child of mesh.getChildren()) {\r\n            this.loadCatalogFromMesh( <Mesh> child, loadMaterials );\r\n        }\r\n    }\r\n\r\n    addMaterialToCatalog(key: string, material: Material, metadata: any, force: boolean = false): void {\r\n        if (material) {\r\n            //console.debug(mesh.material);\r\n            //mesh.material.id = key;\r\n            material.name = key;\r\n\r\n            if (this.catalog_materials[key] && !force) {\r\n                console.debug( \"Material already in catalog: \" + key );\r\n            } else {\r\n                //console.debug(\"Adding material to catalog: \" + key);\r\n                this.catalog_materials[key] = material;\r\n\r\n                let dontFreeze = false;\r\n\r\n                if (metadata[\"ddd:material\"] === \"WaterBasicDaytime\") {\r\n                    /*\r\n                    mesh.material.alpha = 0.7;\r\n                    mesh.material.transparencyMode = 2;  // ALPHA_BLEND\r\n                    mesh.material.useSpecularOverAlpha = true;\r\n                    mesh.material.useReflectionOverAlpha = true;\r\n                    mesh.material.bumpTexture = new Texture(\"/textures/waterbump.png\", this.scene);\r\n                    */\r\n\r\n                    // This \"WaterInstanced\" is additionally created to avoid WaterMaterial from being used in instances (seems to fail, causing the material to disappear).\r\n                    this.catalog_materials[\"WaterInstanced\"] = material;\r\n                    this.catalog_materials[\"WaterInstanced\"].alpha = 0.7;\r\n                    this.catalog_materials[\"WaterInstanced\"].transparencyMode = 2;\r\n                    this.catalog_materials[\"WaterInstanced\"].freeze();\r\n\r\n                    //console.debug(\"NOT ADDING WATERMATERIAL TO CATALOG\");\r\n                    this.catalog_materials[key] = <Material> this.materialWater;\r\n                    dontFreeze = true;\r\n\r\n                } else if ( metadata[\"ddd:material\"] === \"Water4Advanced\" ) {\r\n                    /*\r\n                    mesh.material.alpha = 0.8;\r\n                    mesh.material.transparencyMode = 2;  // ALPHA_BLEND\r\n                    mesh.material.useSpecularOverAlpha = true;\r\n                    mesh.material.useReflectionOverAlpha = true;\r\n                    mesh.material.bumpTexture = new Texture(\"/textures/waterbump.png\", this.scene);\r\n                    */\r\n                    //console.debug(\"NOT ADDING WATERMATERIAL TO CATALOG\");\r\n                    this.catalog_materials[key] = <Material> this.materialWater;\r\n                    dontFreeze = true;\r\n\r\n                } else if ( material instanceof PBRMaterial ) {\r\n                    \r\n                    //dontFreeze = true;\r\n                    //mesh.material.specularColor = Color3.Lerp(mesh.material.albedoColor, Color3.White(), 0.2);\r\n                    //mesh.material.albedoColor = Color3.Lerp(mesh.material.albedoColor, Color3.White(), 0.5);\r\n                    //mesh.material.albedoColor = Color3.FromHexString(mesh.metadata.gltf.extras['ddd:material:color']).toLinearSpace();\r\n                    //mesh.material.albedoColor = Color3.FromHexString(mesh.material.albedoColor).toLinearSpace();\r\n\r\n                    //let uvScale = 0.25;\r\n                    let uvScale = 1.0;\r\n\r\n                    if (( metadata[\"ddd:material\"] === \"Lava\" )) {\r\n                        uvScale = 0.125;\r\n                    }\r\n                    if (( metadata[\"ddd:material\"] === \"Grass\" )) {\r\n                        //uvScale = 0.5;\r\n                    }\r\n                    if (( metadata[\"ddd:material\"] === \"Roadline\" ) ||\r\n                        ( metadata[\"ddd:material\"] === \"Roadmarks\" ) ||\r\n                        ( metadata[\"ddd:material\"] === \"Fence\" ) ||\r\n                        ( metadata[\"ddd:material\"] === \"TrafficSigns\" ) ||\r\n                        ( metadata[\"ddd:material\"] === \"RoadRailway\" ) ||\r\n                        ( metadata[\"ddd:material\"] === \"Flowers Blue\" ) ||\r\n                        ( metadata[\"ddd:material\"] === \"Flowers Roses\" ) ||\r\n                        ( metadata[\"ddd:material\"] === \"Grass Blade\" ) ||\r\n                        ( metadata[\"ddd:material\"] === \"Grass Blade Dry\" )) {\r\n                        uvScale = 1.0;\r\n                        \r\n                        // TODO: add this as metadata (should not apply to all of these)\r\n                        material.twoSidedLighting = true;\r\n                    }\r\n\r\n                    if (( metadata[\"ddd:material\"] === \"Flowers Blue\" ) ||\r\n                        ( metadata[\"ddd:material\"] === \"Flowers Roses\" ) ||\r\n                        ( metadata[\"ddd:material\"] === \"Grass Blade\" ) ||\r\n                        ( metadata[\"ddd:material\"] === \"Grass Blade Dry\" )) {\r\n                        uvScale = 1.0;\r\n                        \r\n                        // TODO: add this as metadata (should not apply to all of these)\r\n                        material.twoSidedLighting = true;\r\n                        material.backFaceCulling = false;\r\n                    }\r\n\r\n\r\n                    if (( metadata[\"ddd:material\"] === \"Fence\" )) {\r\n                        uvScale = 0.5;\r\n                        material.backFaceCulling = false;\r\n                        if ( material.albedoTexture && material instanceof PBRBaseMaterial ) {\r\n                            ( <Texture> material.albedoTexture ).vOffset = 0.0725;\r\n                        }\r\n                        if ( material.bumpTexture ) { ( <Texture> material.bumpTexture ).vOffset = 0.0725; }\r\n                    }\r\n\r\n                    if ( uvScale !== 1.0 ) {\r\n                        if ( material.albedoTexture && material instanceof PBRBaseMaterial ) {\r\n                            ( <Texture> material.albedoTexture ).uScale = uvScale;\r\n                            ( <Texture> material.albedoTexture ).vScale = uvScale;\r\n                            if ( material.bumpTexture ) {\r\n                                ( <Texture> material.bumpTexture ).uScale = uvScale;\r\n                                ( <Texture> material.bumpTexture ).vScale = uvScale;\r\n                            }\r\n                            if ( material.emissiveTexture ) {\r\n                                ( <Texture> material.emissiveTexture ).uScale = uvScale;\r\n                                ( <Texture> material.emissiveTexture ).vScale = uvScale;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Babylon does not enable emissive by default if an emissive texture exists. This makes eg. lava emissive.\r\n                    if (material.emissiveTexture) {\r\n                        material.emissiveColor = Color3.White();\r\n                    }\r\n\r\n                    /*\r\n                    if ((metadata['ddd:material'] !== 'Flo') &&\r\n                        (metadata['ddd:material'] !== 'TrafficSigns') &&\r\n                        (metadata['ddd:material'] !== 'RoadRailway') &&\r\n                        (metadata['ddd:material'] !== 'Flowers Blue') &&\r\n                        (metadata['ddd:material'] !== 'Flowers Roses') &&\r\n                        (metadata['ddd:material'] !== 'Grass Blade')) {\r\n                        mesh.material.albedoTexture.uScale = 0.25;\r\n                        mesh.material.albedoTexture.vScale = 0.25;\r\n                        if (mesh.material.bumpTexture) {\r\n                            mesh.material.bumpTexture.uScale = 0.25;\r\n                            mesh.material.bumpTexture.vScale = 0.25;\r\n                        }\r\n                    }\r\n                    */\r\n\r\n                    // Detail map\r\n                    // TODO: Disabled as didn't seem to be working (10-2023)\r\n                    /*\r\n                    material.detailMap.texture = this.textureDetailSurfaceImp;\r\n                    if (material.detailMap.texture) {\r\n                        ( <Texture> material.detailMap.texture ).uScale = 1 / 256;\r\n                        ( <Texture> material.detailMap.texture ).vScale = 1 / 256;\r\n                        material.detailMap.isEnabled = true;\r\n                        material.detailMap.diffuseBlendLevel = 0.15; // 0.2\r\n                        //mesh.material.detailMap.bumpLevel = 1; // between 0 and 1\r\n                        //mesh.material.detailMap.roughnessBlendLevel = 0.05; // between 0 and 1\r\n                        //mesh.material.freeze();  // Careful: may prevent environment texture change (?)\r\n                    }\r\n                    */\r\n\r\n                    (<PBRMaterial>material).environmentIntensity = this.baseEnvironmentIntensity * 0.75; // * 0.25;\r\n                    //(<PBRMaterial>material).ambientColor = new Color3(0, 0, 0);\r\n\r\n                    (<PBRMaterial>material).useHorizonOcclusion = true;\r\n                    if (this.envReflectionProbe) {\r\n                        // Seems this is applied even if not done explicitly here?\r\n                        (<PBRMaterial>material).reflectionTexture = this.envReflectionProbe!.cubeTexture;\r\n                    }\r\n\r\n                    // Freezing PBR materials causes them to not respond to environment intensity or reflection texture changes\r\n                    dontFreeze = true;\r\n\r\n                }\r\n\r\n                if ( ('zoffset' in metadata) && metadata[\"zoffset\"]) {\r\n                    this.catalog_materials[key].zOffset = metadata[\"zoffset\"];\r\n                }\r\n\r\n                //mesh.material.ambientColor = mesh.material.albedoColor; // new Color3(1, 1, 1);\r\n                if ( !dontFreeze ) {\r\n                    this.catalog_materials[key].freeze();\r\n                }\r\n\r\n            }\r\n        } else {\r\n            console.debug( \"No material (null) (key=\" + key + \")\" );\r\n        }\r\n    }\r\n\r\n    addMeshToCatalog( key: string, mesh: Mesh ): void {\r\n        if ( this.catalog[key]) {\r\n            console.debug( \"Mesh already in catalog: \" + key );\r\n        } else {\r\n            //console.debug(\"Adding mesh to catalog: \" + key);\r\n            this.catalog[key] = mesh;\r\n            mesh.setEnabled( false );\r\n            mesh.parent = null;\r\n        }\r\n    }\r\n\r\n    processMeshDummy( _root: Mesh, mesh: Mesh ): Mesh | null {\r\n        return mesh;\r\n    }\r\n\r\n    processMesh( root: Mesh, mesh: Mesh ): Mesh | null {\r\n        //console.debug(\"Processing mesh: \" + mesh.id, mesh);\r\n        const rootmd = root.metadata ? root.metadata.tileInfo : null;\r\n\r\n        if ('getTotalVertices' in mesh) {\r\n            if (mesh.getChildMeshes().length == 0) {\r\n                if (mesh.getTotalVertices() == 0 || mesh.getTotalIndices() == 0) {\r\n                    //console.log(\"Empty mesh with no vertices or indices: \" + mesh.id, mesh);\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n\r\n        //mesh.isPickable = false;\r\n        mesh.receiveShadows = true; // Fixes instances with no shadows\r\n\r\n        // TODO: Ground/texture override shall be done per layer settings (and passed here into processMesh as needed)\r\n        if ( !(\"_splatmapMaterial\" in root) && this.useSplatMap && ! this.viewerState.sceneGroundTextureOverrideUrl &&\r\n            this.viewerState.dddConfig.materialsSplatmap) {  // && this.viewerState.dddConfig.materialsTextureSet.indexOf(\"default\") >= 0\r\n\r\n            if (rootmd && (\"metadata\" in root) && (\"tileCoords\" in root.metadata)) {\r\n                const coords = root.metadata[\"tileCoords\"];\r\n                //console.debug(\"Creating splat material for: \", coords);\r\n\r\n                const tileUrlBase = this.viewerState.dddConfig.tileUrlBase;\r\n                const splatmapUrl = tileUrlBase + \"17\" + \"/\" + coords[1] + \"/\" + coords[2] + \".splatmap-16chan-0_15-256.png\";\r\n\r\n                //console.info(\"Splatmap texture: \" + splatmapUrl);\r\n\r\n                //const temporaryTexture = this.textureDetailSurfaceImp;\r\n                const splatmapTexture = new Texture( splatmapUrl, this.scene );\r\n                const matwrapper = new TerrainMaterialWrapper( this, splatmapTexture, <Texture> this.splatmapAtlasTexture, <Texture> this.splatmapAtlasNormalsTexture);\r\n                (<any> root)._splatmapMaterial = matwrapper.material;\r\n\r\n                const createSplatmapMaterial = () => {\r\n\r\n                    matwrapper.splatMap = splatmapTexture;\r\n\r\n                    let uvScale = [ 225, 225 ]; //[225, 225]; // [113.36293971960356 * 2, 112.94475604662343 * 2];\r\n                    const bounds = rootmd ? rootmd[\"tile:bounds_m\"] : null;\r\n                    if ( bounds ) {\r\n                        //console.debug(\"Bounds: \", bounds);\r\n                        uvScale = [ bounds[2] - bounds[0], bounds[3] - bounds[1] ];\r\n                    }\r\n\r\n                    ( <Texture> matwrapper.material.albedoTexture ).uScale = (( 1.0 / ( uvScale[0])) * ( 127/128 )) ; // + 1\r\n                    ( <Texture> matwrapper.material.albedoTexture ).vScale = (( 1.0 / ( uvScale[1])) * ( 127/128 )) ; // + 1\r\n                    ( <Texture> matwrapper.material.albedoTexture ).uOffset = 0.5; //  + (1 / uvScale[0]);\r\n                    ( <Texture> matwrapper.material.albedoTexture ).vOffset = 0.5; // - ( 0.5/128 ); // 1 / root._splatmapMaterial.albedoTexture.getSize().height);\r\n                    /*if (mesh.material.bumpTexture) {\r\n                        mesh.material.bumpTexture.uScale = 1.0 / uvScale[0];\r\n                        mesh.material.bumpTexture.vScale = 1.0 / uvScale[1];\r\n                        mesh.material.bumpTexture.uOffset = 0.5;\r\n                        mesh.material.bumpTexture.vOffset = 0.5;\r\n                    }*/\r\n\r\n                    //(<any> root)._splatmapMaterial._splatmapMaterial.freeze();\r\n                }\r\n\r\n                // Wait for texture observable to create material (trying to avoid freeze time)\r\n                //if (splatmapTexture.isReady()) {\r\n                //    createSplatmapMaterial();\r\n                //} else {\r\n                //    let onLoadObservable = splatmapTexture.onLoadObservable;\r\n                //    onLoadObservable.addOnce(() => {\r\n                //        createSplatmapMaterial();\r\n                //    });\r\n                //}\r\n                createSplatmapMaterial();\r\n\r\n            }\r\n        }\r\n\r\n        let replaced = false;\r\n        if ( mesh && mesh.metadata && mesh.metadata.gltf && mesh.metadata.gltf.extras ) {\r\n\r\n            const metadata = mesh.metadata.gltf.extras;\r\n\r\n            mesh.isBlocker = true;\r\n\r\n            if ( metadata[\"ddd:material\"] && !( \"ddd:text\" in metadata )) {\r\n                let key = metadata[\"ddd:material\"];\r\n\r\n                //mesh.renderingGroupId = 1;\r\n\r\n                if ( key === \"WaterBasicDaytime\" ) {\r\n                    //console.debug(metadata[\"ddd:path\"]);\r\n                    // FIXME: Weak condition to identify the water mesh inside an instance\r\n                    //if ( metadata[\"ddd:path\"].startsWith( \"Catalog Group\" )) {\r\n                    if ( metadata[\"ddd:path\"].indexOf( \"/DDDInstance\" ) >= 0) {\r\n                        key = \"WaterInstanced\";\r\n                    }\r\n                }\r\n\r\n                if (key == 'WaterBasicDaytime' || key == 'Water4Advanced' || key == 'WaterInstanced') {\r\n                    mesh.renderingGroupId = 2;\r\n                }\r\n\r\n                // Fonts\r\n                if ( key === \"DDDFonts-01-64\" ) {\r\n                    // Font material should be in catalog\r\n                    //this.catalog_materials[key] = this.materialText!;\r\n                } else {\r\n\r\n                    // Create font materials ad-hoc using pre-existing material albedo texture\r\n                    // (this allows font materials to be included in the format)\r\n                    if ((\"ddd:material:type\" in metadata) && (metadata['ddd:material:type'] == 'font') && !(key in this.catalog_materials)) {\r\n                        const fontAtlasTexture = (<PBRMaterial> mesh.material).albedoTexture;\r\n                        const tmw = new TextMaterialWrapper(this, fontAtlasTexture, null);\r\n                        const materialTextCustom = tmw.material;\r\n                        this.catalog_materials[key] = materialTextCustom;\r\n                    }\r\n                }\r\n\r\n                let mat = this.catalog_materials[key];\r\n\r\n                if ( !( key in this.catalog_materials ) && mesh.material ) {\r\n                    mesh.material.id = key + \"(Auto)\";\r\n                    mesh.material.name = key;\r\n                    this.addMaterialToCatalog(metadata[\"ddd:material\"], mesh.material, mesh.metadata.gltf.extras);\r\n                    mat = this.catalog_materials[key];\r\n\r\n                    if ( !( <any>root in this.depends )) {\r\n                        this.depends.push( root );\r\n                    }\r\n                }\r\n\r\n                // Add color material\r\n                /*\r\n                if (key.startsWith(\"Color\") && mesh.material && !mat) {\r\n                    console.debug(\"Adding color material \" + mesh.material + \" to catalog: \" + key);\r\n                    mat = mesh.material;\r\n                    mat.name = key;\r\n                    this.catalog_materials[key] = mat;\r\n                    //mesh.material = null;\r\n                }\r\n                */\r\n\r\n                // TODO: Indicate when to splat in metadata (partially done)\r\n                if ( this.useSplatMap && this.viewerState.dddConfig.materialsSplatmap &&\r\n                    (( \"ddd:material:splatmap\" in metadata ) && metadata[\"ddd:material:splatmap\"] === true ) &&\r\n                    ( !( \"ddd:layer\" in metadata ) || metadata[\"ddd:layer\"] === \"0\" ) &&\r\n                    ( metadata[\"ddd:material\"] === \"Park\" || metadata[\"ddd:material\"] === \"Grass\" || metadata[\"ddd:material\"] === \"Terrain\" ||\r\n                     metadata[\"ddd:material\"] === \"Ground\" || metadata[\"ddd:material\"] === \"Ground Clear\" || metadata[\"ddd:material\"] === \"Dirt\" || metadata[\"ddd:material\"] === \"Garden\" ||\r\n                     metadata[\"ddd:material\"] === \"Forest\" || metadata[\"ddd:material\"] === \"Sand\" ||\r\n                     metadata[\"ddd:material\"] === \"Rock\" || metadata[\"ddd:material\"] === \"Rock Orange\" ||\r\n                     ( metadata[\"ddd:material\"] === \"WayPedestrian\" && ( !( \"ddd:area:type\" in metadata ) || ( metadata[\"ddd:area:type\"] !== \"stairs\" ))) ||\r\n                     metadata[\"ddd:material\"] === \"Wetland\" || metadata[\"ddd:material\"] === \"Asphalt\" )) {\r\n\r\n                    if (( <any>root )._splatmapMaterial ) {\r\n                        if ( mesh.material && mesh.material !== ( <any>root )._splatmapMaterial ) {\r\n                            try {\r\n                                mesh.material.dispose();\r\n                            } catch (e) {\r\n                                console.debug(\"Could not dispose material: \" + mesh.id);\r\n                            }\r\n                        }\r\n\r\n                        mesh.material = ( <any>root )._splatmapMaterial;\r\n                        //( <any>root )._splatmapMaterial.renderingGroupId = 1;\r\n\r\n                        // Add meshes to the reflection probe (Expensive!)\r\n                        //this.envReflectionProbe.renderList.push(mesh);\r\n                    } else {\r\n                        //this.depends.push(root);\r\n                        //return;\r\n                    }\r\n\r\n\r\n                } else if (( key in this.catalog_materials )) {  // && mesh.material\r\n\r\n                    if ( mesh.material && mesh.material !== mat && mat ) {\r\n                        const mmat = mesh.material;\r\n                        mesh.material = null;\r\n                        mmat.dispose();  // Causes white materials? but cleans all outstanding materials\r\n                    }\r\n                    if ( mat ) {\r\n                        mesh.material = mat;\r\n                    }\r\n\r\n                } else {\r\n                    //console.debug(\"Material not found in catalog: \" + key);\r\n                    // TODO: Will never happen if not showing materials (dependencies should be to the particular instance or material)\r\n\r\n                    this.depends.push( root );\r\n                }\r\n            }\r\n\r\n\r\n            if ( metadata[\"ddd:light:color\"]) {\r\n                replaced = true;\r\n\r\n                //lightFlare.billboardMode = 7;\r\n                /*\r\n                var light = new PointLight(\"light_\" + mesh.id, mesh.position, this.scene);\r\n                light.parent = mesh.parent;\r\n                light.position = mesh.position;\r\n                light.position.y = light.position.z + 1;\r\n                light.intensity = 20;\r\n                light.diffuse = new Color3(1, 0, 0);\r\n                light.specular = new Color3(0, 1, 0);\r\n                */\r\n\r\n                mesh.parent = null;\r\n                mesh.dispose();\r\n\r\n            } else if ( metadata[\"ddd:text\"]) {\r\n\r\n                let newMesh = null;\r\n\r\n                const showText = this.viewerState.sceneTextsEnabled;\r\n                if ( showText ) {\r\n                    // Text should be (possibly) exported as meshes by the generator.\r\n                    const textWidth = metadata[\"ddd:text:width\"];\r\n                    const textHeight = metadata[\"ddd:text:width\"];\r\n                    newMesh = MeshBuilder.CreatePlane( \"text_\" + mesh.id, { width: textWidth, height: textHeight, sideOrientation: Mesh.DOUBLESIDE, updatable: true }, this.scene );\r\n                    newMesh.parent = null;\r\n                    newMesh.parent = mesh.parent; // .parent;\r\n                    newMesh.scaling = mesh.scaling.clone();\r\n                    newMesh.rotationQuaternion = mesh.rotationQuaternion!.clone();\r\n                    newMesh.position = mesh.position.clone();\r\n\r\n                    newMesh.rotate( Vector3.Right(), Math.PI / 2.0, Space.LOCAL );\r\n                    newMesh.scaling.y *= 0.35;\r\n\r\n                    //Create dynamic texture\r\n                    const texture = new DynamicTexture( \"dynamicTexture_text_\" + mesh.id, { width:256, height:128 }, this.scene, true );\r\n                    //var textureContext = texture.getContext();\r\n                    const font = \"bold 36px serif\";\r\n                    const text = metadata[\"ddd:text\"];\r\n                    texture.drawText( text, 128.0 - ( text.length * 8 ), 60, font, \"blue\", \"transparent\", true, true );\r\n\r\n                    const material = new StandardMaterial( \"Mat\" + mesh.id, <Scene> this.scene );\r\n                    material.diffuseTexture = texture;\r\n                    material.diffuseTexture.hasAlpha = true;\r\n                    material.useAlphaFromDiffuseTexture = true;\r\n                    material.transparencyMode = 1;  // ALPHA_TEST\r\n                    newMesh.material = material;\r\n\r\n                    newMesh.isPickable = false;\r\n                    //newMesh.metadata = {gltf: {extras: metadata}};  // Doesn't seem to work and/or freezes the app\r\n                    //delete newMesh.metadata['ddd:text'];\r\n                }\r\n\r\n                mesh.parent = null;\r\n                mesh.dispose();\r\n                mesh = <Mesh> newMesh;\r\n\r\n            } else if ( metadata[\"ddd:instance:key\"]) {\r\n                \r\n                replaced = true;\r\n                const key = metadata[\"ddd:instance:key\"];\r\n\r\n                if (key == \"lamppost-default-1\") {\r\n                    \r\n                    //console.debug(\"TEST: lamppost-default-1\");\r\n\r\n                    // Create a flare quad\r\n                    /*\r\n                    const quad = MeshBuilder.CreatePlane( \"quad_\" + mesh.id, { width: 4.5, height: 4.5, sideOrientation: Mesh.DOUBLESIDE, updatable: true, frontUVs: new Vector4(0, 0, 1, 1) }, this.scene );\r\n                    quad.material = this.materialFlare;\r\n                    quad.billboardMode = 7;\r\n                    quad.receiveShadows = false;\r\n                    \r\n                    const scaleMatrix = Matrix.Compose( new Vector3( 1, 1, -1 ), new Quaternion( 0, 0, 0, 0 ), new Vector3( 0, 0, 0 )); //Matrix.Scaling(-1, 1, 1);\r\n                    const nodeMatrix = mesh.parent!.computeWorldMatrix( true );\r\n                    let pos = Vector3.TransformCoordinates(mesh.position.add(new Vector3(0, 5.75, 0)), nodeMatrix);\r\n                    quad.position = pos;\r\n                    */\r\n\r\n\r\n                    /*\r\n                    if (this._decimator++ % 40 == 0) {\r\n                        //lightFlare.billboardMode = 7;\r\n                        const light = new PointLight(\"light_\" + mesh.id, mesh.position.add(new Vector3(0, 4.0, 0)), this.scene);\r\n                        light.parent = mesh.parent;\r\n                        //light.position = mesh.position;\r\n                        //light.position.y = light.position.y + 1;\r\n                        light.intensity = 50.0;\r\n                        light.radius = 0.15;\r\n                        light.range = 12.0;\r\n                        light.shadowEnabled = false;\r\n                        light.diffuse = new Color3(240.0/255.0, 234.0/255.0, 129.0/255.0);\r\n                        light.specular = new Color3(255.0/255.0, 250.0/255.0, 99.0/255.0);\r\n                    }\r\n                    */\r\n                }\r\n\r\n                // Ignored objects (devel purpose)\r\n                const ignored_keys: string[] = [];  // [\"building-window\"]\r\n                if ( ignored_keys.indexOf( key ) >= 0 ) {\r\n                    mesh.parent = null;\r\n                    mesh.dispose();\r\n                    return null;\r\n                }\r\n\r\n                if ( this.catalog[key]) {\r\n\r\n                    \r\n                    if ( \"ddd:instance:buffer:matrices\" in metadata ) {\r\n                        this.instanceAsThinInstanceBuffers( key, root, mesh );\r\n                    } else {\r\n                        //this.instanceAsNode(root, key, mesh);\r\n                        this.instanceAsThinInstance( key, root, mesh );  // note this removes the mesh\r\n                    }\r\n\r\n                } else {\r\n                    // Instance not found. Mark this root for re processing and exit.\r\n                    //console.debug(\"Instance key not found in catalog: : \" + key);\r\n                    this.depends.push( root );\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            this.depends.push( root );\r\n\r\n        }\r\n\r\n\r\n        if ( mesh ) {  // && !replaced\r\n\r\n            // Babylon Occlusion doens't seem to work well for ddd use case\r\n            //mesh.occlusionType = AbstractMesh.OCCLUSION_TYPE_OPTIMISTIC;\r\n\r\n            /*\r\n            if (mesh.simplify && mesh.getTotalVertices() > 0 && !replaced) {\r\n                mesh.simplify([{ quality: 0.1, distance: 100 }, ], false, SimplificationType.QUADRATIC);\r\n            }\r\n            */\r\n\r\n            mesh.cullingStrategy = AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\r\n            //mesh.freezeWorldMatrix();\r\n\r\n            //if (mesh.material) { mesh.material.needDepthPrePass = true; }  // causes some objects with textures to show black\r\n\r\n            for ( const child of [...mesh.getChildren()] ) {\r\n                let processed = this.processMesh( root, <Mesh> child );\r\n                /*\r\n                if (processed == null) {\r\n                    //console.debug(\"Removing child: \" + children.id);\r\n                    children.parent = null;\r\n                    children.dispose();\r\n                }\r\n                */\r\n            }\r\n\r\n            /*\r\n            // Adding shadows for ground here was done as a test, but we may incur adding them\r\n            // multiple times, and they should be managed. Performance impact needs testing.\r\n            if ( this.shadowGenerator && mesh.getBoundingInfo) {\r\n                this.shadowGenerator.getShadowMap()!.renderList!.push( mesh );\r\n            }\r\n            */\r\n        }\r\n\r\n        /*\r\n        if (mesh === root) {\r\n            //this.octree = this.scene.createOrUpdateSelectionOctree(); // capacity, maxDepth);\r\n        }\r\n        */\r\n\r\n        return mesh;\r\n    }\r\n\r\n\r\n\r\n    instanceAsThinInstance( key: string, root: Mesh, node: Mesh ): void {\r\n\r\n        const instance = this.catalog[key];\r\n        const meshes = instance.getChildMeshes();\r\n\r\n        for ( const mesh of meshes ) {\r\n\r\n            if ( mesh && mesh.metadata && mesh.metadata.gltf && mesh.metadata.gltf.extras ) {\r\n                const metadata = mesh.metadata.gltf.extras;\r\n                if ( metadata[\"ddd:light:color\"]) {\r\n                    // TODO: include the child instance\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            if (mesh.getTotalVertices() == 0 || mesh.getTotalIndices() == 0) {\r\n                //console.log(\"Mesh with no vertices or indices: \", mesh);\r\n                if (mesh.getChildMeshes().length == 0) {\r\n                    //console.log(\"Empty mesh with no vertices or indices: \", mesh);\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            // Get root\r\n            const instanceRootKey = root.id + \"_\" + key + \"_\" + mesh.id; // root.id + \"_\" +  // TODO! do not clone but keep groups!\r\n            let meshInstanceRoot = this.instanceRoots[instanceRootKey];\r\n            if ( !meshInstanceRoot ) {\r\n                //console.debug(\"Creating instanceroot for: \" + instanceRootKey);\r\n                instance.setEnabled( true );\r\n                meshInstanceRoot = <Mesh> mesh.clone( instanceRootKey, null, true );  // (do not clone children = true)\r\n                meshInstanceRoot = meshInstanceRoot.makeGeometryUnique();  // Can we do this without cloning geometry? do thin instances work that way?\r\n\r\n                const cloneMat = meshInstanceRoot.material;\r\n                if ( cloneMat ) {\r\n                    meshInstanceRoot.material = null;\r\n                    cloneMat.dispose();\r\n                }\r\n\r\n                //meshInstanceRoot.metadata.gltf.extras['ddd:instance:key'] = \"_MESH_INSTANCE_ROOT\";  // WARN:seems this extras are being shared among instances\r\n                meshInstanceRoot.toLeftHanded();\r\n                //meshInstanceRoot.rotate(Vector3.Up(), Math.PI / 2);\r\n                //meshInstanceRoot.scaling = new Vector3(1, 1, -1);\r\n                this.instanceRoots[instanceRootKey] = meshInstanceRoot;\r\n                meshInstanceRoot.parent = root;\r\n                //meshInstanceRoot.setPivotMatrix(meshInstanceRoot.computeWorldMatrix(true));  // Seems to cause problems, but should not :? (freezing may be involved)\r\n\r\n                this.processMesh( root, meshInstanceRoot );\r\n\r\n                // After postprocessing, do not add this mesh as instance if it's empty\r\n                if (mesh.getTotalVertices() == 0 || mesh.getTotalIndices() == 0) continue;\r\n\r\n                // Enable shadows for the instances if shadows are set\r\n                if ( this.shadowGenerator ) {\r\n                    this.shadowGenerator.getShadowMap()!.renderList!.push( meshInstanceRoot );\r\n                }\r\n\r\n                //meshInstanceRoot.setEnabled(false);\r\n                //meshInstanceRoot.addLODLevel(200, null);\r\n\r\n                instance.setEnabled( false );\r\n                //instance.dispose();\r\n            }\r\n\r\n            // Transform\r\n            /*\r\n            let localPos = mesh.position;\r\n            let localRot = mesh.rotationQuaternion;\r\n            let localScaling = mesh.scaling;\r\n            localScaling.x = -1 * localScaling.x;\r\n            var meshMatrix = Matrix.Compose(localScaling, localRot, localPos);\r\n            */\r\n\r\n            const scaleMatrix = Matrix.Compose( new Vector3( 1, 1, -1 ), new Quaternion( 0, 0, 0, 0 ), new Vector3( 0, 0, 0 )); //Matrix.Scaling(-1, 1, 1);\r\n\r\n            //const meshInstanceMatrix = meshMatrix.multiply( Matrix.Invert(meshInstanceRootMatrix));\r\n            //const meshMatrix = mesh.matrix\r\n            \r\n            const nodeMatrix = node.computeWorldMatrix( true );\r\n            \r\n            let matrix = nodeMatrix;\r\n            matrix = scaleMatrix.multiply(matrix);\r\n            \r\n            const meshInstanceRootMatrix = meshInstanceRoot.computeWorldMatrix( true );\r\n\r\n            const meshMatrix = mesh.computeWorldMatrix( true );\r\n            let meshMatrixRelInstanceRoot = meshMatrix.multiply( Matrix.Invert(instance.computeWorldMatrix(true)));\r\n            meshMatrixRelInstanceRoot = meshMatrixRelInstanceRoot;\r\n\r\n            matrix = meshMatrixRelInstanceRoot.multiply( matrix );\r\n            \r\n            //let meshInstanceMatrix = scaleMatrix.multiply(meshInstanceRootMatrix);  // meshInstanceMatrix.multiply(meshMatrix);\r\n            matrix = matrix.multiply(Matrix.Invert(meshInstanceRootMatrix));\r\n            //console.debug(\"Creating instance: \" + meshInstanceRoot.id);\r\n            \r\n            // TODO: Improve performance by not updating GPU buffers here (thinInstanceAdd), only in last call for this instanceRoot.\r\n            meshInstanceRoot.thinInstanceAdd( matrix );\r\n\r\n            meshInstanceRoot.freezeWorldMatrix();\r\n\r\n\r\n        }\r\n\r\n        node.parent = null;\r\n        node.dispose();\r\n\r\n    }\r\n\r\n    instanceAsThinInstanceBuffers( key: string, root: Mesh, node: Mesh ): void {\r\n\r\n        //console.debug( \"Creating thin instance buffers for: \" + key );\r\n\r\n        const instance = this.catalog[key];\r\n        const meshes = instance.getChildMeshes();\r\n        const metadataNode = node.metadata.gltf.extras;\r\n\r\n        for ( const mesh of meshes ) {\r\n\r\n            const metadata = mesh.metadata.gltf.extras;\r\n            if ( metadata[\"ddd:light:color\"]) {\r\n                // TODO: include the child instance\r\n                continue;\r\n            }\r\n\r\n            // Get root\r\n            const instanceRootKey = root.id + \"_\" + key + \"_\" + mesh.id; // root.id + \"_\" +  // TODO! do not clone but keep groups!\r\n            let meshInstanceRoot = this.instanceRoots[instanceRootKey];\r\n            if ( !meshInstanceRoot ) {\r\n                //console.debug(\"Creating instanceroot for: \" + instanceRootKey);\r\n                instance.setEnabled( true );\r\n                meshInstanceRoot = <Mesh> mesh.clone( instanceRootKey, null, true );\r\n                meshInstanceRoot = meshInstanceRoot.makeGeometryUnique();  // Can we do this without cloning geometry? do thin instances work that way?\r\n\r\n                const cloneMat = meshInstanceRoot.material;\r\n                if ( cloneMat ) {\r\n                    meshInstanceRoot.material = null;\r\n                    cloneMat.dispose();\r\n                }\r\n\r\n                //meshInstanceRoot.metadata.gltf.extras['ddd:instance:key'] = \"_MESH_INSTANCE_ROOT\";  // WARN:seems this extras are being shared among instances\r\n                \r\n                // This section is critical. The bakeCurrentTransformIntoVertices in the middle may be too.\r\n                // This transform works together with the meshinstance transform below.\r\n                //meshInstanceRoot.toLeftHanded();\r\n                //meshInstanceRoot.bakeCurrentTransformIntoVertices();\r\n                //meshInstanceRoot.rotate(Vector3.Right(), Math.PI / 2);\r\n                //meshInstanceRoot.rotate( Vector3.Up(), -Math.PI / 2 );\r\n                //meshInstanceRoot.scaling = new Vector3( 1, -1, 1 );\r\n                meshInstanceRoot.rotate( Vector3.Right(), -Math.PI / 2 );\r\n                meshInstanceRoot.rotate( Vector3.Up(), Math.PI );\r\n                meshInstanceRoot.rotate( Vector3.Forward(), Math.PI );\r\n                meshInstanceRoot.bakeCurrentTransformIntoVertices();\r\n                //meshInstanceRoot.flipFaces(true);\r\n\r\n                // Apply tht transformation (without baking) to the meshInstanceRoot, this \r\n                // (somewhat surprisingly) combined with the instance matrix.\r\n                meshInstanceRoot.rotate( Vector3.Up(), Math.PI);\r\n                meshInstanceRoot.rotate(Vector3.Right(), -Math.PI / 2);\r\n                meshInstanceRoot.scaling = new Vector3( 1, -1, 1 );\r\n\r\n                this.instanceRoots[instanceRootKey] = meshInstanceRoot;\r\n                meshInstanceRoot.parent = root;\r\n                //meshInstanceRoot.position = root.computeWorldMatrix(true);  // Seems to cause problems, but should not :? (freezing may be involved)\r\n\r\n                this.processMesh( meshInstanceRoot, meshInstanceRoot );\r\n\r\n                // Enable shadows for the instances if shadows are set\r\n                if ( this.shadowGenerator ) {\r\n                    this.shadowGenerator.getShadowMap()!.renderList!.push( meshInstanceRoot );\r\n                }\r\n\r\n                //meshInstanceRoot.setEnabled(false);\r\n                // TODO: LOD should be controlled by DDD metadata, also, some LODding may be (better?) left to DDD format/renderer\r\n                meshInstanceRoot.addLODLevel(300, null);\r\n\r\n                instance.setEnabled( false );\r\n                //instance.dispose();\r\n            }\r\n\r\n            \r\n            const bufferMatrices = metadataNode[\"ddd:instance:buffer:matrices\"];\r\n\r\n            //console.debug(\"Thin instance buffers for: \" + key + \" / \" + mesh.id + \"  (\" + (bufferMatrices.length / 16) + \" matrices)\" );\r\n            \r\n            // Transform each node (test only)\r\n            // DEPRECATED: This is very slow, whereas directly loading the matrices is very fast.\r\n            /*\r\n            const adaptRotation = Quaternion.FromEulerAngles(-Math.PI / 2, Math.PI, 0);\r\n            const adaptMatrix = Matrix.Compose( new Vector3( 1, -1, 1 ), adaptRotation, new Vector3( 0, 0, 0 )); //Matrix.Scaling(-1, 1, 1);\r\n            for ( let i = 0; i < bufferMatrices.length; i += 16 ) {\r\n                const nodeMatrix = Matrix.FromArray( bufferMatrices, i );\r\n                //let matrix = adaptMatrix.multiply( nodeMatrix );\r\n                let matrix = nodeMatrix.multiply(adaptMatrix);\r\n                meshInstanceRoot.thinInstanceAdd( matrix );\r\n            }\r\n            */\r\n\r\n            // Load all matrices directly into buffer\r\n            const bufferMatricesArray = new Float32Array( bufferMatrices.length );\r\n            bufferMatricesArray.set( bufferMatrices );\r\n            meshInstanceRoot.thinInstanceSetBuffer( \"matrix\", bufferMatricesArray, 16, true );\r\n\r\n            meshInstanceRoot.freezeWorldMatrix();\r\n\r\n        }\r\n\r\n        node.parent = null;\r\n        node.dispose();\r\n\r\n    }\r\n\r\n    instanceAsNode( key: string, _root: Mesh, mesh: Mesh ): void {\r\n        //console.debug(\"Replacing mesh: \" + key);\r\n        const newMesh = new TransformNode( mesh.id + \"_instance\", this.scene );  // new Mesh(\"chunk_\" + tileKey, this.scene);\r\n        //let newMesh = mesh;\r\n        //newMesh.geometry = null;\r\n        newMesh.parent = mesh.parent;\r\n        newMesh.position = mesh.position;\r\n        newMesh.rotationQuaternion = mesh.rotationQuaternion;\r\n        newMesh.scaling = mesh.scaling;\r\n\r\n        //newMesh.absoluteScaling = mesh.absoluteScaling;\r\n        /*for (let cc of mesh.getChildren()) {\r\n            cc.parent = null;\r\n            cc.dispose();\r\n        }*/\r\n        if ( !newMesh.metadata ) { newMesh.metadata = {}; }\r\n        if ( mesh.metadata && mesh.metadata.gltf ) {\r\n            newMesh.metadata.gltf = mesh.metadata.gltf;\r\n            //newMesh.metadata.gltf.extras['ddd:instance:key'] = null;\r\n        }\r\n        mesh.dispose();\r\n        this.catalog[key].setEnabled( true );\r\n        const instance = this.catalog[key].clone(); // createInstance(mesh.id + \"_instanced\");\r\n        this.catalog[key].setEnabled( false );\r\n        instance.metadata.gltf.extras[\"ddd:instance:key\"] = null;\r\n        instance.id = mesh.id + \"_clone\";\r\n        //instance.isVisible = true;\r\n        instance.parent = newMesh;\r\n        newMesh.rotate( new Vector3( 1, 0, 0 ), Math.PI / 2, Space.LOCAL );\r\n        instance.setEnabled( true );\r\n        //mesh = newMesh;\r\n    }\r\n\r\n    /**\r\n     * Dispose this DDDViewer instance.\r\n     * @todo Ensure all events, processes and objects are disconnected and disposed.\r\n     */\r\n    dispose(): void {\r\n        if ( this.scene ) {\r\n            console.debug( \"Disposing SceneViewer scene.\" );\r\n            this.scene.dispose();\r\n            //this.scene = null;\r\n        }\r\n        if ( this.engine ) {\r\n            console.debug( \"Disposing SceneViewer 3D engine (BabylonJS).\" );\r\n            this.engine.dispose();\r\n            //this.engine = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * DDDViewer main update callback, this is called every frame by the engine.\r\n     * Children object update method is called recursively from here (sequencer, processes, layers).\r\n     * @param deltaTime\r\n     */\r\n    update(deltaTime: number): void {\r\n\r\n        const positionWGS84 = this.positionWGS84();\r\n        if ( positionWGS84 ) {\r\n            this.viewerState.positionWGS84 = positionWGS84;\r\n\r\n            this.viewerState.positionTileZoomLevel = 17;\r\n            if ( this.viewerState.positionGroundHeight !== null && this.viewerState.positionGroundHeight < 50 ) {\r\n                this.viewerState.positionTileZoomLevel = 18;\r\n            }\r\n\r\n            this.updateElevation();\r\n\r\n            if ( this.camera ) {\r\n                if ( this.camera instanceof ArcRotateCamera ) {\r\n                    let heading = -90 + ( -this.camera.alpha * ( 180.0 / Math.PI ));\r\n                    heading = ( heading % 360 + 360 ) % 360;\r\n                    this.viewerState.positionHeading = heading;\r\n\r\n                    const tilt = this.camera.beta * ( 180.0 / 3.14159265359 );\r\n                    this.viewerState.positionTilt = tilt;\r\n\r\n                } else if ( this.camera instanceof TargetCamera ) {\r\n\r\n                    let heading = ( this.camera.rotation.y * ( 180.0 / Math.PI ));\r\n                    heading = ( heading % 360 + 360 ) % 360;\r\n                    this.viewerState.positionHeading = heading;\r\n\r\n                    const yaw = this.camera.rotation.x * ( 180.0 / 3.14159265359 );\r\n                    this.viewerState.positionTilt = 90.0 - yaw;\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.cameraController) {\r\n            this.cameraController.update(deltaTime);\r\n        }\r\n\r\n        if ( this.camera ) {\r\n            let positionScene = this.camera.position.asArray();\r\n            positionScene = [ positionScene[0], positionScene[1], positionScene[2] ];  // Copy array\r\n            this.viewerState.positionScene = positionScene;\r\n\r\n            if ( this.envReflectionProbe ) {\r\n                this.envReflectionProbe.position = this.camera.position.clone();\r\n            }\r\n        }\r\n\r\n        this.updateSceneDatetime(deltaTime);\r\n        this.sequencer.update(deltaTime);\r\n        this.processes.update(deltaTime);\r\n        this.layerManager.update(deltaTime);\r\n\r\n        // Update render metrics\r\n        this.viewerState.sceneFPS = this.engine.getFps(); // this.engine.getFps().toFixed( 1 );\r\n        this.viewerState.sceneDrawCalls = this.sceneInstru ? this.sceneInstru.drawCallsCounter.current : 0;\r\n        this.viewerState.sceneTriangles = this.sceneInstru ? this.scene.getActiveIndices() / 3 : 0;\r\n\r\n    }\r\n\r\n    updateSceneDatetime(deltaTime: number) {\r\n\r\n        // Run time\r\n        // TODO: this currently requires a minimum elapsed time so Date.setSeconds work. This approach accumulates error.\r\n        const updateInterval = 100; // 5000;\r\n        const maxUpdateElapsed = 2000;  // 2 sec\r\n        const updateSceneTime = true;\r\n\r\n        if ( updateSceneTime ) {\r\n            const currentDateUpdate = new Date().getTime();\r\n\r\n            if (( currentDateUpdate - this.lastDateUpdate ) > updateInterval ) {\r\n\r\n                let updateElapsed = ( currentDateUpdate - this.lastDateUpdate );\r\n                this.lastDateUpdate = currentDateUpdate;\r\n\r\n                if ( updateElapsed > maxUpdateElapsed ) { updateElapsed = maxUpdateElapsed; }\r\n                let scaledElapsed = ( updateElapsed / 1000 ) * this.viewerState.timeScale;\r\n                // FIXME: Should use sun position, not hours (also, check with other time zones)\r\n                if (this.viewerState.positionDate.getHours() < 5) { scaledElapsed *= 3; }  // Faster pace at night\r\n\r\n                this.viewerState.positionDate.setSeconds( this.viewerState.positionDate.getSeconds() + scaledElapsed );\r\n                this.viewerState.positionDateSeconds = this.viewerState.positionDate.getTime() / 1000;\r\n\r\n                this.lightSetupFromDatePos();\r\n            }\r\n        }\r\n\r\n        //this.skybox.computeWorldMatrix();  // only needed if scene.freezeActiveMeshes is true\r\n    }\r\n\r\n    sceneToWGS84( coords: number[]): number[] {\r\n        //let wgs84Pos = this.originShiftWGS84;\r\n        //const point = olProj.transform([coords[0], coords[2]], this.projection, 'EPSG:4326');\r\n        const point = this.projection!.inverse([ coords[0], coords[2] ]);\r\n        return [ point[0], point[1], coords[1] ];\r\n    }\r\n\r\n    wgs84ToScene( coords: number[]) : number[] {\r\n        //const point = olProj.transform(coords, 'EPSG:4326', this.projection);\r\n        const point = this.projection!.forward( coords );\r\n\r\n        return [ point[0], coords[2], point[1] ];\r\n    }\r\n\r\n    positionWGS84() : number[] {\r\n        const scenePos = this.camera!.position.asArray();\r\n        const wgs84Pos = this.sceneToWGS84([ scenePos[0], scenePos[1], scenePos[2] ]);\r\n        return wgs84Pos;\r\n        /*\r\n        const extent = this.map.getView().calculateExtent(this.map.getSize());\r\n        let point = [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\r\n        */\r\n    }\r\n\r\n    parsePositionString( posString: string ): ScenePosition {\r\n        //console.debug(\"Parsing: \" + posString);\r\n\r\n        const result = new ScenePosition();\r\n\r\n        try {\r\n            // Parse at location\r\n            //http://localhost:8080/maps/@42.1354407,-0.4126472,17.0z\r\n            const href = posString;\r\n            const regexp = /.*@([0-9.\\\\-]+),([0-9.\\\\-]+)((,(([0-9.\\\\-]+)[ayhtz]))*).*/;\r\n            const matches = href.match( regexp );\r\n            //console.debug(matches);\r\n\r\n            if ( matches && matches.length >= 3 ) {\r\n                result.positionWGS84 = [ parseFloat( matches[2]),parseFloat( matches[1]) ];\r\n            }\r\n            if ( matches && matches.length >= 4 ) {\r\n                for ( const match of matches[3].split( \",\" )) {\r\n                    if ( match === \"\" ) { continue; }\r\n                    const value = parseFloat( match.slice( 0, -1 ));\r\n                    const code = match.slice( -1 );\r\n                    if ( code === \"z\" ) {\r\n                        result.positionTileZoomLevel = value;\r\n                    } else if ( code === \"a\" ) {\r\n                        result.positionGroundHeight = value;\r\n                    } else if ( code === \"h\" ) {\r\n                        result.positionHeading = value;\r\n                    } else if ( code === \"t\" ) {\r\n                        result.positionTilt = value;\r\n                    }\r\n                    //console.debug(value, code);\r\n                }\r\n            }\r\n        } catch( e ) {\r\n            console.debug( \"Error parsing location from href: \" + e );\r\n        }\r\n\r\n        //let positionWgs84 = this.getViewerState().positionWGS84;\r\n        return result;\r\n    }\r\n\r\n    positionString(heightPrecision: number = 0): string | null {\r\n        // TODO: This would not be a SceneViewer method, a utility module at most\r\n\r\n        // /@43.2505933,5.3736631,126a,35y,20.08h,56.42t/\r\n        const point = this.positionWGS84();\r\n        //const zoom = this.map.getView().getZoom();\r\n\r\n        //let heading = (this.camera.rotation.y * (180.0 / 3.14159265359));\r\n        //heading = (heading % 360 + 360) % 360;\r\n        const heading = this.viewerState.positionHeading;\r\n\r\n        //let yaw = this.camera.rotation.x * (180.0 / 3.14159265359);\r\n        const tilt = this.viewerState.positionTilt;\r\n\r\n        //let height = this.camera.position.y;\r\n        const groundHeight = this.viewerState.positionGroundHeight;\r\n        if ( groundHeight === null ) {\r\n            //return this.camera.position.y;\r\n            return null;\r\n        }\r\n\r\n        let posString = \"@\" + point[1].toFixed( 7 ) + \",\" + point[0].toFixed( 7 );\r\n\r\n        const shortFormat = false;\r\n        if ( shortFormat ) {\r\n            posString = posString + \",\" + groundHeight.toFixed(heightPrecision) + \"m\";   // If heading and yaw is 0, GM uses 'm' (seem MSL m or Ground m)\r\n        } else {\r\n            posString = posString + \",\" + groundHeight.toFixed(heightPrecision) + \"a\";    // seems Ground M  ... (not WGS84 height (with EGM))\r\n            posString = posString + \",\" + \"35\" + \"y\";    // ?\r\n            posString = posString + \",\" + heading.toFixed( 1 ) + \"h\"; // Heading\r\n            posString = posString + \",\" + tilt.toFixed( 2 ) + \"t\";    // Yaw (0 is vertical, 90 horizontal)\r\n        }\r\n        return posString;\r\n    }\r\n\r\n    /**\r\n     * Calculates ground elevation (in MSL) for a given point in the scene. Receives a Vector3,\r\n     * and uses its X and Z coordinates.\r\n     *\r\n     * FIXME: This is hitting objects other than the ground, check if masks can be used or otherwise correctly resolve ground elevation.\r\n     *        Also the 3000m limit is arbitrary. Also fails when no ground objects are available.\r\n     *        Also fails sometimes hitting invisible objects below ground (seems some non visible objects are being hit)\r\n     */\r\n    elevationMSLFromSceneCoords(coords: Vector3): [number | null, PickingInfo | null] {\r\n\r\n        const ray = new Ray( new Vector3( coords.x, -100.0, coords.z ), new Vector3( 0, 1, 0 ), 3000.0 );\r\n        \r\n        // This \"pickWithRay\" call sometimes fails with \"Uncaught TypeError: Cannot read properties of undefined (reading 'subtractToRef') at Ray.intersectsTriangle()\"\r\n        let pickResult : PickingInfo | null = null;\r\n        try {\r\n            pickResult = this.scene.pickWithRay( ray );\r\n        } catch (e) {\r\n            console.debug(\"Error picking scene with ray (in elevationMSLFromSceneCoords): \" + e);\r\n            return [null, null];\r\n        }\r\n\r\n        let terrainElevation: number | null = null;\r\n        //let terrainMesh: Mesh | null = null;\r\n\r\n        if (pickResult && pickResult.pickedMesh && pickResult.pickedMesh.id !== \"skyBox\" ) {\r\n            terrainElevation = ( pickResult.distance - 100.0 );\r\n            //terrainMesh = <Mesh> pickResult.pickedMesh;\r\n        }\r\n\r\n        return [terrainElevation, pickResult];\r\n    }\r\n\r\n    /**\r\n     * This method is called internally to update altitude and position name.\r\n     */\r\n    private updateElevation(): void {\r\n\r\n        if ( !this.camera ) return;\r\n\r\n        let [terrainElevation, terrainPickResult] = this.elevationMSLFromSceneCoords(this.camera.position);\r\n\r\n        if (terrainElevation && terrainPickResult) {\r\n\r\n            // Update also position name if possible, from position metadata\r\n            const terrainObjectRef = DDDObjectRef.fromMeshFace(<Mesh> terrainPickResult.pickedMesh, terrainPickResult.faceId);\r\n            const metadata = terrainObjectRef.getMetadata();\r\n            if (metadata && metadata[\"osm:name\"]) {\r\n                this.viewerState.positionName = metadata[\"osm:name\"];\r\n            } else {\r\n                this.viewerState.positionName = null;\r\n            }\r\n\r\n            this.viewerState.positionTerrainElevation = terrainElevation;\r\n            this.viewerState.positionGroundHeight = this.camera.position.y - terrainElevation;\r\n        } else {\r\n            //this.viewerState.positionTerrainElevation = null;\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n    positionGroundHeight() {\r\n        //const ray = new Ray(this.camera.position, new Vector3(0, -1, 0));\r\n        const ray = new Ray(new Vector3(this.camera.position.x, -100.0, this.camera.position.z), new Vector3(0, 1, 0), 3000.0);\r\n        const pickResult = this.scene.pickWithRay(ray);\r\n        if (pickResult && pickResult.pickedMesh && pickResult.pickedMesh.id !== 'skyBox') {\r\n            //console.debug(pickResult.pickedMesh.id);\r\n            return this.camera.position.y - (pickResult.distance - 100.0);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    positionTerrainElevation() {\r\n        //const ray = new Ray(this.camera.position, new Vector3(0, -1, 0));\r\n        const ray = new Ray(new Vector3(this.camera.position.x, -100.0, this.camera.position.z), new Vector3(0, 1, 0), 3000.0);\r\n        const pickResult = this.scene.pickWithRay(ray);\r\n        if (pickResult && pickResult.pickedMesh && pickResult.pickedMesh.id !== 'skyBox') {\r\n\r\n            if (pickResult.pickedMesh.metadata && pickResult.pickedMesh.metadata.gltf && pickResult.pickedMesh.metadata.gltf.extras && pickResult.pickedMesh.metadata.gltf.extras['osm:name']) {\r\n                this.viewerState.positionName = pickResult.pickedMesh.metadata.gltf.extras['osm:name'];\r\n            } else {\r\n                this.viewerState.positionName = null;\r\n            }\r\n\r\n            return (pickResult.distance - 100.0);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    */\r\n\r\n    /**\r\n     * Untested\r\n     * (from: https://gist.github.com/spite/051604efd1d971ab4b6ef1bc1ae2636e)\r\n     */\r\n    /*\r\n    _getTileFromLatLon(zoom, lat, lon) {\r\n        const width = Math.pow(2, zoom);\r\n        const height = Math.pow(2, zoom);\r\n        const latRad = (lat * Math.PI) / 180;\r\n        const x = ~~((width * (lon + 180)) / 360);\r\n        const y = ~~(((1 - Math.asinh(Math.tan(latRad)) / Math.PI) / 2.0) * height);\r\n        return {zoom, x, y};\r\n    }\r\n    */\r\n\r\n    registerProjectionForCoords( coords: Coordinate ): void {\r\n\r\n        console.debug( \"Setting Scene Geo transform for coords: \" + coords );\r\n\r\n        // Get tile grid coordinates\r\n        const coordsUtm = transform(coords, \"EPSG:4326\", \"EPSG:3857\" );\r\n        const tileCoords = this.tileGrid.getTileCoordForCoordAndZ( coordsUtm, 17 );\r\n\r\n        const tileExtent = this.tileGrid.getTileCoordExtent( tileCoords );\r\n        const tileCenter = extent.getCenter( tileExtent );\r\n        const tileCenterWGS84 = transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\r\n\r\n        // Using coords of tile center for custom projection as DDD does\r\n        this.projection = proj4.default(\r\n            \"+proj=tmerc +lat_0=\" + tileCenterWGS84[1] + \" +lon_0=\" + tileCenterWGS84[0] + \" +k_0=1 \" +\r\n            \"+x_0=0. +y_0=0. +datum=WGS84 +ellps=WGS84 \" +\r\n            \"+towgs84=0,0,0,0,0,0,0 +units=m +no_defs\" );\r\n\r\n    }\r\n\r\n    deselectMesh(): void {\r\n        if ( this.sceneSelectedMeshId ) {\r\n            //this.viewerState.selectedMesh.showBoundingBox = false;\r\n\r\n            for ( const mesh of this.highlightMeshes ) {\r\n                mesh.dispose();\r\n            }\r\n            this.highlightMeshes = [];\r\n            this.selectedMesh = null;\r\n            this.viewerState.sceneSelectedMeshId = null;\r\n        }\r\n    }\r\n\r\n    deselectObject(): void {\r\n        if ( this.selectedObject ) {\r\n            //this.viewerState.selectedMesh.showBoundingBox = false;\r\n\r\n            for ( const mesh of this.highlightMeshes ) {\r\n                mesh.dispose();\r\n            }\r\n            this.highlightMeshes = [];\r\n            this.selectedMesh = null;\r\n            this.selectedObject = null;\r\n            this.viewerState.sceneSelectedMeshId = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds a mesh by id. Currently this also searches combined indexed meshes by path).\r\n     * @param meshId\r\n     * @param node\r\n     */\r\n    /*\r\n    findMeshById( meshId: string, node: Mesh | null = null ): Mesh | null {\r\n        let children = null;\r\n        if ( node ) {\r\n            const nodeUrlId = node.id.split( \"/\" ).pop()!.replaceAll( \"#\", \"_\" );\r\n            if ( nodeUrlId === meshId ) {\r\n                return node;\r\n            }\r\n\r\n            // Search in combined indexed nodes\r\n            let metadata = DDDObjectRef.nodeMetadata(node);\r\n            let combined = false;\r\n            if (metadata) {\r\n                if ('ddd:batch:indexes' in metadata)  {\r\n                    combined = true;\r\n                    const indexes = metadata['ddd:batch:indexes'];\r\n                    // Find triangle in indexes\r\n                    for (let i = 0; i < indexes.length; i++) {\r\n                        if ('ddd:path' in metadata && metadata['ddd:path'] == meshId) {\r\n                            return node;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            children = node.getChildren();\r\n        } else {\r\n            children = this.scene.rootNodes;\r\n        }\r\n\r\n        for ( const child of children ) {\r\n            const result = this.findMeshById( meshId, <Mesh> child );\r\n            if ( result !== null ) { return result; }\r\n        }\r\n\r\n        return null;\r\n    }\r\n    */\r\n\r\n    /**\r\n     * Finds an object by id.\r\n     * TODO: Move to DDDObjectRef and just leave here a convenience method search the whole scene.\r\n     * @param meshId\r\n     * @param node\r\n     */\r\n    findObjectById(objectId: string, objectRef: DDDObjectRef | null = null): DDDObjectRef | null {\r\n\r\n        let children = null;\r\n\r\n        if (objectRef) {\r\n            //console.debug(DDDObjectRef.urlId(objectId), objectRef.getUrlId());\r\n            if (objectRef.getUrlId() === DDDObjectRef.urlId(objectId)) {\r\n                return objectRef;\r\n            }\r\n\r\n            children = objectRef.getChildren();\r\n        } else {\r\n            children = this.scene.rootNodes.map((o) => new DDDObjectRef(o));\r\n        }\r\n\r\n        for (const child of children) {\r\n            const result = this.findObjectById(objectId, child);\r\n            if (result !== null) { return result; }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    selectObject(objectRef: DDDObjectRef, highlight: boolean = true): void {\r\n\r\n        this.deselectObject();\r\n\r\n        if (!objectRef) return;\r\n\r\n        this.selectedObject = objectRef;\r\n        this.viewerState.sceneSelectedMeshId = objectRef.mesh.id;\r\n        //this.viewerState.selectedMesh.showBoundingBox = true;\r\n        //console.debug(this.viewerState.selectedMesh.metadata.gltf.extras);\r\n\r\n        if ( highlight ) {\r\n            // Highlight\r\n            //that.highlightLayer.addMesh(pickResult.pickedMesh, Color3.White()); // , true);\r\n            //pickResult.pickedMesh.material = that.materialHighlight;\r\n\r\n            // Prepare the wireframe mesh\r\n            // To disable depth test check rendering groups:  https://forum.babylonjs.com/t/how-do-i-disable-depth-testing-on-a-mesh/1159\r\n            let highlightClone = null;\r\n            if (this.selectedObject.faceIndexStart > -1) {\r\n                highlightClone = (<Mesh> objectRef.mesh).clone(); // \"highlightMesh: \" + objectRef.mesh.id, objectRef.mesh.parent, true, false);\r\n                highlightClone.makeGeometryUnique();\r\n                const indices = highlightClone.getIndices(); // true, true);\r\n                //highlightClone.unfreezeWorldMatrix();\r\n                //highlightClone.unfreezeNormals();\r\n                const newIndices = (<IndicesArray> indices).slice(this.selectedObject.faceIndexStart * 3, this.selectedObject.faceIndexEnd * 3);\r\n                /*\r\n                let newIndices: number[] = [];\r\n                for (let i = this.selectedObject.faceIndexStart * 3; i < this.selectedObject.faceIndexEnd * 3; i++) {\r\n                    newIndices.push(indices[i]);\r\n                }\r\n                */\r\n                highlightClone.setIndices(newIndices);\r\n\r\n            } else {\r\n                //console.debug(objectRef.mesh);\r\n                highlightClone = (<Mesh> objectRef.mesh).clone(objectRef.mesh.id + \" Selection\", objectRef.mesh.parent, true, false); // \"highlightMesh: \" + objectRef.mesh.id, objectRef.mesh.parent, true, true);\r\n\r\n                /*\r\n                const newMesh = new TransformNode( highlightClone.id + \"_pivot\", this.scene );  // new Mesh(\"chunk_\" + tileKey, this.scene);\r\n                //let newMesh = mesh;\r\n                //newMesh.geometry = null;\r\n                newMesh.parent = objectRef.mesh.parent;\r\n                newMesh.position = (<Mesh>objectRef.mesh).position.clone();\r\n                newMesh.rotationQuaternion = (<Mesh>objectRef.mesh).rotationQuaternion!.clone();\r\n                newMesh.scaling = (<Mesh>objectRef.mesh).scaling;\r\n                highlightClone.parent = newMesh;\r\n                highlightClone = newMesh;\r\n                */\r\n            }\r\n\r\n            highlightClone.material = this.materialHighlight;\r\n            highlightClone.isPickable = false;\r\n            //highlightClone.parent = objectRef.mesh.parent;\r\n            this.highlightMeshes.push(highlightClone);\r\n\r\n            if (this.viewerState.sceneSelectedShowNormals) {\r\n                const normals = this.showNormals(highlightClone, 0.5);\r\n                if (normals) {\r\n                    normals.parent = highlightClone;\r\n                    this.highlightMeshes.push(normals);\r\n                }\r\n            }\r\n\r\n            // This is currently NOT selecting children.\r\n            // Note, however, that combined items may be selected together if the \"combined\" node is selected.\r\n\r\n            /*\r\n            // Iterate clone recursively to set highlight material to all submeshes\r\n            const setHighlightRecursively = ( submesh: Mesh ) => {\r\n                submesh.material = this.materialHighlight;\r\n                let highlightNode = submesh.clone(\"highlight\", submesh.parent, true, false);\r\n\r\n                for ( const mc of submesh.getChildren()) {\r\n                    setHighlightRecursively( <Mesh> mc );\r\n                }\r\n                return highlightNode;\r\n            };\r\n            highlightClone = setHighlightRecursively( (<Mesh> objectRef.mesh) );\r\n            */\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // Vertex normals\r\n    showNormals(mesh: Mesh, size: number = 1, color: Color3 | null = null) {\r\n        if (!mesh.getVerticesData) return null;\r\n        var normals = <FloatArray> mesh.getVerticesData(VertexBuffer.NormalKind);\r\n        if (!normals) return null;\r\n\r\n        var positions = <FloatArray> mesh.getVerticesData(VertexBuffer.PositionKind);\r\n        color = color || Color3.Red();\r\n        size = size || 1;\r\n\r\n        var lines = [];\r\n        for (var i = 0; i < normals.length; i += 3) {\r\n            var v1 = Vector3.FromArray(positions, i);\r\n            var v2 = v1.add(Vector3.FromArray(normals, i).scaleInPlace(size));\r\n            lines.push([v1.add(mesh.position), v2.add(mesh.position)]);\r\n        }\r\n        var normalLines = MeshBuilder.CreateLineSystem(\"normalLines\", {lines: lines}, this.scene);\r\n        normalLines.color = color;\r\n        return normalLines;\r\n    }\r\n\r\n    selectMesh( mesh: Mesh, highlight: boolean ): void {\r\n\r\n        this.deselectMesh();\r\n\r\n        if ( mesh ) {\r\n            this.selectedMesh = mesh;\r\n            this.viewerState.sceneSelectedMeshId = mesh.id;\r\n            //this.viewerState.selectedMesh.showBoundingBox = true;\r\n            //console.debug(this.viewerState.selectedMesh.metadata.gltf.extras);\r\n\r\n            if ( highlight ) {\r\n                // Highlight\r\n                //that.highlightLayer.addMesh(pickResult.pickedMesh, Color3.White()); // , true);\r\n                //pickResult.pickedMesh.material = that.materialHighlight;\r\n                //pickResult.pickedMesh.material = that.materialGrass;\r\n\r\n                // Prepare the wireframe mesh\r\n                // To disable depth test check rendering groups:  https://forum.babylonjs.com/t/how-do-i-disable-depth-testing-on-a-mesh/1159\r\n                const highlightClone = mesh.clone();\r\n\r\n                // Iterate clone recursively to set highlight material to all submeshes\r\n                const setHighlightRecursively = ( submesh: Mesh ) => {\r\n                    submesh.material = this.materialHighlight;\r\n                    for ( const mc of submesh.getChildren()) {\r\n                        setHighlightRecursively( <Mesh> mc );\r\n                    }\r\n                };\r\n                setHighlightRecursively( highlightClone );\r\n\r\n                //highlightClone.material = this.materialHighlight;\r\n                highlightClone.parent = mesh.parent;\r\n                this.highlightMeshes.push( highlightClone );\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    getBoundsRecursively( node: Mesh, bounds?: BoundingInfo ) : BoundingInfo {\r\n        if ( !bounds ) {\r\n            //bounds = { minimumWorld: { x: Number.POSITIVE_INFINITY, y: Number.POSITIVE_INFINITY, z: Number.POSITIVE_INFINITY },\r\n            //    maximumWorld: { x: Number.NEGATIVE_INFINITY, y: Number.NEGATIVE_INFINITY, z: Number.NEGATIVE_INFINITY } };\r\n            bounds = new BoundingInfo(\r\n                new Vector3( Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY ),\r\n                new Vector3( Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY ));\r\n        }\r\n        if ( node.getBoundingInfo ) {\r\n            const minWorld = node.getBoundingInfo().boundingBox.minimumWorld;\r\n            const maxWorld = node.getBoundingInfo().boundingBox.maximumWorld;\r\n            if ( bounds.minimum.x > minWorld.x ) {bounds.minimum.x = minWorld.x;}\r\n            if ( bounds.minimum.y > minWorld.y ) {bounds.minimum.y = minWorld.y;}\r\n            if ( bounds.minimum.z > minWorld.z ) {bounds.minimum.z = minWorld.z;}\r\n            if ( bounds.maximum.x < maxWorld.x ) {bounds.maximum.x = maxWorld.x;}\r\n            if ( bounds.maximum.y < maxWorld.y ) {bounds.maximum.y = maxWorld.y;}\r\n            if ( bounds.maximum.z < maxWorld.z ) {bounds.maximum.z = maxWorld.z;}\r\n        }\r\n\r\n        for ( const nc of node.getChildren()) {\r\n            bounds = this.getBoundsRecursively( <Mesh> nc, bounds );\r\n        }\r\n        return bounds;\r\n    }\r\n\r\n    /*\r\n    * Find a node within a scene or node recursively.\r\n    * Criteria is a dictionary of key=value pairs. An object will match if any of the pairs matches object's metadata.\r\n    */\r\n    findNode( node: Mesh, criteria: { [key: string]: any }): Mesh | null {\r\n        //console.debug(node);\r\n        if ( criteria[\"_node_name\"] && node.id ) {\r\n            const name = node.id.split( \"/\" ).pop()!.replaceAll( \"#\", \"_\" );\r\n            if ( name === criteria[\"_node_name\"]) {\r\n                return node;\r\n            }\r\n        }\r\n        if ( node.metadata && node.metadata.gltf && node.metadata.gltf.extras ) {\r\n            const metadata = node.metadata.gltf.extras;\r\n            for ( const key in criteria ) {\r\n                if ( metadata[key] === criteria[key]) {\r\n                    return node;\r\n                }\r\n            }\r\n        }\r\n        for ( const sn of node.getChildren()) {\r\n            const result = this.findNode( <Mesh> sn, criteria );\r\n            if ( result ) { return result; }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    initCamera(): Camera {\r\n\r\n        if ( this.camera ) {\r\n            this.camera.customRenderTargets.length = 0; //4 = [];\r\n            this.camera.detachControl();\r\n            this.camera.dispose();\r\n        }\r\n\r\n        console.debug(\"Creating free camera.\");\r\n        const camera = new UniversalCamera(\"Camera\", Vector3.Zero(), this.scene);\r\n        camera.detachControl(); // Controls managed by DDD CameraController\r\n\r\n        camera.minZ = 0.5; // 1.0; // 0.1;\r\n        camera.maxZ = 4500;\r\n        camera.angularSensibility = 500.0;\r\n        camera.touchAngularSensibility = 1000.0;\r\n        //camera.touchMoveSensibility = 1.0;\r\n        camera.inertia = 0.25;\r\n        camera.keysUp.push( 87 );\r\n        camera.keysDown.push( 83 );\r\n        camera.keysLeft.push( 65 );\r\n        camera.keysRight.push( 68 );\r\n        camera.keysUpward.push( 69 );\r\n        camera.keysDownward.push( 81 );\r\n        camera.attachControl(this.engine.getRenderingCanvas(), true);\r\n        camera.fov = 45.8 * (Math.PI / 180.0);  // 35.0 might be GM, 45.8... is default  // 35 // 40 used for a long time\r\n        const positionScene = this.wgs84ToScene(this.viewerState.positionWGS84);\r\n        camera.position = new Vector3(positionScene[0], this.viewerState.positionGroundHeight + this.viewerState.positionTerrainElevation + 1, positionScene[2]);\r\n        camera.rotation = new Vector3(( 90.0 - this.viewerState.positionTilt ) * ( Math.PI / 180.0 ), this.viewerState.positionHeading * ( Math.PI / 180.0 ), 0.0 );\r\n        //camera.cameraRotation = new Vector2(/* (90.0 - this.viewerState.positionTilt) * (Math.PI / 180.0) */ 0, this.viewerState.positionHeading * (Math.PI / 180.0));\r\n        this.camera = camera;\r\n        this.setMoveSpeed(this.viewerState.sceneMoveSpeed);\r\n\r\n        this.updateRenderTargets();\r\n        if (this.shadowGenerator) {\r\n            this.shadowGenerator.splitFrustum();\r\n        }\r\n\r\n        return camera;\r\n    }\r\n\r\n    setCameraController(cc: BaseCameraController) {\r\n        this.cameraController = cc;\r\n        this.cameraController.activate();\r\n    }\r\n\r\n    setPosition(positionHeading: number, positionTilt: number, positionGroundHeight: number) {\r\n        console.warn(\"setPosition implementation is invalid, for testing purposes.\");\r\n        const positionScene = this.wgs84ToScene( this.viewerState.positionWGS84 );\r\n        this.camera.position = new Vector3( positionScene[0], this.viewerState.positionGroundHeight + this.viewerState.positionTerrainElevation + 1, positionScene[2]);\r\n        (<UniversalCamera>this.camera).rotation = new Vector3(( 90.0 - this.viewerState.positionTilt ) * ( Math.PI / 180.0 ), this.viewerState.positionHeading * ( Math.PI / 180.0 ), 0.0 );\r\n    }\r\n\r\n    updateRenderTargets(): void {\r\n        if ( this.camera && this.envReflectionProbe ) {\r\n            this.camera.customRenderTargets.push( this.envReflectionProbe.cubeTexture );\r\n        }\r\n        //this.scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(\"standardPipeline\", this.camera);\r\n    }\r\n\r\n    groundTextureLayerSetUrl( url: string ): void {\r\n        // TODO: This shall not be a global viewer setting, but a layer setting\r\n        // This method is keep here for compatibility during TS migration / refactoring\r\n\r\n        this.viewerState.sceneGroundTextureOverrideUrl = url;\r\n        (<GeoTile3DLayer> this.layerManager.layers[\"ddd-osm-3d\"]).groundTextureLayerSetUrl( url );\r\n    }\r\n\r\n    setMoveSpeed( speed: number ): void {\r\n        this.viewerState.sceneMoveSpeed = speed;\r\n        if ( this.camera && this.camera instanceof TargetCamera ) {\r\n            this.camera.speed = speed;\r\n        }\r\n    }\r\n\r\n    lightSetupFromDatePos(): void {\r\n\r\n        //this.envReflectionProbe.update(); // = new ReflectionProbe(\"envReflectionProbe\", 128, this.scene, true, true, true)\r\n        //this.envReflectionProbe.renderList.push(this.skyBox);\r\n        //this.scene.environmentTexture = this.envReflectionProbe.cubeTexture;\r\n\r\n        //console.debug(this.envReflectionProbe.cubeTexture.readPixels(0, 0));\r\n        let lightDate = new Date(this.viewerState.positionDate.getTime());\r\n        const lightSecondsOffsetTimezone = (this.viewerState.positionWGS84[0] / 180.0) * (12 * 3600);\r\n        lightDate.setSeconds(lightDate.getSeconds() - lightSecondsOffsetTimezone);\r\n        const times = SunCalc.getTimes(lightDate, this.viewerState.positionWGS84[1], this.viewerState.positionWGS84[0]);\r\n\r\n        const sunriseStr = times.sunrise.getHours() + \":\" + times.sunrise.getMinutes();\r\n        const sunsetStr = times.sunset.getHours() + \":\" + times.sunset.getMinutes();\r\n\r\n        // get position of the sun (azimuth and altitude) at today's sunrise\r\n        ///*var sunrisePos = SunCalc.getPosition(times.sunrise, this.viewerState.positionWGS84[1], this.viewerState.positionWGS84[0]);\r\n        //var sunriseAzimuth = sunrisePos.azimuth * 180 / Math.PI;\r\n        //var sunsetSunPos = SunCalc.getPosition(times.sunset, this.viewerState.positionWGS84[1], this.viewerState.positionWGS84[0]);\r\n        //var sunsetAzimuth = sunsetPos.azimuth * 180 / Math.PI; **\r\n\r\n        const currentSunPos = SunCalc.getPosition(lightDate, this.viewerState.positionWGS84[1], this.viewerState.positionWGS84[0]); // , this.viewerState.positionScene[1]\r\n        const currentMoonPos = SunCalc.getMoonPosition(lightDate, this.viewerState.positionWGS84[1], this.viewerState.positionWGS84[0]);\r\n        //var crrentMoonIlum = SunCalc.getMoonIllumination(this.viewerState.positionDate);\r\n\r\n        //var currentPos = currentSunPos.altitude > 0 ? currentSunPos : currentMoonPos;\r\n\r\n        //var currentElevation = currentPos.altitude * 180 / Math.PI;\r\n        //var currentAzimuth = currentPos.azimuth * 180 / Math.PI;\r\n        //console.debug(\"Sun azimuth: \" + currentAzimuth + \" ele: \" + currentElevation + \" Date: \" + this.viewerState.positionDate + \" Sunrise: \" + sunriseStr + \" azimuth: \" + sunriseAzimuth + \" Sunset: \" + sunsetStr + \" azimuth: \" + sunsetAzimuth);\r\n\r\n        const altitudeLessHorizonAtmAprox = ( currentSunPos.altitude + 0.25 ) / ( Math.PI + 0.25 ) * Math.PI; // 0.25~15rad\r\n        let sunlightAmountNorm = Math.sin( altitudeLessHorizonAtmAprox );\r\n        if ( sunlightAmountNorm < 0 ) { sunlightAmountNorm = 0; }\r\n        sunlightAmountNorm = 1 - Math.pow( 1 - sunlightAmountNorm, 4 );\r\n\r\n        //let lightAltitude = altitudeLessHorizonAtmAprox >= 0 && altitudeLessHorizonAtmAprox < Math.PI ? altitudeLessHorizonAtmAprox : Math.PI - altitudeLessHorizonAtmAprox;\r\n        const sunAltitude = currentSunPos.altitude >= 0 ? currentSunPos.altitude : 0.01;\r\n        const lightRot = Quaternion.FromEulerAngles( sunAltitude, currentSunPos.azimuth, 0 );  // Use moon\r\n        const lightSunAndFlareRot = Quaternion.FromEulerAngles( sunAltitude, currentSunPos.azimuth, 0 );\r\n\r\n        //this.light = new DirectionalLight(\"light\", new Vector3(0.3, -0.5, 0.5).normalizeToNew(), this.scene);\r\n        //this.light.diffuse = new Color3(0.95, 0.95, 1.00);\r\n        //this.light.specular = new Color3(1, 1, 0.95);\r\n        const minLightDay = 0.0;\r\n        const maxLightDay = 1.1; // 3.0;\r\n\r\n        // Set light dir and intensity\r\n        Vector3.Forward().rotateByQuaternionToRef( lightRot, this.light!.direction );\r\n        const lightIntensity = minLightDay + ( maxLightDay - minLightDay ) * sunlightAmountNorm;\r\n        //console.debug(\"Sunlight amount norm: \" + sunlightAmountNorm + \" lightIntensity: \" + lightIntensity);\r\n        this.light!.intensity = lightIntensity;\r\n\r\n\r\n        /*\r\n        if (this.scene.environmentTexture) {\r\n            this.scene.environmentTexture.level = 0.1 + sunlightAmountNorm; // = hdrTexture;\r\n        }\r\n        Color3.LerpToRef(this.ambientColorNight, this.ambientColorDay, sunlightAmountNorm, this.scene.ambientColor);\r\n        */\r\n\r\n        if (this.skybox) {\r\n            this.skybox.rotation.y = currentSunPos.azimuth - ( 19 * ( Math.PI / 180.0 ));\r\n        }\r\n\r\n        const skyboxMinReflectionLevel = 0.05;\r\n        const environmentIntensityMax = 1.2;\r\n\r\n        if ( this.skybox && this.skybox.material && this.skybox.material instanceof StandardMaterial ) {\r\n            (<StandardMaterial>this.skybox.material).reflectionTexture!.level = skyboxMinReflectionLevel + sunlightAmountNorm;\r\n        }\r\n        \r\n        this.scene.environmentIntensity = skyboxMinReflectionLevel + (sunlightAmountNorm * environmentIntensityMax);\r\n\r\n        if ( this.skybox ) {\r\n            const shaderMaterial: ShaderMaterial | null = <ShaderMaterial | null> this.scene.getMaterialByName( \"skyShader\" );\r\n            if ( shaderMaterial ) {\r\n                shaderMaterial.setFloat( \"time\", ( this.viewerState.positionDate.getTime() % ( 100000000.0 )) / 500000.0 );\r\n                if ( currentSunPos.altitude > 0 ) {\r\n                    shaderMaterial.setFloat( \"suny\", Math.sin( currentSunPos.altitude ));\r\n                } else if ( currentMoonPos.altitude > 0 ) {\r\n                    //shaderMaterial.setFloat(\"suny\", -Math.sin(currentMoonPos.altitude));\r\n                    shaderMaterial.setFloat( \"suny\", Math.sin( currentSunPos.altitude ));\r\n                } else {\r\n                    //shaderMaterial.setFloat(\"suny\", 0);\r\n                    shaderMaterial.setFloat( \"suny\", Math.sin( currentSunPos.altitude ));\r\n                }\r\n                //shaderMaterial.setFloat( \"sunx\", ( currentSunPos.azimuth - ( Math.PI / 2.0 )) / Math.PI );\r\n                shaderMaterial.setFloat( \"sunx\", ( (19 * (Math.PI / 180.0)) - ( Math.PI / 2.0 )) / Math.PI );\r\n            }\r\n        }\r\n\r\n\r\n        if (this.lensFlareSystem) {\r\n            Vector3.Forward().rotateByQuaternionToRef( lightSunAndFlareRot, this.lensFlareSystem.getEmitter().position );\r\n            this.lensFlareSystem.getEmitter().position.scaleInPlace( -1400.0 );\r\n            this.lensFlareSystem.getEmitter().position.addInPlace( this.camera!.position );\r\n            this.lensFlareSystem.setEmitter( this.lensFlareSystem.getEmitter() );\r\n\r\n            const flareEnabled = currentSunPos.altitude > 0;\r\n            if ( this.lensFlareSystem.isEnabled !== flareEnabled ) {\r\n                this.lensFlareSystem.isEnabled = flareEnabled;\r\n            }\r\n        }\r\n\r\n        // Update light position for correct shadows calculation\r\n        // TODO: This shall not be done as part of datetime/sun update, as it is needed even if time is not moving\r\n        Vector3.Forward().rotateByQuaternionToRef(lightSunAndFlareRot, this.light!.position);\r\n        this.light!.position.scaleInPlace( -1400.0 );\r\n        this.light!.position.addInPlace( this.camera!.position );\r\n        this.light!.position = this.light!.position;\r\n\r\n\r\n        //console.debug(this.scene.ambientColor);\r\n\r\n        // Lamps\r\n        const lampMatOn = sunlightAmountNorm < 0.35;  // 0.3 fits, but turn off too quick\r\n        if ( lampMatOn !== this._previousLampPatOn ) {\r\n            this._previousLampPatOn = lampMatOn;\r\n            if ( \"LightLampOff\" in this.catalog_materials ) {\r\n                const lampMat : StandardMaterial = <StandardMaterial> this.catalog_materials[\"LightLampOff\"];\r\n                lampMat.unfreeze();\r\n                if ( lampMatOn ) {\r\n                    lampMat.emissiveColor = this.colorLightLamp;\r\n                } else {\r\n                    lampMat.emissiveColor = Color3.Black();\r\n                }\r\n                //lampMat.freeze();\r\n            }\r\n\r\n        }\r\n\r\n        const semCycleSeconds = 20;\r\n        let semColor = ( this.viewerState.positionDate.getMinutes() % semCycleSeconds ) / semCycleSeconds;\r\n        semColor = ( semColor < 0.5 ? 0 : ( semColor < 0.9 ? 1 : 2 ));\r\n        if ( \"LightRed\" in this.catalog_materials ) {\r\n            const lampMat: StandardMaterial = <StandardMaterial> this.catalog_materials[\"LightRed\"];\r\n            lampMat.unfreeze();\r\n            lampMat.emissiveColor = ( semColor === 0 ) ? this.colorLightRed : Color3.Black();\r\n            //lampMat.freeze();\r\n        }\r\n        if ( \"LightGreen\" in this.catalog_materials ) {\r\n            const lampMat: StandardMaterial = <StandardMaterial> this.catalog_materials[\"LightGreen\"];\r\n            lampMat.unfreeze();\r\n            lampMat.emissiveColor = ( semColor === 1 ) ? this.colorLightGreen : Color3.Black();\r\n        }\r\n        if ( \"LightOrange\" in this.catalog_materials ) {\r\n            const lampMat: StandardMaterial = <StandardMaterial> this.catalog_materials[\"LightOrange\"];\r\n            lampMat.unfreeze();\r\n            lampMat.emissiveColor = ( semColor === 2 ) ? this.colorLightOrange : Color3.Black();\r\n            //lampMat.freeze();\r\n        }\r\n\r\n    }\r\n\r\n    sceneShadowsSetEnabled( value: boolean ): void {\r\n        this.viewerState.sceneShadowsEnabled = value;\r\n        localStorage.setItem( \"dddSceneShadowsEnabled\", JSON.stringify( value ));\r\n\r\n        // TODO: If shadows were off, we'd still need to create the shadowgenerator and add shadow casters\r\n        this.scene.shadowsEnabled = value;\r\n\r\n        // TODO: this persistent setting belongs to the app\r\n        alert( \"Reload the viewer for changes to take effect.\" );\r\n    }\r\n\r\n    sceneTextsSetEnabled( value: boolean ): void {\r\n        this.viewerState.sceneTextsEnabled = value;\r\n        localStorage.setItem( \"dddSceneTextsEnabled\", JSON.stringify( value ));\r\n\r\n        // TODO: this persistent setting belongs to the app\r\n        alert( \"Reload the viewer for changes to take effect.\" );\r\n    }\r\n\r\n    /**\r\n    */\r\n    loadTextures(): void {\r\n\r\n        const textures = this.viewerState.dddConfig.materialsTextureSet;\r\n        const splatmap = this.viewerState.dddConfig.materialsSplatmap;\r\n\r\n        console.debug(\"Loading textures: \" + textures + \" (splatmap: \" + splatmap + \")\");\r\n\r\n        if (textures !== null) {\r\n            this.loadCatalog(this.viewerState.dddConfig.assetsUrlbase + \"/catalog_materials-\" + textures + \".glb\", true);\r\n        }\r\n\r\n        if (splatmap) {\r\n            console.info(\"Loading splatmap textures.\");\r\n            this.useSplatMap = true;\r\n            const atlasTextureUrl = this.viewerState.dddConfig.assetsUrlbase + \"/splatmap-textures-atlas-\" + splatmap + \".png\";\r\n            const atlasNormalsTextureUrl = this.viewerState.dddConfig.assetsUrlbase + \"/splatmap-textures-atlas-normals-\" + splatmap + \".png\";\r\n            this.splatmapAtlasTexture = new Texture(atlasTextureUrl, this.scene, false, true, Texture.NEAREST_NEAREST_MIPLINEAR); // , Texture.NEAREST_SAMPLINGMODE);\r\n            this.splatmapAtlasNormalsTexture = new Texture(atlasNormalsTextureUrl, this.scene, false, true, Texture.NEAREST_NEAREST_MIPLINEAR);\r\n        } else {\r\n            this.useSplatMap = false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Changes the materials set used to draw the scene.\r\n     * @todo this would ideally belong to layers that explicity support DDD export features (splatmaps / texture catalogs)\r\n     * @param textureSet\r\n     */\r\n    sceneTextureSet(textureSet: string | null, splatmap: number): void {\r\n\r\n        this.viewerState.dddConfig.materialsTextureSet = textureSet;\r\n        this.viewerState.dddConfig.materialsSplatmap = splatmap;\r\n\r\n        //if (textureSet) {\r\n        this.loadTextures();\r\n        //}\r\n\r\n        alert( \"Reload the app to apply changes.\" );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport { SceneViewer };\r\n","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\nimport { BaseCameraController } from \"./BaseCameraController\";\r\n\r\n/**\r\n * DDD Viewer base layer class.\r\n */\r\nclass GeolocationCameraController extends BaseCameraController {\r\n\r\n    update(deltaTime: number): void {\r\n\r\n    }\r\n\r\n    activate(): void {\r\n    }\r\n\r\n   /*\r\n    geolocationPosition( enabled ) {\r\n\r\n        //this.selectCameraFree();\r\n        //this.walkMode = true;\r\n        //this.camera.detachControl();\r\n\r\n        /-\r\n        this.app.$getLocation({enableHighAccuracy: true}).then(coordinates => {\r\n            console.log(coordinates);\r\n            let altitude = coordinates.altitude !== null ? coordinates.altitude : 2.0;\r\n            let scenePos = this.wgs84ToScene([coordinates.lng, coordinates.lat, altitude]);\r\n            //console.log(scenePos);\r\n            this.camera.position.x = scenePos[0];\r\n            this.camera.position.y = altitude;\r\n            this.camera.position.z = scenePos[2];\r\n\r\n            let heading = coordinates.heading;\r\n            if (heading) {\r\n                this.sceneViewer.viewerState.positionHeading = heading;\r\n                let rotation = new Vector3((90.0 - this.sceneViewer.viewerState.positionTilt) * (Math.PI / 180.0), this.sceneViewer.viewerState.positionHeading * (Math.PI / 180.0), 0.0);\r\n                this.camera.rotation = rotation;\r\n            }\r\n        });\r\n        -/\r\n\r\n        this.viewerState.geolocationEnabled = enabled;\r\n\r\n        if ( enabled ) {\r\n\r\n            const that = this;\r\n\r\n            // Enable geolocation\r\n            this.selectCameraFree();\r\n\r\n            //this._geolocationWatchId = this.app.$watchLocation({enableHighAccuracy: true, maximumAge: 5}).then(coordinates => {\r\n            this.app.$getLocation({ enableHighAccuracy: true, maximumAge: 5 }).then(( coords ) => { that.onDeviceLocation( coords ); });\r\n\r\n            // Compass\r\n            this._onDeviceOrientation = function( e ) { that.onDeviceOrientation( e ); };\r\n            this._onDeviceOrientation.bind( that );\r\n            const isIOS = false;\r\n            if ( isIOS ) {\r\n                DeviceOrientationEvent.requestPermission().then(( response ) => {\r\n                    if ( response === \"granted\" ) {\r\n                        window.addEventListener( \"deviceorientation\", this._onDeviceOrientation );\r\n                    } else {\r\n                        alert( \"Compass usage permission not granted.\" );\r\n                    }\r\n                }).catch(() => alert( \"Compass not supported.\" ));\r\n            } else {\r\n                window.addEventListener( \"deviceorientationabsolute\", this._onDeviceOrientation );\r\n            }\r\n\r\n        } else  {\r\n\r\n            // Disable geolocation\r\n\r\n            this.viewerState.geolocationEnabled = false;\r\n            if ( this._geolocationWatchId !== null ) {\r\n                this.app.$clearLocationWatch( this._geolocationWatchId );\r\n                this._geolocationWatchId = null;\r\n            }\r\n            window.removeEventListener( \"deviceorientationabsolute\", this._onDeviceOrientation );\r\n            window.removeEventListener( \"deviceorientation\", this._onDeviceOrientation );\r\n            this._onDeviceOrientation = null;\r\n        }\r\n\r\n    }\r\n\r\n    onDeviceLocation( coordinates ) {\r\n        //console.log(coordinates);\r\n        if ( coordinates ) {\r\n\r\n            const altitude = coordinates.altitude !== null ? coordinates.altitude : 2.0;\r\n            if ( this.walkMode ) { altitude.y = 2.5; }\r\n\r\n            this.viewerState.positionWGS84 = [ coordinates.lng, coordinates.lat, altitude ];\r\n            const scenePos = this.wgs84ToScene( this.viewerState.positionWGS84 );\r\n            this.viewerState.positionScene = scenePos;\r\n\r\n            this.camera.position.x = scenePos[0];\r\n            this.camera.position.y = altitude;\r\n            this.camera.position.z = scenePos[2];\r\n\r\n            /-\r\n            let heading = coordinates.heading;\r\n            if (heading !== null && !isNaN(heading)) {\r\n                this.viewerState.positionHeading = heading;\r\n                let rotation = new Vector3((90.0 - this.viewerState.positionTilt) * (Math.PI / 180.0), this.viewerState.positionHeading * (Math.PI / 180.0), 0.0);\r\n                this.camera.rotation = rotation;\r\n                //console.debug(heading);\r\n            }\r\n            -/\r\n        }\r\n\r\n        if ( this.viewerState.geolocationEnabled ) {\r\n            const that = this;\r\n            setTimeout( function() {\r\n                that.app.$getLocation({ enableHighAccuracy: true, maximumAge: 5 }).then(( coords ) => { that.onDeviceLocation( coords ); });\r\n            }, 1000 );\r\n        }\r\n\r\n    }\r\n    */\r\n\r\n\r\n    /**\r\n    * From: https://www.w3.org/TR/orientation-event/\r\n    */\r\n    /*\r\n    getQuaternion( alpha, beta, gamma ) {\r\n\r\n        var degtorad = Math.PI / 180; // Degree-to-Radian conversion\r\n\r\n      var _x = beta  ? beta  * degtorad : 0; // beta value\r\n      var _y = gamma ? gamma * degtorad : 0; // gamma value\r\n      var _z = alpha ? alpha * degtorad : 0; // alpha value\r\n\r\n      var cX = Math.cos( _x/2 );\r\n      var cY = Math.cos( _y/2 );\r\n      var cZ = Math.cos( _z/2 );\r\n      var sX = Math.sin( _x/2 );\r\n      var sY = Math.sin( _y/2 );\r\n      var sZ = Math.sin( _z/2 );\r\n\r\n      //\r\n      // ZXY quaternion construction.\r\n      //\r\n\r\n      var w = cX * cY * cZ - sX * sY * sZ;\r\n      var x = sX * cY * cZ - cX * sY * sZ;\r\n      var y = cX * sY * cZ + sX * cY * sZ;\r\n      var z = cX * cY * sZ + sX * sY * cZ;\r\n\r\n      //return [ w, x, y, z ];\r\n      return new Quaternion(x, y, z, w);\r\n    }\r\n    */\r\n\r\n    /*\r\n    onDeviceOrientation( e ) {\r\n\r\n        //let rotation = Quaternion.FromEulerAngles(e.alpha * Math.PI / 180.0, e.beta * Math.PI / 180.0, e.gamma * Math.PI / 180.0);\r\n        //let forward = Vector3.Forward().rotateByQuaternionToRef(rotation, new Vector3());\r\n        //let heading = Math.atan2(forward.y, forward.x) * 180.0 / Math.PI;\r\n        //alert(heading);\r\n\r\n        let heading = e.webkitCompassHeading || Math.abs( e.alpha - 360 );\r\n\r\n        if ( heading !== null && !isNaN( heading )) {\r\n\r\n            heading = ( heading ) % 360.0;\r\n            this.viewerState.positionHeading = heading;\r\n\r\n            let tilt = e.webkitCompassTilt || Math.abs( e.beta - 360 );\r\n            if ( tilt !== null && !isNaN( tilt )) {\r\n                this.viewerState.positionTilt = ( - tilt );\r\n            }\r\n\r\n            const tiltRotation = ( 90.0 - this.viewerState.positionTilt ) * ( Math.PI / 180.0 );\r\n            if ( tiltRotation < 0 ) { tilt = Math.PI * 2 - tiltRotation; }\r\n            const rotation = new Vector3( tiltRotation, this.viewerState.positionHeading * ( Math.PI / 180.0 ), 0.0 );\r\n            //let rotation = new Vector3(Math.PI / 2 + -e.beta * Math.PI / 180.0, -e.alpha * Math.PI / 180.0, e.gamma * Math.PI / 180.0 );\r\n            this.camera!.rotation = rotation;\r\n            //console.debug(heading);\r\n        }\r\n        //compassCircle.style.transform = `translate(-50%, -50%) rotate(${-compass}deg)`;\r\n    }\r\n    */\r\n\r\n\r\n}\r\n\r\nexport { GeolocationCameraController };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { ArcRotateCamera, BoundingInfo, Camera, Mesh, Vector3 } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\nimport { BaseCameraController } from \"./BaseCameraController\";\r\n\r\n/**\r\n * DDD Viewer base layer class.\r\n */\r\nclass OrbitCameraController extends BaseCameraController {\r\n\r\n    update(deltaTime: number): void {\r\n        // Fix viewer to floor\r\n        const terrainElevation = this.dddViewer.viewerState.positionTerrainElevation;\r\n        if (terrainElevation && this.dddViewer.camera.position.y < ( terrainElevation + 1.0 )) {\r\n            this.getCamera().position.y = terrainElevation + 1.0;\r\n        }\r\n    }\r\n\r\n    activate(): void {\r\n\r\n        let targetCoords = Vector3.Zero();\r\n        if ( this.dddViewer.selectedObject ) {\r\n            const boundingBox: BoundingInfo = this.dddViewer.getBoundsRecursively( <Mesh> this.dddViewer.selectedObject!.mesh );\r\n            //targetCoords = this.selectedMesh.absolutePosition;\r\n            const minWorld = boundingBox.minimum;\r\n            const maxWorld = boundingBox.maximum;\r\n            targetCoords = new Vector3(( minWorld.x + maxWorld.x ) / 2, ( minWorld.y + maxWorld.y ) / 2, ( minWorld.z + maxWorld.z ) / 2 );\r\n        }\r\n\r\n        let distance = 75.0;\r\n        if ( this.dddViewer.camera ) {\r\n            distance = Vector3.Distance( this.dddViewer.camera.position, targetCoords );\r\n\r\n            this.dddViewer.camera.customRenderTargets.length = 0; //  = [];\r\n\r\n            this.dddViewer.camera.detachControl();\r\n            this.dddViewer.camera.dispose();\r\n        }\r\n\r\n        console.debug( \"Creating orbit camera pointing to: \" + targetCoords );\r\n\r\n        const camera = new ArcRotateCamera( \"Camera\", -( 90 + this.dddViewer.viewerState.positionHeading ) * Math.PI / 180.0, this.dddViewer.viewerState.positionTilt * Math.PI / 180.0, distance, targetCoords, this.dddViewer.scene );\r\n        camera.attachControl( this.dddViewer.engine.getRenderingCanvas(), true );\r\n        camera.minZ = 0.5; // 1.0; // 0.1;\r\n        //camera.maxZ = 2500;  // Automatic? see focusOn()\r\n        camera.lowerRadiusLimit = 15;\r\n        camera.upperRadiusLimit = 1000;\r\n        camera.upperBetaLimit = Math.PI; // /2; // Math.PI / 2 = limit to flat view\r\n        camera.panningSensibility = 50.0; // 0.5;\r\n        //camera.angularSensibility = 50.0;\r\n        //camera.inertia = 0.10;\r\n\r\n        //camera.multiTouchPanning = false;\r\n        //camera.multiTouchPanAndZoom = false;\r\n        //camera.pinchZoom = true;\r\n\r\n        camera.useNaturalPinchZoom = true;\r\n        camera.fov = 35.0 * ( Math.PI / 180.0 );\r\n        this.dddViewer.camera = camera;\r\n\r\n        this.dddViewer.updateRenderTargets();\r\n        if (this.dddViewer.shadowGenerator) {\r\n            this.dddViewer.shadowGenerator.splitFrustum();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport { OrbitCameraController };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\nimport { BaseCameraController } from \"./BaseCameraController\";\r\n\r\n/**\r\n * DDD Viewer base layer class.\r\n */\r\nclass PanningCameraController extends BaseCameraController {\r\n\r\n    update(deltaTime: number): void {\r\n\r\n    }\r\n\r\n    activate(): void {\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { PanningCameraController };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera, Vector3 } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\nimport { BaseCameraController } from \"./BaseCameraController\";\r\nimport { FreeCameraController } from \"./FreeCameraController\";\r\n\r\n/**\r\n * DDD Viewer base layer class.\r\n */\r\nclass WalkCameraController extends FreeCameraController {\r\n\r\n    sceneCameraWalkHeight = 1.75; // 2.0;\r\n\r\n    //falling = false;\r\n\r\n    update(deltaTime: number): void {\r\n        // Fix viewer to floor\r\n        const terrainElevation = this.dddViewer.viewerState.positionTerrainElevation;\r\n        if ( terrainElevation !== null && this.dddViewer.camera ) {\r\n            this.getCamera().position.y = terrainElevation + this.sceneCameraWalkHeight; // 3.0;\r\n        }\r\n    }\r\n\r\n    activate(): void {\r\n        super.activate();\r\n        //this.walkMode = true;\r\n        this.dddViewer.camera!.inertia = 0.2; // 0.0;\r\n        this.dddViewer.setMoveSpeed( this.dddViewer.viewerState.sceneMoveSpeed );\r\n    }\r\n\r\n}\r\n\r\nexport { WalkCameraController };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera, Vector3 } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\nimport { BaseCameraController } from \"./BaseCameraController\";\r\nimport { WalkCameraController } from \"./WalkCameraController\";\r\n\r\n/**\r\n * DDD Viewer base layer class.\r\n */\r\nclass WalkCollideCameraController extends WalkCameraController {\r\n\r\n    velocity = new Vector3();\r\n\r\n    gravity = -9.8;\r\n\r\n    falling = false;\r\n\r\n    fallStartDistance = 0.5;\r\n\r\n    update(deltaTime: number): void {\r\n        // Fix viewer to floor\r\n        const terrainElevation = this.dddViewer.viewerState.positionTerrainElevation;\r\n        if ( terrainElevation !== null && this.dddViewer.camera ) {\r\n            const currentHeight = this.getCamera().position.y;\r\n            const baseHeight = terrainElevation + this.sceneCameraWalkHeight;\r\n            if (currentHeight > baseHeight + this.fallStartDistance) {\r\n                this.falling = true;\r\n            }\r\n            if (this.falling) {\r\n                this.velocity.y += (this.gravity * deltaTime);\r\n                this.getCamera().position.addInPlace(this.velocity.scale(deltaTime));\r\n            }\r\n\r\n            if (!this.falling || this.getCamera().position.y < baseHeight) {\r\n                this.falling = false;\r\n                this.velocity.set(0, 0, 0);\r\n                this.getCamera().position.y = terrainElevation + this.sceneCameraWalkHeight;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport { WalkCollideCameraController };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\n\r\n/**\r\n * Manages reading of files in DDD format. DDD files are glTF files\r\n * with custom metadata. This class processes nodes and metadata.\r\n */\r\nclass DDDFormat  {\r\n\r\n    protected dddViewer: SceneViewer;\r\n\r\n    constructor(dddViewer: SceneViewer) {\r\n        // Reference to DDDViewer\r\n        this.dddViewer = dddViewer;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport { DDDFormat };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\n\r\n/**\r\n */\r\nclass GeoJSONFormat  {\r\n\r\n    protected dddViewer: SceneViewer;\r\n\r\n    constructor(dddViewer: SceneViewer) {\r\n        // Reference to DDDViewer\r\n        this.dddViewer = dddViewer;\r\n    }\r\n\r\n}\r\n\r\nexport { GeoJSONFormat };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { SceneViewer } from \"SceneViewer\";\r\nimport { LayerManager } from \"./LayerManager\";\r\n\r\n/**\r\n * DDD Viewer base layer class.\r\n */\r\nabstract class Base3DLayer {\r\n\r\n    key: string;\r\n    visible: boolean = true;\r\n\r\n    protected dddViewer: SceneViewer | null;\r\n    protected layerManager: LayerManager | null;  // TODO: added for backwards compat (for convenience), should be removed\r\n\r\n    constructor(key: string) {\r\n        this.key = key;\r\n        this.visible = true;\r\n\r\n        this.dddViewer = null;\r\n        this.layerManager = null;\r\n    }\r\n\r\n    abstract update(deltaTime: number): void;\r\n\r\n    abstract clearScene(): void;\r\n\r\n    setVisible(visible: boolean): void {\r\n        this.visible = visible;\r\n    }\r\n\r\n    setViewer(dddViewer: SceneViewer | null): void {\r\n        this.dddViewer = dddViewer;\r\n        this.layerManager = dddViewer ? dddViewer.layerManager : null;\r\n\r\n        if (!dddViewer) {\r\n            this.clearScene();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport { Base3DLayer };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { AbstractMesh, Color3, Mesh, MeshBuilder, Node, Ray, StandardMaterial, Texture, TransformNode, Vector3 } from \"@babylonjs/core\";\r\nimport { Coordinate } from \"ol/coordinate\";\r\nimport * as extent from \"ol/extent\";\r\nimport * as olProj from \"ol/proj\";\r\nimport { createXYZ, extentFromProjection } from \"ol/tilegrid\";\r\nimport TileGrid from \"ol/tilegrid/TileGrid\";\r\nimport { SceneViewer } from \"../SceneViewer\";\r\nimport { Base3DLayer } from \"./Base3DLayer\";\r\n\r\n\r\nclass DDD3DLayer extends Base3DLayer {\r\n\r\n    node: Node | null = null;\r\n\r\n    constructor(key: string) {\r\n        super(key);\r\n        console.log(\"Constructing new DDD3DLayer.\");\r\n        // TODO: This makes sense here, but is also duplicated on SceneViewer\r\n    }\r\n\r\n    update(): void {\r\n    }\r\n\r\n    // TODO: Tile coordinates should be made a type or reuse OpenLayers grid coordinates type\r\n    loadData( data: string ): void {\r\n\r\n        const objectBlob = new Blob([data], { type: 'model/gltf-binary' });\r\n        const objectUrl = URL.createObjectURL(objectBlob);\r\n\r\n        const layerKey = \"model\";\r\n        const pivot = new Mesh( \"dddobject_\" + layerKey, this.layerManager!.sceneViewer.scene );\r\n\r\n        this.layerManager!.sceneViewer.queueLoader.enqueueLoadModel( objectUrl,\r\n            // onSuccess\r\n            ( newMeshes: AbstractMesh[], _particleSystems: any, _skeletons: any ) => {\r\n\r\n                //console.log(\"DDD3DLayer GLB loaded\", newMeshes);\r\n\r\n                newMeshes.forEach( (mesh: AbstractMesh, _i: number) => {\r\n                    if (this.layerManager!.sceneViewer.shadowGenerator) {\r\n                        mesh.receiveShadows = true;\r\n                        if ( mesh.metadata && mesh.metadata.gltf.extras &&\r\n                                (( mesh.metadata.gltf.extras[\"ddd:shadows\"] === false ) ||\r\n                                 ( mesh.metadata.gltf.extras[\"ddd:shadows\"] === \"false\" ) ||\r\n                                 ( mesh.metadata.gltf.extras[\"ddd:path\"].indexOf( \"/Areas_\" ) > 0 ) ||\r\n                                 ( mesh.metadata.gltf.extras[\"ddd:path\"].indexOf( \"/Ways_\" ) > 0 ))) {\r\n                            //console.debug(\"No shadow\");\r\n                            return;\r\n                        }\r\n\r\n                        // TODO: Do this at SceneViewer processMesh level\r\n                        this.layerManager!.sceneViewer.shadowGenerator.getShadowMap()!.renderList!.push(mesh);\r\n                    }\r\n\r\n                });\r\n\r\n                // Reparent root\r\n                (<Mesh> newMeshes[0]).parent = <Node> pivot;\r\n                this.node = pivot;\r\n\r\n                pivot.freezeWorldMatrix();\r\n\r\n                this.layerManager!.sceneViewer.scene.blockfreeActiveMeshesAndRenderingGroups = true;\r\n                this.layerManager!.sceneViewer.processMesh( <Mesh>pivot, <Mesh>pivot );  // TODO: Wrong conversion, use Node for \"processMesh\"\r\n                this.layerManager!.sceneViewer.scene.blockfreeActiveMeshesAndRenderingGroups = false;\r\n\r\n                //pivot.occlusionType = AbstractMesh.OCCLUSION_TYPE_OPTIMISTIC;\r\n                pivot.freezeWorldMatrix();\r\n\r\n            },\r\n            // onError\r\n            ( _scene: any, _msg: string, ex: any ) => {\r\n                // eslint-disable-next-line no-console\r\n                console.log( \"Tile model (.glb) loading error: \", ex );\r\n\r\n            }\r\n        );\r\n        //model.parent = pivot;\r\n\r\n    }\r\n\r\n    clearScene() {\r\n        console.log(\"Deleting DDD3DLayer: \" + this.key);\r\n        if (this.node) {\r\n            //tile.node.setEnabled(false);\r\n            this.node.parent = null;\r\n            this.node.dispose();\r\n            this.node = null;\r\n        }\r\n    }\r\n\r\n    setVisible(visible: boolean) {\r\n        super.setVisible(visible);\r\n        if (this.node) this.node.setEnabled(this.visible);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport { DDD3DLayer };\r\n\r\n","import { AbstractMesh, Color3, Mesh, MeshBuilder, Node, Ray, StandardMaterial, Texture, TransformNode, Vector3 } from \"@babylonjs/core\";\r\nimport { Coordinate } from \"ol/coordinate\";\r\nimport * as extent from \"ol/extent\";\r\nimport * as olProj from \"ol/proj\";\r\nimport { createXYZ, extentFromProjection } from \"ol/tilegrid\";\r\nimport TileGrid from \"ol/tilegrid/TileGrid\";\r\nimport { SceneViewer } from \"../SceneViewer\";\r\nimport { Base3DLayer } from \"./Base3DLayer\";\r\n\r\n\r\n\r\nclass GeoJsonItem {\r\n    properties: any;\r\n}\r\n\r\nclass GeoJsonPoint extends GeoJsonItem {\r\n\r\n    coordsWgs84: Vector3 = Vector3.Zero();\r\n    coordsScene: Vector3 = Vector3.Zero();\r\n\r\n    constructor(coordsWgs84: Vector3) {\r\n        super();\r\n        this.coordsWgs84 = coordsWgs84;\r\n    }\r\n\r\n    /**\r\n     * Currently receives a viewer for coordinate transformations\r\n     */\r\n    transformCoords(viewer: SceneViewer) {\r\n        let csa = viewer.wgs84ToScene(this.coordsWgs84.asArray());\r\n        this.coordsScene = Vector3.FromArray(csa);\r\n    }\r\n\r\n}\r\n\r\nclass GeoJsonLine extends GeoJsonItem {\r\n\r\n    // TODO: These should be buffers\r\n    coordsWgs84: Vector3[] = [];\r\n    coordsScene: Vector3[] = [];\r\n\r\n    constructor(coordsWgs84: Vector3[]) {\r\n        super();\r\n        this.coordsWgs84 = coordsWgs84;\r\n    }\r\n\r\n    /**\r\n     * Currently receives a viewer for coordinate transformations\r\n     */\r\n    transformCoords(viewer: SceneViewer) {\r\n        this.coordsScene = [];\r\n        for (let v of this.coordsWgs84) {\r\n            let csa = viewer.wgs84ToScene(v.asArray());\r\n            this.coordsScene.push(Vector3.FromArray(csa));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nclass GeoJson3DLayer extends Base3DLayer {\r\n\r\n    featuresPoints: GeoJsonPoint[] = [];\r\n    featuresLines: GeoJsonLine[] = [];\r\n\r\n    altitudeOffset: number = 50;\r\n    colorHex: string = \"#ff00ff\";\r\n\r\n    //private sceneNodes: Mesh[] = [];\r\n    private rootNode: TransformNode | null = null;\r\n\r\n    private featureMaterial: StandardMaterial | null = null;\r\n\r\n    constructor(key: string, geojsonData: any) {\r\n        super(key);\r\n        setTimeout(() => {\r\n            this.loadFromGeoJson(geojsonData);\r\n            this.projectFeatures();\r\n            this.updateSceneFromFeatures();\r\n        }, 0);\r\n    }\r\n\r\n    update(): void {\r\n    }\r\n\r\n    setColor(colorHex: string) {\r\n        this.colorHex = colorHex;\r\n\r\n        if (this.featureMaterial) {\r\n            const color = Color3.FromHexString(colorHex);\r\n            //this.featureMaterial.unfreeze();\r\n            this.featureMaterial.diffuseColor = color;\r\n            this.featureMaterial.emissiveColor = color;\r\n            this.featureMaterial.disableLighting = true;\r\n            //this.featureMaterial.freeze();\r\n        }\r\n    }\r\n\r\n    setVisible(visible: boolean) {\r\n        super.setVisible(visible);\r\n        if (this.rootNode) this.rootNode.setEnabled(this.visible);\r\n        /*\r\n        for (let node of this.sceneNodes) {\r\n            node.setEnabled(this.visible);\r\n        }\r\n        */\r\n    }\r\n\r\n    setAltitudeOffset(altitudeOffset: number) {\r\n        this.altitudeOffset = altitudeOffset;\r\n        if (this.rootNode) {\r\n            this.rootNode.position.y = this.altitudeOffset;  // Apply offset\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes GeoJSON data (already loaded as Javascript objects) and loads the different features.\r\n     */\r\n    loadFromGeoJson(data: any): void {\r\n        for (let feature of data['features']) {\r\n            this.loadFeature(feature);\r\n        }\r\n    }\r\n\r\n    loadFeature(feature: any): void {\r\n        let properties = feature['properties'];\r\n        let geometry = feature['geometry'];\r\n\r\n        if (geometry['type'] == 'Point') {\r\n            const lat = geometry['coordinates'][0];\r\n            const lon = geometry['coordinates'][1];\r\n            const alt = geometry['coordinates'].length > 2 ? geometry['coordinates'][2] : 0;\r\n            let geojsonItem = new GeoJsonPoint(new Vector3(lat, lon, alt));\r\n            geojsonItem.properties = properties;\r\n\r\n            this.featuresPoints.push(geojsonItem);\r\n\r\n        } else if (geometry['type'] == 'LineString') {\r\n            let coords : Vector3[] = [];\r\n            for (let coord of geometry['coordinates']) {\r\n                const lat = coord[0];\r\n                const lon = coord[1];\r\n                const alt = coord.length > 2 ? coord[2] : 0;\r\n                let v = new Vector3(lat, lon, alt);\r\n                coords.push(v);\r\n            }\r\n            let geojsonItem = new GeoJsonLine(coords);\r\n            geojsonItem.properties = properties;\r\n\r\n            this.featuresLines.push(geojsonItem);\r\n\r\n        } else {\r\n            console.info(\"Unknown GeoJSON geometry type: \" + geometry['type']);\r\n        }\r\n    }\r\n\r\n    projectFeatures(): void {\r\n        for (let feature of this.featuresPoints) {\r\n            feature.transformCoords(this.layerManager!.sceneViewer);\r\n        }\r\n        for (let feature of this.featuresLines) {\r\n            feature.transformCoords(this.layerManager!.sceneViewer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * TODO: This should be a more generic \"markers\" and \"lines\" vector visualization facility.\r\n     */\r\n    updateSceneFromFeatures(): void {\r\n        const sceneViewer = this.layerManager!.sceneViewer;\r\n\r\n        // Create material only if it hasn't already been created\r\n        if (!this.featureMaterial) {\r\n            const featureMaterial = new StandardMaterial(\"featureMaterial\", sceneViewer.scene);\r\n            this.featureMaterial = featureMaterial;\r\n        }\r\n\r\n        if (!this.rootNode) {\r\n            this.rootNode = new TransformNode(\"geoJson3DLayer-root\", sceneViewer.scene);\r\n        }\r\n\r\n\r\n        this.setColor(this.colorHex);\r\n\r\n        for (let feature of this.featuresPoints) {\r\n            let marker = MeshBuilder.CreateSphere(\"pointMarker\", { diameter: 1.5, segments: 3 }, sceneViewer.scene);\r\n            marker.material = this.featureMaterial;\r\n            marker.position = feature.coordsScene;\r\n            marker.parent = this.rootNode;\r\n            //sceneNodes.push(marker);\r\n        }\r\n\r\n        for (let feature of this.featuresLines) {\r\n            let marker = MeshBuilder.CreateLines(\"lineMarker\", { points: feature.coordsScene }, sceneViewer.scene);\r\n            marker.material = this.featureMaterial;\r\n            marker.parent = this.rootNode;\r\n            //this.sceneNodes.push(marker);\r\n        }\r\n\r\n        this.setAltitudeOffset(this.altitudeOffset);\r\n\r\n    }\r\n\r\n    clearScene() {\r\n        if (this.rootNode) {\r\n            this.rootNode.parent = null;\r\n            this.rootNode.dispose();\r\n            this.rootNode = null;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport { GeoJson3DLayer };\r\n\r\n","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { AbstractMesh, Color3, Mesh, MeshBuilder, Node, Ray, StandardMaterial, Texture, TransformNode, Vector3 } from \"@babylonjs/core\";\r\nimport { Coordinate } from \"ol/coordinate\";\r\nimport * as extent from \"ol/extent\";\r\nimport * as olProj from \"ol/proj\";\r\nimport { createXYZ, extentFromProjection } from \"ol/tilegrid\";\r\nimport TileGrid from \"ol/tilegrid/TileGrid\";\r\nimport { SceneViewer } from \"../SceneViewer\";\r\nimport { Base3DLayer } from \"./Base3DLayer\";\r\n\r\n\r\n\r\nclass Tile3D {\r\n    key: string;\r\n    status: string | null;\r\n    node: Node | null;\r\n\r\n    constructor( key: string ) {\r\n        this.key = key;\r\n        this.status = null;\r\n        this.node = null;\r\n    }\r\n}\r\n\r\nclass GeoTile3D extends Tile3D {\r\n    coordsTileGrid: number[] | null;\r\n\r\n    constructor( key: string ) {\r\n        super( key );\r\n        this.coordsTileGrid = null;\r\n    }\r\n}\r\n\r\nclass GeoTile3DLayer extends Base3DLayer {\r\n    tiles: { [key: string]: GeoTile3D };\r\n\r\n    groundTextureLayerUrl: string | null = null;\r\n    //groundTextureLayerUrl = \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\";  // \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\";\r\n    //groundTextureLayerUrl = \"http://localhost:8090/wmts/ign_ortho/GLOBAL_WEBMERCATOR/{z}/{x}/{y}.jpeg\";  // \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\";\r\n\r\n    private _lastHeight = 0; // Used to hack positioning of tiles before height is known\r\n    private _lastLoadDynamic = 0;\r\n    private _initialHeightSet = false;\r\n\r\n    tilesLoadedCount = 0;\r\n    tileGrid: TileGrid;\r\n\r\n    constructor() {\r\n        super(\"ddd-osm-3d\");  // FIXME: key is hardcoded\r\n        this.tiles = {};\r\n        // TODO: This makes sense here, but is also duplicated on SceneViewer\r\n        this.tileGrid = createXYZ({\r\n            extent: extentFromProjection( \"EPSG:3857\" ),\r\n            //maxResolution: options.maxResolution,\r\n            //maxZoom: options.maxZoom,\r\n            //minZoom: options.minZoom,\r\n            //tileSize: options.tileSize,\r\n        });\r\n    }\r\n\r\n    update(): void {\r\n        this.updateTilesDynamic();\r\n    }\r\n\r\n    /*\r\n    * From: https://bartwronski.com/2017/04/13/cull-that-cone/\r\n    */\r\n    testConeSphere( origin: Vector3, forward: Vector3, size: number, angle: number, sphereCenter: Vector3, sphereRadius: number ): boolean {\r\n        //console.debug(origin, forward, size, angle, sphereCenter, sphereRadius);\r\n        const V = sphereCenter.subtract( origin );\r\n        const VlenSq = Vector3.Dot( V, V );\r\n        const V1len = Vector3.Dot( V, forward );\r\n        const distanceClosestPoint = Math.cos( angle ) * Math.sqrt( VlenSq - V1len * V1len ) - V1len * Math.sin( angle );\r\n\r\n        const angleCull = distanceClosestPoint > sphereRadius;\r\n        const frontCull = V1len > sphereRadius + size;\r\n        const backCull  = V1len < -sphereRadius;\r\n\r\n        return !( angleCull || frontCull || backCull );\r\n    }\r\n\r\n    updateTilesDynamic(): void {\r\n\r\n        // loading chunks each 100 frames. Bad performance\r\n        this._lastLoadDynamic -= 1;\r\n        if ( this._lastLoadDynamic > 0 ) { return; }\r\n        this._lastLoadDynamic = 1;\r\n\r\n        const sceneViewer: SceneViewer = this.layerManager!.sceneViewer;\r\n\r\n        const positionWGS84: number[] = <number[]> this.layerManager?.sceneViewer.positionWGS84();\r\n        const coordsWGS84: Coordinate = [ positionWGS84[0], positionWGS84[1] ];\r\n        const coordsUtm: Coordinate = olProj.transform(coordsWGS84 , \"EPSG:4326\", \"EPSG:3857\" );\r\n        const tileCoords = this.tileGrid.getTileCoordForCoordAndZ( coordsUtm, 17 );\r\n        //const tileKey = tileCoords[0] + \"/\" + tileCoords[1] + \"/\" + tileCoords[2];\r\n\r\n        // Calculate frustrum (2D)\r\n        const frustrumOrigin = sceneViewer.camera!.position.clone();\r\n        //if (this._lastHeight) { frustrumOrigin.y -= this._lastHeight; }  // Considers all tiles in a plane centered on last\r\n        frustrumOrigin.y = 0;\r\n        const frustrumForward = sceneViewer.camera!.getDirection( Vector3.Forward());\r\n        frustrumForward.y = 0;\r\n        frustrumForward.normalize();\r\n        const frustrumSize = sceneViewer.viewerState.sceneTileDrawDistance * 300.0; // 1500.0;\r\n        const frustrumAngle = sceneViewer.camera!.fov * 2.0; // * (Math.PI / 180.0); // 30.0;\r\n\r\n        this.loadTile( tileCoords );  // ensure elevation for current tile\r\n\r\n        // Project frustrum corners to tiles\r\n\r\n        // Calculate tiles inside frustrum\r\n        const tiledistWalk = sceneViewer.viewerState.sceneTileDrawDistance + 3;\r\n        const tiledistDraw = sceneViewer.viewerState.sceneTileDrawDistance + 0.7;\r\n        for ( let i = -tiledistWalk; i <= tiledistWalk; i++ ) {\r\n            for ( let j = -tiledistWalk; j <= tiledistWalk; j++ ) {\r\n\r\n                // Current tile is already enqueued\r\n                if ( i === 0 && j === 0 ) { continue; }\r\n\r\n                if ( i * i + j * j > tiledistDraw * tiledistDraw ) {\r\n                    this.disableTile([ tileCoords[0], tileCoords[1] + i, tileCoords[2] + j ]);\r\n                } else {\r\n                    const tileCenter = this.tileGrid.getTileCoordCenter([ tileCoords[0], tileCoords[1] + i, tileCoords[2] + j ]);\r\n                    const tileCenterWGS84 = olProj.transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\r\n                    const tileCenterScene = sceneViewer.projection.forward( tileCenterWGS84 );\r\n                    const sphereCenter = new Vector3( tileCenterScene[0], 0, tileCenterScene[1]);  // TODO: Get median height from tile\r\n                    const sphereRadius = 230.0 / 2.0;\r\n                    if ( this.testConeSphere( frustrumOrigin, frustrumForward, frustrumSize, frustrumAngle, sphereCenter, sphereRadius )) {\r\n                        //console.debug(\"Loading: \", [tileCoords[0], tileCoords[1] + i, tileCoords[2] + j])\r\n                        this.loadTile([ tileCoords[0], tileCoords[1] + i, tileCoords[2] + j ]);\r\n                    } else {\r\n                        //console.debug(\"Ignoring: \", [tileCoords[0], tileCoords[1] + i, tileCoords[2] + j])\r\n                        this.disableTile([ tileCoords[0], tileCoords[1] + i, tileCoords[2] + j ]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Sort tiles by distance\r\n\r\n        // Enqueue (1 on mobile? 2 on PC?)\r\n\r\n        // setEnabled(false) on culled chunks\r\n\r\n        // update LOD levels (call lodLevel - remove items, etc) per distance\r\n\r\n\r\n        /*\r\n        for (let i = -1; i <= 1; i++) {\r\n            for (let j = -1; j <= 1; j++) {\r\n                this.loadTile([tileCoords[0], tileCoords[1] + i, tileCoords[2] + j]);\r\n            }\r\n        }\r\n        */\r\n    }\r\n\r\n    disableTile( tileCoords: number[] ): void {\r\n        const z = tileCoords[0];\r\n        const x = tileCoords[1];\r\n        const y = tileCoords[2];\r\n        const tileKey = z + \"/\" + x + \"/\" + y;\r\n\r\n        if ( !( tileKey in this.tiles )) {\r\n            return;\r\n        }\r\n\r\n        const tile = this.tiles[tileKey];\r\n        if ( tile.status !== \"loading\" && tile.node!.isEnabled( false )) {\r\n            tile.node!.setEnabled( false );\r\n            tile.node!.parent = null;  // TODO: this was not working before (tile.parent did not apply)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Gets tile metadata.\r\n    * It does this recursively searching for a \"Metadata\" named node, as the path exporting root metadata to the root node or scene itself hasn't been found to work.\r\n    */\r\n    getTileMetadata( node: Node ): any {\r\n        /*if (node.id.startsWith(\"Metadata\")) {\r\n            return node.metadata.gltf.extras;\r\n        }*/\r\n        for ( const child of node.getChildren()) {\r\n            // Must start with Metadata\r\n            if ( child.id.indexOf( \"Metadata\" ) == 0 ) {\r\n                return child.metadata.gltf.extras;\r\n            }\r\n        }\r\n        for ( const child of node.getChildren()) {\r\n            const md = this.getTileMetadata( <Mesh>child );\r\n            if ( md !== null ) { return md; }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // TODO: Tile coordinates should be made a type or reuse OpenLayers grid coordinates type\r\n    loadTile( tileCoords: number[] ): void {\r\n\r\n        //console.debug(tileCoords);\r\n        const z = tileCoords[0];\r\n        const x = tileCoords[1];\r\n        const y = tileCoords[2];\r\n        const tileKey = z + \"/\" + x + \"/\" + y;\r\n\r\n        const tileExtent = this.tileGrid.getTileCoordExtent( tileCoords );\r\n        const tileCenter = extent.getCenter( tileExtent );\r\n        const tileCenterWGS84 = olProj.transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\r\n        //const tileCenterScene = this.layerManager!.sceneViewer.projection.forward( tileCenterWGS84 );\r\n\r\n        const tileExtentMinScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getBottomLeft( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\r\n        const tileExtentMaxScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getTopRight( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\r\n        const sizeWidth = Math.abs( tileExtentMaxScene[0] - tileExtentMinScene[0]);\r\n        const sizeHeight = Math.abs( tileExtentMaxScene[1] - tileExtentMinScene[1]);\r\n\r\n        if ( tileKey in this.tiles ) {\r\n            const tile = this.tiles[tileKey];\r\n            if ( tile.status !== \"loading\" && !tile.node!.isEnabled( false )) {\r\n                tile.node!.parent = null; // this.layerManager!.sceneViewer.scene;\r\n                tile.node!.setEnabled( true );\r\n                //tile.node.freezeWorldMatrix();\r\n            }\r\n            return;\r\n        } else {\r\n            this.tiles[tileKey] = new GeoTile3D( tileKey );\r\n            this.tiles[tileKey].status = \"loading\";\r\n            this.tiles[tileKey].coordsTileGrid = tileCoords;\r\n        }\r\n\r\n        //const tileUrlBase = './scenes/ddd_http_';\r\n        //const tileUrlBase = 'http://localhost:8000/cache/ddd_http/';\r\n        //const tileUrlBase = 'http://' + app.dddConfig.tileUrlBase + ':8000/cache/ddd_http/';\r\n        //const tileUrlBase = 'http://' + location.hostname + '/cache/ddd_http/';\r\n        const tileUrlBase = this.layerManager!.sceneViewer.viewerState.dddConfig.tileUrlBase;\r\n        const tileUrlSuffix = this.layerManager!.sceneViewer.viewerState.dddConfig.tileUrlSuffix;  // e.g. \".uncompressed\"\r\n        \r\n        //const tileUrl = tileUrlBase + z + \"/\" + x + \"/\" + y + \".glb\";\r\n        const tileUrl = tileUrlBase + z + \"/\" + x + \"/\" + y + tileUrlSuffix + \".glb\";\r\n\r\n        //console.debug(\"Loading: \" + tileUrl);\r\n\r\n        //const pivot = new TransformNode( \"chunk_\" + tileKey.replaceAll( \"/\", \"_\" ), this.layerManager!.sceneViewer.scene );  // new Mesh(\"chunk_\" + tileKey, this.layerManager.sceneViewer.scene);\r\n        const pivot = new Mesh( \"chunk_\" + tileKey.replaceAll( \"/\", \"_\" ), this.layerManager!.sceneViewer.scene );  // new Mesh(\"chunk_\" + tileKey, this.layerManager.sceneViewer.scene);\r\n\r\n        //let reversePivot = new TransformNode(\"chunk_reverse_\" + tileKey, this.scene);  // new Mesh(\"chunk_\" + tileKey, this.scene);\r\n        //let rawPivot = new TransformNode(\"chunk_raw_\" + tileKey, this.scene);  // new Mesh(\"chunk_\" + tileKey, this.scene);\r\n        //reversePivot.scaling = new Vector3(1, 1, -1);  // Babylon uses a parent node with this scale to flip glTF models, redone here\r\n        //rawPivot.parent = reversePivot;\r\n        //reversePivot.parent = pivot;\r\n        //pivot.parent = this.scene;\r\n\r\n        let marker = this.loadQuadMarker( tileCoords, Color3.Gray());\r\n        this.tiles[tileKey].node = marker;\r\n\r\n        this.layerManager!.sceneViewer.queueLoader.enqueueLoadModel( tileUrl,\r\n            // onSuccess\r\n            ( newMeshes: AbstractMesh[], _particleSystems: any, _skeletons: any ) => {\r\n\r\n                // Ensure tile still exists:\r\n                if (! (tileKey in this.tiles)) {\r\n                    newMeshes[0].parent = null;\r\n                    newMeshes[0].dispose();\r\n                    return;\r\n                }\r\n\r\n                //console.log(\"GLB loaded\", newMeshes);\r\n\r\n                marker.dispose( false, true );\r\n                //marker.parent = null;\r\n\r\n                let minHeight = Number.POSITIVE_INFINITY;\r\n                let maxHeight = Number.NEGATIVE_INFINITY;\r\n                newMeshes.forEach( (mesh: AbstractMesh, _i: number) => {\r\n                    if (this.layerManager!.sceneViewer.shadowGenerator) {\r\n                        mesh.receiveShadows = true;\r\n                        if ( mesh.metadata && mesh.metadata.gltf.extras &&\r\n                                (( mesh.metadata.gltf.extras[\"ddd:shadows\"] === false ) ||\r\n                                 ( mesh.metadata.gltf.extras[\"ddd:shadows\"] === \"false\" ) ||\r\n                                 ( mesh.metadata.gltf.extras[\"ddd:path\"].indexOf( \"/Areas_\" ) > 0 ) ||\r\n                                 ( mesh.metadata.gltf.extras[\"ddd:path\"].indexOf( \"/Ways_\" ) > 0 ))) {\r\n                            //console.debug(\"No shadow\");\r\n                            return;\r\n                        }\r\n\r\n                        // TODO: Do this at SceneViewer processMesh level\r\n                        this.layerManager!.sceneViewer.shadowGenerator.getShadowMap()!.renderList!.push(mesh);\r\n                    }\r\n\r\n                    //console.debug(mesh.getBoundingInfo());\r\n                    const heightMin = mesh.getBoundingInfo().boundingBox.minimumWorld.y;\r\n                    if ( heightMin < minHeight && heightMin !== 0 ) { minHeight = heightMin; }\r\n                    const heightMax = mesh.getBoundingInfo().boundingBox.maximumWorld.y;\r\n                    if ( heightMax > maxHeight && heightMax !== 0 ) { maxHeight = heightMax; }\r\n\r\n                    /*\r\n                      if(mesh.material) {\r\n                          if (mesh.id.indexOf(\"Item\") < 0 && mesh.id.indexOf(\"Building\") < 0) {\r\n                              mesh.material = materialPlane;\r\n                          }\r\n                          //mesh.overrideMaterialSideOrientation = Mesh.DOUBLESIDE;\r\n                          //mesh.updateMeshPositions();\r\n                      }\r\n                      */\r\n                    //console.debug(mesh.absolutePosition);\r\n                    //mesh.position = new Vector3(mesh.position.x, mesh.position.y, -mesh.position.z);\r\n                    //mesh.updateMeshPositions();\r\n                    //mesh.parent = rawPivot;\r\n                });\r\n\r\n                // Reparent root\r\n                (<Mesh> newMeshes[0]).parent = <Node> pivot;\r\n                newMeshes[0].id = tileKey.replaceAll( \"/\", \"_\" );\r\n                this.tiles[tileKey].node = pivot;\r\n                this.tiles[tileKey].status = \"loaded\";\r\n\r\n\r\n                const tileExtent = this.tileGrid.getTileCoordExtent( tileCoords );\r\n                const tileCenter = extent.getCenter( tileExtent );\r\n                const tileCenterWGS84 = olProj.transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\r\n                const tileCenterScene = this.layerManager!.sceneViewer.projection.forward( tileCenterWGS84 );\r\n\r\n                //let distance = 225.0;\r\n                //pivot.position = new Vector3((x - 62360) * distance, 0, -(y - 48539) * distance);\r\n                //pivot.scaling = new Vector3(1, 1, -1);\r\n                pivot.position = new Vector3( tileCenterScene[0], 0, tileCenterScene[1]);\r\n                pivot.rotation = new Vector3( 0, Math.PI, 0 );\r\n\r\n                pivot.freezeWorldMatrix();\r\n\r\n                this.tiles[tileKey].node = pivot;\r\n\r\n                this._lastHeight = minHeight;\r\n\r\n                this.tilesLoadedCount++;\r\n                if ( ! this._initialHeightSet ) {\r\n                    //console.debug(\"Repositioning camera height based on terrain height: \" + maxHeight);\r\n                    //that.layerManager.sceneViewer.camera.position.y += maxHeight;\r\n\r\n                    const ray = new Ray(\r\n                        new Vector3(this.layerManager!.sceneViewer.camera!.position.x,\r\n                            -100.0, this.layerManager!.sceneViewer.camera!.position.z ),\r\n                        new Vector3( 0, 1, 0 ), 3000.0 );\r\n                    const pickResult = this.layerManager!.sceneViewer.scene.pickWithRay( ray );\r\n                    if ( pickResult && pickResult.pickedMesh && pickResult.pickedMesh.id &&\r\n                              pickResult.pickedMesh.id.indexOf( \"placeholder_\" ) !== 0 &&\r\n                              pickResult.pickedMesh.id.indexOf( \"skyBox\" ) !== 0 ) {\r\n                        //console.debug(\"Setting height from: \" + pickResult.pickedMesh.id);\r\n                        this._initialHeightSet = true;\r\n                        this.layerManager!.sceneViewer.camera!.position.y = ( pickResult.distance - 100.0 );\r\n                        if ( this.layerManager!.sceneViewer.viewerState.positionGroundHeight ) {\r\n                            this.layerManager!.sceneViewer.camera!.position.y += this.layerManager!.sceneViewer.viewerState.positionGroundHeight;\r\n                        } else {\r\n                            this.layerManager!.sceneViewer.camera!.position.y += 40.0;\r\n                        }\r\n                    } else {\r\n                        //that._tilesLoadedCount--;\r\n                        //that.layerManager.sceneViewer.camera.position.y += maxHeight;\r\n                    }\r\n                }\r\n\r\n                const tileMetadata = this.getTileMetadata( pivot );\r\n                //console.debug(\"Tile metadata: \", tileMetadata);\r\n\r\n                // Replace materials, instancing...\r\n                pivot.metadata = {\r\n                    \"tileCoords\": tileCoords,\r\n                    \"tileSize\": [ sizeWidth, sizeHeight ],\r\n                    \"tileInfo\": tileMetadata,\r\n                };\r\n\r\n                this.layerManager!.sceneViewer.scene.blockfreeActiveMeshesAndRenderingGroups = true;\r\n                this.layerManager!.sceneViewer.processMesh( <Mesh>pivot, <Mesh>pivot );  // TODO: Wrong conversion, use Node for \"processMesh\"\r\n                this.layerManager!.sceneViewer.scene.blockfreeActiveMeshesAndRenderingGroups = false;\r\n\r\n                //pivot.occlusionType = AbstractMesh.OCCLUSION_TYPE_OPTIMISTIC;\r\n                pivot.freezeWorldMatrix();\r\n\r\n                // TODO: Removed during TS migration, but this is needed to support ground texture replacement\r\n                //this.groundTextureLayerProcessNode( tileCoords, pivot );\r\n\r\n                // Check if the selected node is in the recently loaded node\r\n                // TODO: Should use a generic notification + object id/naming system\r\n                if ( this.layerManager!.sceneViewer.viewerState.sceneSelectedMeshId ) {\r\n                    const criteria = { \"_node_name\": this.layerManager!.sceneViewer.viewerState.sceneSelectedMeshId };\r\n                    //console.debug(criteria);\r\n                    const foundMesh = this.layerManager!.sceneViewer.findNode( <Mesh> pivot, criteria );\r\n                    //console.debug(foundMesh);\r\n                    if ( foundMesh ) {\r\n                        this.layerManager!.sceneViewer.selectMesh( <Mesh> foundMesh, true );\r\n                        this.layerManager!.sceneViewer.viewerState.sceneSelectedMeshId = null;  // Triggers watchers update\r\n                    }\r\n                }\r\n\r\n\r\n                /*\r\n                  this.sceneViewer.selectMesh(pickResult.pickedMesh);\r\n                  let meshName = pickResult.pickedMesh.id.split(\"/\").pop().replaceAll('#', '_'); // .replaceAll(\"_\", \" \");\r\n                  this.$router.push('/3d/item/' + meshName + '/' + this.sceneViewer.positionString()).catch(()=>{});\r\n                  */\r\n\r\n\r\n            },\r\n            // onError\r\n            ( _scene: any, _msg: string, ex: any ) => {\r\n                // eslint-disable-next-line no-console\r\n                \r\n                //console.debug( \"Tile model (.glb) loading error: \", ex );\r\n\r\n                let request = ex.innerError.request;\r\n\r\n                if ( request != null && request.status === 404 ) {\r\n                    // 404 - tile is being generated, show OSM tile as replacement\r\n                    //console.debug(ex.request);\r\n\r\n                    marker.dispose( false, true );\r\n                    marker = this.loadQuadTile( tileCoords );  // , Color3.Red()\r\n                    this.tiles[tileKey].node = marker; // \"notfound\";\r\n                    this.tiles[tileKey].status = \"notfound\";\r\n\r\n                    // Process response, DDD server includes JSON info about tile generation status\r\n                    try {\r\n                        const dataView = new DataView(request.response);\r\n                        // TextDecoder interface is documented at http://encoding.spec.whatwg.org/#interface-textdecoder\r\n                        const decoder = new TextDecoder(\"utf-8\");\r\n                        const decodedString = decoder.decode(dataView);\r\n                        const responseData = JSON.parse(decodedString);\r\n                        console.debug(responseData);\r\n                        this.layerManager!.sceneViewer.viewerState.remoteQueueJobsStatus.push(responseData);\r\n                    } catch (e) {\r\n                        console.error(\"Could not add queued job to viewer state: \" + e);\r\n                    }\r\n\r\n                } else {\r\n                    // Error: colour marker red\r\n                    console.debug( \"Tile model (.glb) loading error (not 404): \", ex );\r\n\r\n                    marker.dispose( false, true );\r\n                    marker = this.loadQuadTile( tileCoords );  // , Color3.Red()\r\n                    this.tiles[tileKey].node = marker; // \"notfound\";\r\n                    this.tiles[tileKey].status = \"error\";\r\n\r\n\r\n                    const color = Color3.Red();\r\n                    (<StandardMaterial>(<Mesh>marker).material).emissiveColor = color;\r\n                }\r\n\r\n            }\r\n        );\r\n        //model.parent = pivot;\r\n\r\n    }\r\n\r\n    loadQuadMarker( tileCoords: number[], color: Color3 = Color3.Gray()): Node {\r\n        const z = tileCoords[0];\r\n        const x = tileCoords[1];\r\n        const y = tileCoords[2];\r\n        const tileKey = z + \"/\" + x + \"/\" + y;\r\n\r\n        const tileExtent = this.tileGrid.getTileCoordExtent( tileCoords );\r\n        const tileCenter = extent.getCenter( tileExtent );\r\n        const tileCenterWGS84 = olProj.transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\r\n        const tileCenterScene = this.layerManager!.sceneViewer.projection.forward( tileCenterWGS84 );\r\n\r\n        const tileExtentMinScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getBottomLeft( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\r\n        const tileExtentMaxScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getTopRight( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\r\n        const sizeWidth = Math.abs( tileExtentMaxScene[0] - tileExtentMinScene[0]);\r\n        const sizeHeight = Math.abs( tileExtentMaxScene[1] - tileExtentMinScene[1]);\r\n\r\n        const markerName = \"Tile \" + tileKey;  // \"placeholder_\" + tileKey \r\n        const marker = MeshBuilder.CreatePlane( \"placeholder_\" + tileKey, { width: sizeWidth, height: sizeHeight, sideOrientation: Mesh.DOUBLESIDE }, this.layerManager!.sceneViewer.scene );\r\n        marker.metadata = {\"ddd:title\": markerName}\r\n\r\n        marker.position = new Vector3( tileCenterScene[0], this._lastHeight, tileCenterScene[1]);\r\n        marker.rotation = new Vector3( Math.PI * 0.5, 0, 0 );\r\n\r\n        //Creation of a repeated textured material\r\n        const materialPlane = new StandardMaterial( \"textureTile_\" + tileKey, this.layerManager!.sceneViewer.scene );\r\n        //materialPlane.diffuseTexture = new Texture(\"https://a.tile.openstreetmap.org/\" + z + \"/\" + x + \"/\" + y + \".png\", this.scene);\r\n        materialPlane.diffuseColor = color;\r\n        materialPlane.specularColor = Color3.Black();\r\n        /*\r\n        materialPlane.diffuseTexture.uScale = 1.0 / 225.0;\r\n        materialPlane.diffuseTexture.vScale = -1.0 / 225.0;\r\n        materialPlane.diffuseTexture.uOffset = -0.5;\r\n        materialPlane.diffuseTexture.vOffset = -0.5;\r\n        */\r\n        materialPlane.emissiveColor = color; // new Color3(1.0, 1.0, 1.);\r\n        materialPlane.disableLighting = true;\r\n        materialPlane.backFaceCulling = false;\r\n\r\n        marker.material = materialPlane;\r\n\r\n        return marker;\r\n    }\r\n\r\n    loadQuadTile( tileCoords: number[], color=Color3.White()): Node {\r\n\r\n        const z = tileCoords[0];\r\n        const x = tileCoords[1];\r\n        const y = tileCoords[2];\r\n        const tileKey = z + \"/\" + x + \"/\" + y;\r\n\r\n        const tileExtent = this.tileGrid.getTileCoordExtent( tileCoords );\r\n        const tileCenter = extent.getCenter( tileExtent );\r\n        const tileCenterWGS84 = olProj.transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\r\n        const tileCenterScene = this.layerManager!.sceneViewer.projection.forward( tileCenterWGS84 );\r\n\r\n        const tileExtentMinScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getBottomLeft( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\r\n        const tileExtentMaxScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getTopRight( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\r\n        const sizeWidth = Math.abs( tileExtentMaxScene[0] - tileExtentMinScene[0]);\r\n        const sizeHeight = Math.abs( tileExtentMaxScene[1] - tileExtentMinScene[1]);\r\n\r\n        //console.debug(sizeWidth, sizeHeight);\r\n        const markerName = \"Tile \" + tileKey;  // \"placeholder_\" + tileKey \r\n        const marker = MeshBuilder.CreatePlane( \"placeholder_\" + tileKey, { width: sizeWidth, height: sizeHeight, sideOrientation: Mesh.DOUBLESIDE }, this.layerManager!.sceneViewer.scene );\r\n        marker.metadata = {\"ddd:title\": markerName}\r\n\r\n        marker.position = new Vector3( tileCenterScene[0], this._lastHeight, tileCenterScene[1]);\r\n        marker.rotation = new Vector3( Math.PI * 0.5, 0, 0 );\r\n\r\n        //Creation of a repeated textured material\r\n        const materialPlane = new StandardMaterial( \"textureTile_\" + tileKey, this.layerManager!.sceneViewer.scene );\r\n        materialPlane.diffuseTexture = new Texture( \"https://a.tile.openstreetmap.org/\" + z + \"/\" + x + \"/\" + y + \".png\", this.layerManager!.sceneViewer.scene );\r\n\r\n        //if (!color) color = Color3.Black; //new Color3(0, 0, 0);\r\n        materialPlane.specularColor = Color3.Black();\r\n        /*\r\n        materialPlane.diffuseTexture.uScale = 1.0 / 225.0;\r\n        materialPlane.diffuseTexture.vScale = -1.0 / 225.0;\r\n        materialPlane.diffuseTexture.uOffset = -0.5;\r\n        materialPlane.diffuseTexture.vOffset = -0.5;\r\n        */\r\n        materialPlane.emissiveColor = color;  // new Color3(1.0, 1.0, 1.);\r\n        materialPlane.disableLighting = true;\r\n        materialPlane.backFaceCulling = false;\r\n\r\n        marker.material = materialPlane;\r\n\r\n        return marker;\r\n    }\r\n\r\n    groundTextureLayerProcessNode(tile: GeoTile3D, node: Node): void {\r\n\r\n        const tileCoords: number[] = <number[]> tile.coordsTileGrid;\r\n\r\n        let materialGround = null;\r\n\r\n        if ( this.groundTextureLayerUrl ) {\r\n            const z = tileCoords[0];\r\n            const x = tileCoords[1];\r\n            const y = tileCoords[2];\r\n\r\n            const tileExtent = this.tileGrid.getTileCoordExtent( tileCoords );\r\n            const tileCenter = extent.getCenter( tileExtent );\r\n            const tileCenterWGS84 = olProj.transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\r\n            const tileCenterScene = this.layerManager!.sceneViewer.projection.forward( tileCenterWGS84 );\r\n\r\n            const tileExtentMinScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getBottomLeft( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\r\n            const tileExtentMaxScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getTopRight( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\r\n            const sizeWidth = Math.abs( tileExtentMaxScene[0] - tileExtentMinScene[0]);\r\n            const sizeHeight = Math.abs( tileExtentMaxScene[1] - tileExtentMinScene[1]);\r\n\r\n            // Create material\r\n            //console.debug(\"Creating material for ground texture: \" + url);\r\n            const tileKey = tileCoords[0] + \"/\" + tileCoords[1] + \"/\" + tileCoords[2];\r\n            const url = this.replaceTileCoordsUrl( tileCoords, this.groundTextureLayerUrl );\r\n            materialGround = new StandardMaterial( \"materialGround_\" + tileKey, this.layerManager!.sceneViewer.scene );\r\n            materialGround.roughness = 1.0;\r\n            //materialGround.reflectionFresnelParameters = new FresnelParameters();\r\n            materialGround.specularPower = 0.0;           \r\n            materialGround.diffuseColor = new Color3( 0.2, 0.2, 0.2 ); // Color3.Black();   \r\n            materialGround.ambientColor = new Color3( 0.07, 0.07, 0.07 ); // Color3.Black();   \r\n            materialGround.specularColor = new Color3(0.05, 0.05, 0.05); // Color3.Black();\r\n            materialGround.emissiveColor = new Color3(0.05, 0.05, 0.05); // Color3.White();  // new Color3(1.0, 1.0, 1.);\r\n            //materialGround.disableLighting = true;\r\n            //materialGround.backFaceCulling = false;\r\n            const materialGroundTexture: Texture = new Texture( url, this.layerManager!.sceneViewer.scene );\r\n            materialGround.diffuseTexture = materialGroundTexture;\r\n            materialGround.ambientTexture = materialGroundTexture;\r\n            //materialGround.specularTexture = materialGroundTexture;\r\n            materialGround.emissiveTexture = materialGroundTexture;\r\n            materialGround.linkEmissiveWithDiffuse = true;\r\n\r\n            //materialGroundTexture.uScale = 4 * 1.0 / ( sizeWidth + 0 );  // Force small texture overlap to avoid texture repeating\r\n            //materialGroundTexture.vScale = 4 * -1.0 / ( sizeHeight + 1 );  // Force small texture overlap to avoid texture repeating\r\n            materialGroundTexture.uScale = 4 * 1.0 / sizeWidth * ( 127/128 );  // Force small texture overlap to avoid texture repeating\r\n            materialGroundTexture.vScale = 4 * -1.0 / sizeHeight * ( 127/128 );  // Force small texture overlap to avoid texture repeating\r\n            materialGroundTexture.uOffset = -0.5;\r\n            materialGroundTexture.vOffset = -0.5;\r\n            materialGroundTexture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n            materialGroundTexture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n            //materialGround.bumpTexture = materialGround.diffuseTexture;\r\n            //materialGround.bumpTexture.uScale = 1.0 / sizeWidth;\r\n            //materialGround.bumpTexture.vScale = 1.0 / sizeHeight;\r\n            //materialGround.bumpTexture.uOffset = -0.5;\r\n            //materialGround.bumpTexture.vOffset = -0.5;\r\n        }\r\n\r\n        // Assign\r\n        const meshes = node.getChildMeshes();\r\n        for ( const mesh of meshes ) {\r\n            if ( mesh && mesh.metadata && mesh.metadata.gltf && mesh.metadata.gltf.extras ) {\r\n                const metadata = mesh.metadata.gltf.extras;\r\n                if (( metadata[\"ddd:path\"].indexOf( \"/Areas\" ) > 0 ) ||\r\n                    ( metadata[\"ddd:path\"].indexOf( \"/Ways\" ) > 0 )) {\r\n                    if ( materialGround !== null ) {\r\n                        if ( !( \"_ground_material_original\" in mesh.metadata )) {\r\n                            mesh.metadata[\"_ground_material_original\"] = mesh.material;\r\n                        }\r\n                        mesh.material = materialGround;\r\n                    } else {\r\n                        if ( mesh.metadata[\"_ground_material_original\"] ) {\r\n                            mesh.material = mesh.metadata[\"_ground_material_original\"];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    groundTextureLayerSetUrl( url: string ): void {\r\n        // \"https://a.tile.openstreetmap.org/\" + z + \"/\" + x + \"/\" + y + \".png\"\r\n        //console.debug(\"Layer setting ground texture layer: \" + url);\r\n        this.groundTextureLayerUrl = url;\r\n\r\n        // Update existing tiles\r\n        for ( const key in this.tiles ) {\r\n            const tile = this.tiles[key];\r\n            this.groundTextureLayerProcessNode( tile, <Node> tile.node );\r\n        }\r\n    }\r\n\r\n    replaceTileCoordsUrl( tileCoords: number[], url: string ): string {\r\n        let result = url;\r\n        result = result.replace( \"{z}\", tileCoords[0].toString());\r\n        result = result.replace( \"{x}\", tileCoords[1].toString());\r\n        result = result.replace( \"{y}\", tileCoords[2].toString());\r\n        return result;\r\n    }\r\n\r\n    /*\r\n    createTextMaterial( text: string ): StandardMaterial {\r\n\r\n        //Create dynamic texture\r\n        const texture = new DynamicTexture( \"dynamicTexture_text_\" + text , { width:512, height:256 }, this.layerManager!.sceneViewer.scene );\r\n        //var textureContext = texture.getContext();\r\n        const font = \"bold 44px monospace\";\r\n        texture.drawText( \"Generating...\\nPlease try again later (5+ min).\", 75, 135, font, \"green\", \"white\", true, true );\r\n\r\n        const material = new StandardMaterial( \"Mat\" + text, this.layerManager!.sceneViewer.scene );\r\n        material.diffuseTexture = texture;\r\n\r\n        return material;\r\n    }\r\n    */\r\n\r\n    disposeTile(tile: Tile3D) {\r\n        console.debug(\"Disposing tile: \" + tile.key);\r\n        if (tile.node) {\r\n            //tile.node.setEnabled(false);\r\n            tile.node.parent = null;\r\n            tile.node.dispose();\r\n            tile.node = null;\r\n        }\r\n        delete this.tiles[tile.key];\r\n    }\r\n\r\n    clearScene() {\r\n        for (const tileKey in this.tiles) {\r\n            const tile = this.tiles[tileKey];\r\n            this.disposeTile(tile);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport { GeoTile3DLayer };\r\n\r\n","import { AbstractMesh, Color3, Mesh, MeshBuilder, Node, Ray, StandardMaterial, Texture, TransformNode, Vector3 } from \"@babylonjs/core\";\r\nimport { Coordinate } from \"ol/coordinate\";\r\nimport * as extent from \"ol/extent\";\r\nimport * as olProj from \"ol/proj\";\r\nimport { createXYZ, extentFromProjection } from \"ol/tilegrid\";\r\nimport TileGrid from \"ol/tilegrid/TileGrid\";\r\nimport { SceneViewer } from \"../SceneViewer\";\r\nimport { Base3DLayer } from \"./Base3DLayer\";\r\nimport { GeoJson3DLayer } from \"./GeoJson3DLayer\";\r\n\r\n\r\n\r\nclass OverlayLayer extends Base3DLayer {\r\n\r\n    sourceLayerKey: string;\r\n\r\n    items: HTMLElement[] = [];\r\n\r\n    div: HTMLElement | null = null;\r\n\r\n    template: string | null = null;\r\n\r\n    maxDistance: number = 0;\r\n\r\n    maxItems: number = 10;\r\n\r\n    occlude: boolean = false;\r\n\r\n    constructor(key: string, sourceLayerKey: string) {\r\n        super(key);\r\n        this.sourceLayerKey = sourceLayerKey;\r\n        setTimeout(() => {\r\n            this.createOverlayDiv();\r\n            this.updateSceneFromFeatures();\r\n        }, 0);\r\n    }\r\n\r\n    createOverlayDiv(): void {\r\n        // Add an overlay DIV over the 3D canvas\r\n        // FIXME: This should be created by the scene viewer, and other divs\r\n        const sceneViewer: SceneViewer = this.layerManager!.sceneViewer;\r\n        this.div = document.createElement(\"div\");\r\n        sceneViewer.element.appendChild(this.div);\r\n        this.div.className = \"ddd-layer-overlay\";\r\n\r\n        this.div.style.zIndex = \"5\";\r\n        this.div.style.width = \"100%\";\r\n        this.div.style.height = \"100%\";\r\n        this.div.style.position = \"absolute\";\r\n        this.div.style.top = \"0\";\r\n        this.div.style.left = \"0\";\r\n        this.div.style.right = \"0\";\r\n        this.div.style.bottom = \"0\";\r\n        this.div.style.pointerEvents = \"none\";\r\n\r\n    }\r\n\r\n    resizeOverlayDiv() {\r\n        const sceneViewer: SceneViewer = this.layerManager!.sceneViewer;\r\n        this.div!.style.width = sceneViewer.canvas.style.width;\r\n        this.div!.style.height = sceneViewer.canvas.style.height;\r\n    }\r\n\r\n    update(): void {\r\n    }\r\n\r\n    setVisible(visible: boolean) {\r\n        super.setVisible(visible);\r\n        if (this.div) this.div.style.display = \"visible\" ? \"block\" : \"none\";\r\n        /*\r\n        for (let node of this.sceneNodes) {\r\n            node.setEnabled(this.visible);\r\n        }\r\n        */\r\n    }\r\n\r\n\r\n    /**\r\n     * Update scene generating a DIV for each feature in the source layer.\r\n     */\r\n    updateSceneFromFeatures() {\r\n        let sourceLayer = <GeoJson3DLayer> this.layerManager!.getLayer(this.sourceLayerKey)!;\r\n        for (let feature of sourceLayer.featuresPoints) {\r\n            let html = '<div style=\"background: white; display: inline-block;\">Feature: ' + feature + '</div>';\r\n            let featureDiv = document.createElement(\"div\");\r\n            this.div!.appendChild(featureDiv);\r\n            featureDiv.outerHTML = html;\r\n        }\r\n\r\n        /*\r\n        for (let feature of this.featuresLines) {\r\n            let marker = MeshBuilder.CreateLines(\"lineMarker\", { points: feature.coordsScene }, sceneViewer.scene);\r\n            marker.material = this.featureMaterial;\r\n            marker.parent = this.rootNode;\r\n            //this.sceneNodes.push(marker);\r\n        }\r\n        */\r\n    }\r\n\r\n\r\n    clearScene() {\r\n        /*\r\n        if (this.rootNode) {\r\n            this.rootNode.parent = null;\r\n            this.rootNode.dispose();\r\n            this.rootNode = null;\r\n        }\r\n        */\r\n    }\r\n\r\n}\r\n\r\n\r\nexport { OverlayLayer };\r\n\r\n","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\n\r\n/**\r\n * Manages environment rendering, using time, date or other information\r\n * to set up the skybox and lighting.\r\n */\r\nclass DefaultEnvironment  {\r\n\r\n    protected dddViewer: SceneViewer;\r\n\r\n    constructor(dddViewer: SceneViewer) {\r\n\r\n        // Reference to DDDViewer\r\n        this.dddViewer = dddViewer;\r\n\r\n        // Babylon camera which we are controlling\r\n        //this.camera = dddViewer.camera;\r\n    }\r\n\r\n    update(deltaTime: number): void {\r\n\r\n    }\r\n\r\n    initialize(): void {\r\n\r\n    }\r\n\r\n    dispose(): void {\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { DefaultEnvironment };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera, Color3, ColorCurves, DefaultRenderingPipeline, ImageProcessingPostProcess, LensRenderingPipeline, Scene } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\nimport { ViewerState } from \"ViewerState\";\r\n\r\n/**\r\n * Rendering and pipeline configuration\r\n * (effects, shadows...)\r\n */\r\nclass DefaultRenderPipeline  {\r\n\r\n    protected dddViewer: SceneViewer;\r\n\r\n    protected scene: Scene;\r\n\r\n    protected viewerState: ViewerState;\r\n\r\n    constructor(dddViewer: SceneViewer) {\r\n\r\n        // Reference to DDDViewer\r\n        this.dddViewer = dddViewer;\r\n        this.viewerState = dddViewer.viewerState;\r\n        this.scene = dddViewer.scene;\r\n\r\n        // Babylon camera which we are controlling\r\n        //this.camera = dddViewer.camera;\r\n    }\r\n\r\n    update(deltaTime: number): void {\r\n\r\n    }\r\n\r\n    initialize(): void {\r\n\r\n    }\r\n\r\n    dispose(): void {\r\n\r\n    }\r\n\r\n    scenePostprocessingSetEnabled( value: boolean ): void {\r\n        this.viewerState.scenePostprocessingEnabled = value;\r\n        //localStorage.setItem('dddScenePostprocessingSetEnabled', value);\r\n        //alert('Reload the viewer for changes to take effect.');\r\n        this.updateRenderPipeline();\r\n    }\r\n\r\n    updateRenderPipeline(): void {\r\n\r\n        this.scene.postProcessesEnabled = this.viewerState.scenePostprocessingEnabled;\r\n\r\n        if ( !this.viewerState.scenePostprocessingEnabled ) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    initRenderPipeline(): void {\r\n        // Postprocess\r\n        // The default pipeline applies other settings, we'd better off using Bloom independently if possible\r\n        // Also note this is tied to the camera, and thus if used, this should be updated when the camera changes\r\n        const defaultPipeline = new DefaultRenderingPipeline( \"default\", true, this.scene, [ <Camera> this.dddViewer.camera ]);\r\n        defaultPipeline.fxaaEnabled = true;\r\n        defaultPipeline.bloomEnabled = true;\r\n        defaultPipeline.bloomWeight = 1.0;  // 1.5 is exagerated but maybe usable for pics\r\n        //defaultPipeline.cameraFov = this.camera.fov;\r\n        defaultPipeline.imageProcessing.toneMappingEnabled = true;\r\n\r\n\r\n        //var postProcessHighlights = new HighlightsPostProcess(\"highlights\", 0.1, camera);\r\n        //var postProcessTonemap = new TonemapPostProcess(\"tonemap\", TonemappingOperator.Hable, 1.2, camera);\r\n\r\n        // See: https://doc.babylonjs.com/divingDeeper/postProcesses/postProcessRenderPipeline\r\n        /*\r\n        var standardPipeline = new PostProcessRenderPipeline(this.engine, \"standardPipeline\");\r\n        var effectBloom = new BloomEffect(this.scene, 4, 5.0, 2.0);\r\n        //var effectDepthOfField = new DepthOfFieldEffect(this.scene);\r\n        var postProcessChain = new PostProcessRenderEffect(this.engine, \"postProcessChain\", function() { return [effectBloom, effectDepthOfField] });\r\n        standardPipeline.addEffect(effectBloom);\r\n        this.scene.postProcessRenderPipelineManager.addPipeline(standardPipeline);\r\n        */\r\n\r\n        // Screen space reflections\r\n        /*\r\n        const ssr = new ScreenSpaceReflectionPostProcess(\r\n            \"ssr\", // The name of the post-process\r\n            this.scene, // The scene where to add the post-process\r\n            1.0, // The ratio of the post-process\r\n            this.camera // To camera to attach the post-process\r\n        );\r\n        ssr.reflectionSamples = 32; // Low quality.\r\n        ssr.strength = 2; // Set default strength of reflections.\r\n        ssr.reflectionSpecularFalloffExponent = 3; // Attenuate the reflections a little bit. (typically in interval [1, 3])\r\n        */\r\n\r\n        const lensRenderingPipeline = new LensRenderingPipeline( \"lens\", {\r\n            edge_blur: 0.25,                // 1.0 is too distorted in the borders for walk/view mode (maybe for pictures)\r\n            chromatic_aberration: 1.0,\r\n            distortion: 0.7,                // (dilate effect) 0.5 -> subtle\r\n            dof_focus_distance: 60,\r\n            dof_aperture: 1.0,            // 1.2 is already too blurry for OSM, 6.0 is very high\r\n            grain_amount: 0.0, // 0.5,\r\n            dof_pentagon: false, // true,\r\n            dof_gain: 1.0,\r\n            dof_threshold: 1.0,\r\n            dof_darken: 0.25\r\n        }, this.scene, 1.0, [ <Camera> this.dddViewer.camera ]);\r\n        //this.scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline('lensEffects', camera);\r\n\r\n        /*\r\n        const ssao = new SSAO2RenderingPipeline('ssao', this.scene, {\r\n          ssaoRatio: .5,\r\n          blurRatio: 1\r\n        }, [ this.camera ], true)\r\n        */\r\n\r\n        var curve = new ColorCurves();\r\n        curve.globalHue = 0;\r\n        curve.globalDensity = 80;\r\n        curve.globalSaturation = 5;\r\n        curve.highlightsHue = 0;\r\n        curve.highlightsDensity = 80;\r\n        curve.highlightsSaturation = 40;\r\n        curve.shadowsHue = 0;\r\n        curve.shadowsDensity = 80;\r\n        curve.shadowsSaturation = 40;\r\n        this.scene.imageProcessingConfiguration.colorCurvesEnabled = true;\r\n        this.scene.imageProcessingConfiguration.colorCurves = curve;\r\n        var postProcess = new ImageProcessingPostProcess(\"processing\", 1.0, this.dddViewer.camera);\r\n\r\n        // Fog\r\n        //this.scene.fogMode = Scene.FOGMODE_EXP;\r\n        //this.scene.fogDensity = 0.005;  // default is 0.1\r\n        this.scene.fogMode = Scene.FOGMODE_LINEAR;\r\n        this.scene.fogStart = 350.0;\r\n        this.scene.fogEnd = 700.0;\r\n        this.scene.fogColor = new Color3(0.75, 0.75, 0.85);\r\n\r\n        /*\r\n        pixels = rp.cubeTexture.readPixels(0,0)\r\n        // i take the first pixel of the reflection probe texture for fog color.\r\n        // since pixels are stored as buffer array, first pixel are first 4 values of array [r,g,b,a....]\r\n        scene.fogColor = new Color3(pixels[0]/255, pixels[1]/255, pixels[2]/255)\r\n        */\r\n    }\r\n\r\n}\r\n\r\nexport { DefaultRenderPipeline };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\n\r\n/**\r\n * DDD Viewer base skybox class.\r\n */\r\nabstract class Skybox  {\r\n\r\n    protected dddViewer: SceneViewer;\r\n\r\n    constructor(dddViewer: SceneViewer) {\r\n\r\n        // Reference to DDDViewer\r\n        this.dddViewer = dddViewer;\r\n\r\n        // Babylon camera which we are controlling\r\n        //this.camera = dddViewer.camera;\r\n    }\r\n\r\n    abstract update(deltaTime: number): void;\r\n\r\n}\r\n\r\nexport { Skybox };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\nimport { Skybox } from \"./Skybox\";\r\n\r\n/**\r\n * A skybox based on a cubemap.\r\n */\r\nclass CubemapSkybox extends Skybox {\r\n\r\n    update(deltaTime: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}\r\n\r\nexport { CubemapSkybox };","/*\r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and Contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { Camera } from \"@babylonjs/core\";\r\nimport { SceneViewer } from \"SceneViewer\";\r\nimport { Skybox } from \"./Skybox\";\r\n\r\n/**\r\n * A skybox based on a shader.\r\n */\r\nclass DynamicSkybox extends Skybox {\r\n\r\n    update(deltaTime: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}\r\n\r\nexport { DynamicSkybox };"],"names":["DDDViewerConfig","LayerManager","sceneViewer","layers","_proto","prototype","update","deltaTime","key","addLayer","layer","setViewer","removeLayer","getLayer","QueueLoader","queue","current","processNext","length","task","pop","processTask","enqueueLoadModel","url","onSuccess","onFailure","push","concurrentTasks","SceneLoader","ImportMesh","scene","newMeshes","particleSystems","skeletons","_this","msg","ex","ViewerProcessManager","currentProcesses","playing","time","_iterator","_createForOfIteratorHelperLoose","_step","done","proc","value","filter","item","finished","add","process","Error","remove","SkyMaterialWrapper","material","initMaterial","Effect","ShadersStore","shaderMaterial","ShaderMaterial","vertex","fragment","attributes","uniforms","mainTexture","Texture","setTexture","setFloat","backFaceCulling","TerrainMaterialWrapper","splatmapTexture","atlasTexture","atlasNormalTexture","options","Vector2","dedupDouble","initSplatMaterial","terrainMaterialShared","reflectionTexture","environmentTexture","environmentIntensity","baseEnvironmentIntensity","onBindObservable","mesh","bind","ubo","splatMap","atlas","atlasnormals","defScale","numTilesHorizontal","numTilesVertical","numSplatTilesHorizontal","numSplatTilesVertical","splatInfos","positions","scales","displScales","dedupScales","roughness","metallic","tileIndexes","shaderinjectpoint1","shaderinjectpoint2","shaderinjectpoint3","shaderinjectpoint4","totalTiles","tileScale","totalSplatTiles","splatScale","x","y","v","h","i","tpos","Math","floor","toFixed","PBRCustomMaterial","albedoTexture","atlasBumpTexture","AddUniform","Vertex_Before_PositionUpdated","Vertex_MainEnd","Fragment_Definitions","Fragment_Begin","Fragment_MainBegin","Fragment_Custom_Albedo","Fragment_Custom_MetallicRoughness","getEffect","TextMaterialWrapper","bumpTexture","ScenePosition","ViewerProcess","AnimationProcess","_ViewerProcess","_inheritsLoose","animTime","call","interpFactor","easing","QuadraticEase","setEasingMode","EasingFunction","EASINGMODE_EASEINOUT","ease","CameraMovementAnimationProcess","_AnimationProcess","moveStart","moveEnd","calculateMslHeights","_mslHeightStart","startPositionScene","wgs84ToScene","positionWGS84","startPositionSceneVec","Vector3","_this$sceneViewer$ele","elevationMSLFromSceneCoords","terrainElevation","positionGroundHeight","_mslHeightEnd","endPositionScene","endPositionSceneVec","_this$sceneViewer$ele2","move_start","move_end","viewerState","Scalar","Lerp","heightStart","heightEnd","moveDistance","moveDistanceMag","sqrt","pow","moveArcHeight","moveArcHeightFactor","moveArcOffset","sin","PI","mslHeight","positionTerrainElevation","positionTilt","startHeading","positionHeading","targetHeading","abs","newPositionHeading","LerpAngle","positionScene","position","rotation","camera","TargetCamera","DateTimeAnimationProcess","dtStart","dtEnd","console","debug","interpTime","getTime","positionDate","Date","lightSetupFromDatePos","TextAnimationProcess","text","interpChars","ceil","interpText","substr","sceneTitleText","ViewerSequencer","seq","index","waitTime","step","runStep","command","posString","positionString","parsePositionString","moveAnimationProcess","processes","setHours","parseInt","split","setMinutes","startsWith","play","detachControl","sceneViewModeShow","ViewerState","dddConfig","initialCoords","defaultCoords","shadowsEnabled","localStorage","getItem","sceneShadowsEnabled","JSON","parse","textsEnabled","sceneTextsEnabled","sceneTileDrawDistance","sceneTileDrawDistanceDefault","DDDObjectRef","submeshIdx","metadata","nodeMetadata","indexes","faceIndexStart","faceIndexEnd","node","gltf","extras","fromMeshFace","faceIndex","subIndex","prevIndex","objectRef","getMetadata","urlId","result","replaceAll","encodeURIComponent","getId","id","getUrlId","getLabel","getChildren","child","getParent","parent","BaseCameraController","dddViewer","getCamera","FreeCameraController","_BaseCameraController","fixMinHeight","activate","customRenderTargets","dispose","UniversalCamera","Zero","minZ","maxZ","angularSensibility","touchAngularSensibility","inertia","keysUp","keysDown","keysLeft","keysRight","keysUpward","keysDownward","attachControl","engine","getRenderingCanvas","fov","setMoveSpeed","sceneMoveSpeed","updateRenderTargets","shadowGenerator","splitFrustum","SceneViewer","canvas","Color3","Object","assign","element","parentElement","layerManager","queueLoader","originShiftWGS84","projection","proj4","tileGrid","createXYZ","extent","extentFromProjection","catalog","catalog_materials","instanceRoots","depends","lastDateUpdate","sequencer","Engine","Scene","useGeometryIdsMap","initCamera","initialize","coords","registerProjectionForCoords","pointerMovePredicate","pointerDownPredicate","sceneInstru","SceneInstrumentation","cameraController","initializeMaterials","envReflectionProbe","sceneEnvironmentProbe","ReflectionProbe","refreshRate","cubeTexture","hdrTexture","CubeTexture","CreateFromPrefilteredData","loadSkybox","sceneSkybox","atlasTextureUrl","assetsUrlbase","fontAtlasTexture","tmw","zOffset","materialText","addMaterialToCatalog","ambientColor","light","DirectionalLight","normalizeToNew","diffuse","specular","intensity","CascadedShadowGenerator","bias","shadowMaxZ","penumbraDarkness","lambda","forceBackFacesOnly","lensFlareEmitter","Mesh","lensFlareSystem","LensFlareSystem","flareScale","LensFlare","loadCatalog","loadTextures","runRenderLoop","getDeltaTime","render","autoClear","autoClearDepthAndStencil","blockMaterialDirtyMechanism","setRenderingAutoClearDepthStencil","water","WaterMaterial","waveLength","waveHeight","waveSpeed","windForce","windDirection","bumpHeight","alpha","transparencyMode","bumpAffectsReflection","colorBlendFactor","colorBlendFactor2","specularColor","diffuseColor","materialWater","materialHighlight","StandardMaterial","emissiveColor","wireframe","disableLighting","textureDetailSurfaceImp","baseUrl","skybox","getRenderList","renderList","CreateSphere","skyboxMaterial","disableDepthWrite","infiniteDistance","applyFog","MeshBuilder","CreateBox","size","coordinatesMode","SKYBOX_MODE","renderingGroupId","markDirty","showFullScreen","switchFullscreen","filename","loadMaterials","_particleSystems","_skeletons","_this2","loadCatalogFromMesh","setParent","setEnabled","processDepends","_event","_scene","_msg","dependsCopy","concat","_loop","dep","_this3","processMesh","addMeshToCatalog","e","_iterator2","_step2","force","name","dontFreeze","freeze","PBRMaterial","uvScale","twoSidedLighting","PBRBaseMaterial","vOffset","uScale","vScale","emissiveTexture","White","useHorizonOcclusion","processMeshDummy","_root","root","rootmd","tileInfo","getChildMeshes","getTotalVertices","getTotalIndices","receiveShadows","useSplatMap","sceneGroundTextureOverrideUrl","materialsSplatmap","tileUrlBase","splatmapUrl","matwrapper","splatmapAtlasTexture","splatmapAtlasNormalsTexture","_splatmapMaterial","createSplatmapMaterial","bounds","uOffset","isBlocker","indexOf","materialTextCustom","mat","mmat","newMesh","showText","textWidth","textHeight","CreatePlane","width","height","sideOrientation","DOUBLESIDE","updatable","scaling","clone","rotationQuaternion","rotate","Right","Space","LOCAL","texture","DynamicTexture","font","drawText","diffuseTexture","hasAlpha","useAlphaFromDiffuseTexture","isPickable","ignored_keys","instanceAsThinInstanceBuffers","instanceAsThinInstance","cullingStrategy","AbstractMesh","CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY","_i","_arr","processed","instance","meshes","_iterator3","_step3","instanceRootKey","meshInstanceRoot","makeGeometryUnique","cloneMat","toLeftHanded","getShadowMap","scaleMatrix","Matrix","Compose","Quaternion","nodeMatrix","computeWorldMatrix","matrix","multiply","meshInstanceRootMatrix","meshMatrix","meshMatrixRelInstanceRoot","Invert","thinInstanceAdd","freezeWorldMatrix","metadataNode","_iterator4","_step4","Up","Forward","bakeCurrentTransformIntoVertices","addLODLevel","bufferMatrices","bufferMatricesArray","Float32Array","set","thinInstanceSetBuffer","instanceAsNode","TransformNode","positionTileZoomLevel","updateElevation","ArcRotateCamera","heading","tilt","beta","yaw","asArray","updateSceneDatetime","sceneFPS","getFps","sceneDrawCalls","drawCallsCounter","sceneTriangles","getActiveIndices","updateInterval","maxUpdateElapsed","currentDateUpdate","updateElapsed","scaledElapsed","timeScale","getHours","setSeconds","getSeconds","positionDateSeconds","sceneToWGS84","point","inverse","forward","scenePos","wgs84Pos","href","regexp","matches","match","parseFloat","_iterator5","_step5","slice","code","heightPrecision","groundHeight","ray","Ray","z","pickResult","pickWithRay","pickedMesh","distance","_this$elevationMSLFro","terrainPickResult","terrainObjectRef","faceId","positionName","coordsUtm","transform","tileCoords","getTileCoordForCoordAndZ","tileExtent","getTileCoordExtent","tileCenter","tileCenterWGS84","deselectMesh","sceneSelectedMeshId","_iterator6","highlightMeshes","_step6","selectedMesh","deselectObject","selectedObject","_iterator7","_step7","findObjectById","objectId","children","rootNodes","map","o","_iterator8","_step8","selectObject","highlight","highlightClone","indices","getIndices","newIndices","setIndices","sceneSelectedShowNormals","normals","showNormals","color","getVerticesData","VertexBuffer","NormalKind","PositionKind","Red","lines","v1","FromArray","v2","scaleInPlace","normalLines","CreateLineSystem","selectMesh","setHighlightRecursively","submesh","_this4","_iterator9","_step9","mc","getBoundsRecursively","BoundingInfo","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","getBoundingInfo","minWorld","boundingBox","minimumWorld","maxWorld","maximumWorld","minimum","maximum","_iterator10","_step10","nc","findNode","criteria","_iterator11","_step11","sn","setCameraController","cc","setPosition","warn","groundTextureLayerSetUrl","speed","lightDate","lightSecondsOffsetTimezone","times","SunCalc","getTimes","sunriseStr","sunrise","getMinutes","sunsetStr","sunset","currentSunPos","getPosition","currentMoonPos","getMoonPosition","altitudeLessHorizonAtmAprox","altitude","sunlightAmountNorm","sunAltitude","lightRot","FromEulerAngles","azimuth","lightSunAndFlareRot","minLightDay","maxLightDay","rotateByQuaternionToRef","direction","lightIntensity","skyboxMinReflectionLevel","environmentIntensityMax","level","getMaterialByName","getEmitter","addInPlace","setEmitter","flareEnabled","isEnabled","lampMatOn","_previousLampPatOn","lampMat","unfreeze","colorLightLamp","Black","semCycleSeconds","semColor","colorLightRed","colorLightGreen","colorLightOrange","sceneShadowsSetEnabled","setItem","stringify","alert","sceneTextsSetEnabled","textures","materialsTextureSet","splatmap","info","atlasNormalsTextureUrl","NEAREST_NEAREST_MIPLINEAR","sceneTextureSet","textureSet","GeolocationCameraController","apply","arguments","OrbitCameraController","targetCoords","Distance","lowerRadiusLimit","upperRadiusLimit","upperBetaLimit","panningSensibility","useNaturalPinchZoom","PanningCameraController","WalkCameraController","_FreeCameraController","sceneCameraWalkHeight","WalkCollideCameraController","_WalkCameraController","currentHeight","baseHeight","fallStartDistance","falling","velocity","gravity","scale","DDDFormat","GeoJSONFormat","Base3DLayer","visible","setVisible","clearScene","DDD3DLayer","_Base3DLayer","log","loadData","data","objectBlob","Blob","type","objectUrl","URL","createObjectURL","layerKey","pivot","forEach","blockfreeActiveMeshesAndRenderingGroups","GeoJsonItem","GeoJsonPoint","_GeoJsonItem","coordsWgs84","transformCoords","viewer","csa","coordsScene","GeoJsonLine","_GeoJsonItem2","_proto2","GeoJson3DLayer","geojsonData","setTimeout","loadFromGeoJson","projectFeatures","updateSceneFromFeatures","_proto3","setColor","colorHex","featureMaterial","FromHexString","rootNode","setAltitudeOffset","altitudeOffset","feature","loadFeature","properties","geometry","lat","lon","alt","geojsonItem","featuresPoints","coord","featuresLines","marker","diameter","segments","CreateLines","points","Tile3D","status","GeoTile3D","_Tile3D","coordsTileGrid","GeoTile3DLayer","tiles","updateTilesDynamic","testConeSphere","origin","angle","sphereCenter","sphereRadius","V","subtract","VlenSq","Dot","V1len","distanceClosestPoint","cos","angleCull","frontCull","backCull","_lastLoadDynamic","_this$layerManager","coordsWGS84","olProj","frustrumOrigin","frustrumForward","getDirection","normalize","frustrumSize","frustrumAngle","loadTile","tiledistWalk","tiledistDraw","j","disableTile","getTileCoordCenter","tileCenterScene","tileKey","tile","getTileMetadata","md","tileExtentMinScene","tileExtentMaxScene","sizeWidth","sizeHeight","tileUrlSuffix","tileUrl","loadQuadMarker","Gray","minHeight","heightMin","heightMax","_lastHeight","tilesLoadedCount","_initialHeightSet","tileMetadata","foundMesh","request","innerError","loadQuadTile","dataView","DataView","response","decoder","TextDecoder","decodedString","decode","responseData","remoteQueueJobsStatus","error","markerName","materialPlane","groundTextureLayerProcessNode","materialGround","groundTextureLayerUrl","replaceTileCoordsUrl","specularPower","materialGroundTexture","ambientTexture","linkEmissiveWithDiffuse","wrapU","WRAP_ADDRESSMODE","wrapV","replace","toString","disposeTile","OverlayLayer","sourceLayerKey","createOverlayDiv","div","document","createElement","appendChild","className","style","zIndex","top","left","right","bottom","pointerEvents","resizeOverlayDiv","display","sourceLayer","html","featureDiv","outerHTML","DefaultEnvironment","DefaultRenderPipeline","scenePostprocessingSetEnabled","scenePostprocessingEnabled","updateRenderPipeline","postProcessesEnabled","initRenderPipeline","defaultPipeline","DefaultRenderingPipeline","fxaaEnabled","bloomEnabled","bloomWeight","imageProcessing","toneMappingEnabled","lensRenderingPipeline","LensRenderingPipeline","edge_blur","chromatic_aberration","distortion","dof_focus_distance","dof_aperture","grain_amount","dof_pentagon","dof_gain","dof_threshold","dof_darken","curve","ColorCurves","globalHue","globalDensity","globalSaturation","highlightsHue","highlightsDensity","highlightsSaturation","shadowsHue","shadowsDensity","shadowsSaturation","imageProcessingConfiguration","colorCurvesEnabled","colorCurves","postProcess","ImageProcessingPostProcess","fogMode","FOGMODE_LINEAR","fogStart","fogEnd","fogColor","Skybox","CubemapSkybox","_Skybox","DynamicSkybox"],"mappings":"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"}